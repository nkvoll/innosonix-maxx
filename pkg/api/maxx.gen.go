// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for DeviceInfosModelName.
const (
	MA16D2  DeviceInfosModelName = "MA16D2"
	MA16LP2 DeviceInfosModelName = "MA16LP2"
	MA24D2  DeviceInfosModelName = "MA24D2"
	MA24HP2 DeviceInfosModelName = "MA24HP2"
	MA24LP2 DeviceInfosModelName = "MA24LP2"
	MA32D   DeviceInfosModelName = "MA32D"
	MA32D2  DeviceInfosModelName = "MA32D2"
	MA32HP2 DeviceInfosModelName = "MA32HP2"
	MA32LP  DeviceInfosModelName = "MA32LP"
	MA32LP2 DeviceInfosModelName = "MA32LP2"
)

// Defines values for DeviceInfosOptions.
const (
	D1  DeviceInfosOptions = "D1"
	D2  DeviceInfosOptions = "D2"
	IF1 DeviceInfosOptions = "IF1"
	IF2 DeviceInfosOptions = "IF2"
	IF3 DeviceInfosOptions = "IF3"
	M1  DeviceInfosOptions = "M1"
)

// Defines values for SettingsDelayType.
const (
	M       SettingsDelayType = "m"
	Ms      SettingsDelayType = "ms"
	Samples SettingsDelayType = "samples"
)

// Defines values for SettingsEQType.
const (
	SettingsEQTypeHIGHSHELF SettingsEQType = "HIGH SHELF"
	SettingsEQTypeHP12dBBES SettingsEQType = "HP 12dB BES"
	SettingsEQTypeHP12dBBW  SettingsEQType = "HP 12dB BW"
	SettingsEQTypeHP12dBLWR SettingsEQType = "HP 12dB LW-R"
	SettingsEQTypeHP18dBBES SettingsEQType = "HP 18dB BES"
	SettingsEQTypeHP18dBBW  SettingsEQType = "HP 18dB BW"
	SettingsEQTypeHP24dBBES SettingsEQType = "HP 24dB BES"
	SettingsEQTypeHP24dBBW  SettingsEQType = "HP 24dB BW"
	SettingsEQTypeHP24dBLWR SettingsEQType = "HP 24dB LW-R"
	SettingsEQTypeHP48dBBES SettingsEQType = "HP 48dB BES"
	SettingsEQTypeHP48dBBW  SettingsEQType = "HP 48dB BW"
	SettingsEQTypeHP48dBLWR SettingsEQType = "HP 48dB LW-R"
	SettingsEQTypeHP6dB     SettingsEQType = "HP 6dB"
	SettingsEQTypeHPVARQ    SettingsEQType = "HP VAR Q"
	SettingsEQTypeLOWSHELF  SettingsEQType = "LOW SHELF"
	SettingsEQTypeLP12dBBES SettingsEQType = "LP 12dB BES"
	SettingsEQTypeLP12dBBW  SettingsEQType = "LP 12dB BW"
	SettingsEQTypeLP12dBLWR SettingsEQType = "LP 12dB LW-R"
	SettingsEQTypeLP18dBBES SettingsEQType = "LP 18dB BES"
	SettingsEQTypeLP18dBBW  SettingsEQType = "LP 18dB BW"
	SettingsEQTypeLP24dBBES SettingsEQType = "LP 24dB BES"
	SettingsEQTypeLP24dBBW  SettingsEQType = "LP 24dB BW"
	SettingsEQTypeLP24dBLWR SettingsEQType = "LP 24dB LW-R"
	SettingsEQTypeLP48dBBES SettingsEQType = "LP 48dB BES"
	SettingsEQTypeLP48dBBW  SettingsEQType = "LP 48dB BW"
	SettingsEQTypeLP48dBLWR SettingsEQType = "LP 48dB LW-R"
	SettingsEQTypeLP6dB     SettingsEQType = "LP 6dB"
	SettingsEQTypeLPVARQ    SettingsEQType = "LP VAR Q"
	SettingsEQTypeNOTCH     SettingsEQType = "NOTCH"
	SettingsEQTypeOFF       SettingsEQType = "OFF"
	SettingsEQTypePEAK      SettingsEQType = "PEAK"
)

// Defines values for SettingsNetworkType.
const (
	SettingsNetworkTypeAuto   SettingsNetworkType = "auto"
	SettingsNetworkTypeDhcp   SettingsNetworkType = "dhcp"
	SettingsNetworkTypeStatic SettingsNetworkType = "static"
)

// Defines values for SettingsNetworkOptionsType.
const (
	SettingsNetworkOptionsTypeAutoIp SettingsNetworkOptionsType = "auto-ip"
	SettingsNetworkOptionsTypeDhcp   SettingsNetworkOptionsType = "dhcp"
	SettingsNetworkOptionsTypeStatic SettingsNetworkOptionsType = "static"
)

// Defines values for StatusAmpOptionsValueString.
const (
	StatusAmpOptionsValueStringERROR     StatusAmpOptionsValueString = "ERROR"
	StatusAmpOptionsValueStringNA        StatusAmpOptionsValueString = "N/A"
	StatusAmpOptionsValueStringOFF       StatusAmpOptionsValueString = "OFF"
	StatusAmpOptionsValueStringOK        StatusAmpOptionsValueString = "OK"
	StatusAmpOptionsValueStringOTW       StatusAmpOptionsValueString = "OTW"
	StatusAmpOptionsValueStringSHUTDOWN  StatusAmpOptionsValueString = "SHUTDOWN"
	StatusAmpOptionsValueStringUNDEFINED StatusAmpOptionsValueString = "UNDEFINED"
	StatusAmpOptionsValueStringWARNING   StatusAmpOptionsValueString = "WARNING"
)

// ArrayFloat defines model for ArrayFloat.
type ArrayFloat = []float32

// Boolean defines model for Boolean.
type Boolean struct {
	// Actual Boolean Value of this property
	Value *bool `json:"value,omitempty"`
}

// DeviceInfos defines model for DeviceInfos.
type DeviceInfos struct {
	Channel        *int                  `json:"channel,omitempty"`
	FpgaRevision   *string               `json:"fpga_revision,omitempty"`
	HousingFan     *bool                 `json:"housing_fan,omitempty"`
	ImageId        *int                  `json:"image_id,omitempty"`
	LoaderRevision *string               `json:"loader_revision,omitempty"`
	MainsMeasure   *bool                 `json:"mains_measure,omitempty"`
	ModelName      *DeviceInfosModelName `json:"model_name,omitempty"`
	Options        *[]DeviceInfosOptions `json:"options,omitempty"`
	PsuFan         *bool                 `json:"psu_fan,omitempty"`
	Rtc            *bool                 `json:"rtc,omitempty"`
	SdCard         *bool                 `json:"sd_card,omitempty"`
	Serial         *string               `json:"serial,omitempty"`
	SwRevision     *string               `json:"sw_revision,omitempty"`
}

// DeviceInfosModelName defines model for DeviceInfos.ModelName.
type DeviceInfosModelName string

// DeviceInfosOptions defines model for DeviceInfos.Options.
type DeviceInfosOptions string

// Error defines model for Error.
type Error struct {
	// Error Description
	Error *string `json:"error,omitempty"`
}

// Integer defines model for Integer.
type Integer struct {
	// Actual Integer Value of this property
	Value *int `json:"value,omitempty"`
}

// IntegerOptions defines model for IntegerOptions.
type IntegerOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Value *[]interface{} `json:"value,omitempty"`
}

// NetworkIp defines model for NetworkIp.
type NetworkIp = string

// NetworkMask defines model for NetworkMask.
type NetworkMask = string

// Number defines model for Number.
type Number struct {
	// Actual Float Value of this property
	Value *float32 `json:"value,omitempty"`
}

// NumberOptions defines model for NumberOptions.
type NumberOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Threshold *[]interface{} `json:"threshold,omitempty"`
}

// PresetStorageOption defines model for PresetStorageOption.
type PresetStorageOption = map[string]interface{}

// Settings defines model for Settings.
type Settings struct {
	Channel   *SettingsChannels  `json:"channel,omitempty"`
	Device    *SettingsDevice    `json:"device,omitempty"`
	Interface *SettingsInterface `json:"interface,omitempty"`
}

// SettingsAssign defines model for SettingsAssign.
type SettingsAssign struct {
	AssignId *int  `json:"assign_id,omitempty"`
	Value    *bool `json:"value,omitempty"`
}

// SettingsAssigns defines model for SettingsAssigns.
type SettingsAssigns = []SettingsAssign

// SettingsAudioSync defines model for SettingsAudioSync.
type SettingsAudioSync struct {
	Id *int `json:"id,omitempty"`
}

// SettingsAudioSyncGet defines model for SettingsAudioSyncGet.
type SettingsAudioSyncGet struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// SettingsAudioSyncOptions defines model for SettingsAudioSyncOptions.
type SettingsAudioSyncOptions struct {
	Sync *[]struct {
		Id   *int    `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"sync,omitempty"`
}

// SettingsChannel defines model for SettingsChannel.
type SettingsChannel struct {
	Ampenable     *Boolean                      `json:"ampenable,omitempty"`
	Audioanalyzer *SettingsChannelAudioAnalyzer `json:"audioanalyzer,omitempty"`
	Bridgeenable  *Boolean                      `json:"bridgeenable,omitempty"`
	ChannelId     *int                          `json:"channel_id,omitempty"`
	Dsp           *SettingsChannelDsp           `json:"dsp,omitempty"`
	Name          *String                       `json:"name,omitempty"`
	Speaker       *SettingsSpeaker              `json:"speaker,omitempty"`
}

// SettingsChannelAudioAnalyzer defines model for SettingsChannelAudioAnalyzer.
type SettingsChannelAudioAnalyzer struct {
	Enable    *Boolean                               `json:"enable,omitempty"`
	Reference *SettingsChannelAudioAnalyzerReference `json:"reference,omitempty"`
}

// SettingsChannelAudioAnalyzerReference defines model for SettingsChannelAudioAnalyzerReference.
type SettingsChannelAudioAnalyzerReference struct {
	Magitude *ArrayFloat `json:"magitude,omitempty"`
	Phase    *ArrayFloat `json:"phase,omitempty"`
}

// SettingsChannelDsp defines model for SettingsChannelDsp.
type SettingsChannelDsp struct {
	Currentlimiter *SettingsCurrentlimiter  `json:"currentlimiter,omitempty"`
	Delay          *SettingsDelay           `json:"delay,omitempty"`
	Eq             *SettingsEQs             `json:"eq,omitempty"`
	Fir            *SettingsFIR             `json:"fir,omitempty"`
	Groupmute      *Boolean                 `json:"groupmute,omitempty"`
	Mute           *Boolean                 `json:"mute,omitempty"`
	Patch          *SettingsPatches         `json:"patch,omitempty"`
	Phase          *Boolean                 `json:"phase,omitempty"`
	Powerlimiter   *SettingsPowerlimiter    `json:"powerlimiter,omitempty"`
	Voltagelimiter *SettingsVoltagelimiters `json:"voltagelimiter,omitempty"`
	Volume         *Number                  `json:"volume,omitempty"`
}

// SettingsChannels defines model for SettingsChannels.
type SettingsChannels = []SettingsChannel

// SettingsCurrentlimiter defines model for SettingsCurrentlimiter.
type SettingsCurrentlimiter struct {
	// Limiter threshold in [Ap]
	Threshold *float32 `json:"threshold,omitempty"`
}

// SettingsCurrentlimiterOption defines model for SettingsCurrentlimiterOption.
type SettingsCurrentlimiterOption struct {
	// format [MIN, MAX, STEP, UNIT]
	Threshold *[]interface{} `json:"threshold,omitempty"`
}

// SettingsDelay defines model for SettingsDelay.
type SettingsDelay struct {
	// temperature to calc m/ms to sample
	Temperature *float32 `json:"temperature,omitempty"`

	// delay type
	Type  *SettingsDelayType `json:"type,omitempty"`
	Value *float32           `json:"value,omitempty"`
}

// delay type
type SettingsDelayType string

// SettingsDelayOptions defines model for SettingsDelayOptions.
type SettingsDelayOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Temperature *[]interface{} `json:"temperature,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Type  *[]interface{} `json:"type,omitempty"`
	Value *struct {
		// format [MIN, MAX, STEP, UNIT]
		M *[]interface{} `json:"m,omitempty"`

		// format [MIN, MAX, STEP, UNIT]
		Ms *[]interface{} `json:"ms,omitempty"`

		// format [MIN, MAX, STEP, UNIT]
		Sample *[]interface{} `json:"sample,omitempty"`
	} `json:"value,omitempty"`
}

// SettingsDevice defines model for SettingsDevice.
type SettingsDevice struct {
	Dsp          *SettingsDeviceDsp  `json:"dsp,omitempty"`
	Fan          *SettingsFan        `json:"fan,omitempty"`
	Grouping     *SettingsGrouping   `json:"grouping,omitempty"`
	Mainsvoltage *Integer            `json:"mainsvoltage,omitempty"`
	Name         *String             `json:"name,omitempty"`
	Network      *SettingsNetwork    `json:"network,omitempty"`
	Remotemute   *SettingsRemotemute `json:"remotemute,omitempty"`
	Syslog       *SettingsSyslog     `json:"syslog,omitempty"`
	Time         *SettingsTime       `json:"time,omitempty"`
}

// SettingsDeviceDante defines model for SettingsDeviceDante.
type SettingsDeviceDante struct {
	Identity *String                     `json:"identity,omitempty"`
	Network  *SettingsDeviceDanteNetwork `json:"network,omitempty"`
}

// SettingsDeviceDanteNetwork defines model for SettingsDeviceDanteNetwork.
type SettingsDeviceDanteNetwork struct {
	// set to true, to execute change on broolkyn device
	Apply *bool `json:"apply,omitempty"`

	// if you set dante ip, it temporarily will be saved to reboot_* values (like dante controller). They will be set on device reboot or if you send apply:true.
	Ips *[]struct {
		Dns           *NetworkIp   `json:"dns,omitempty"`
		Gateway       *NetworkIp   `json:"gateway,omitempty"`
		InterfaceId   *float32     `json:"interface_id,omitempty"`
		Ip            *NetworkIp   `json:"ip,omitempty"`
		Netmask       *NetworkMask `json:"netmask,omitempty"`
		RebootDns     *NetworkIp   `json:"reboot_dns,omitempty"`
		RebootGateway *NetworkIp   `json:"reboot_gateway,omitempty"`
		RebootIp      *NetworkIp   `json:"reboot_ip,omitempty"`
		RebootNetmask *NetworkMask `json:"reboot_netmask,omitempty"`
		RebootType    *float32     `json:"reboot_type,omitempty"`
		Type          *float32     `json:"type,omitempty"`
	} `json:"ips,omitempty"`
	Vlanconfig *float32 `json:"vlanconfig,omitempty"`
}

// SettingsDeviceDanteNetworkOption defines model for SettingsDeviceDanteNetworkOption.
type SettingsDeviceDanteNetworkOption struct {
	Types *[]struct {
		Name *string  `json:"name,omitempty"`
		Type *float32 `json:"type,omitempty"`
	} `json:"types,omitempty"`
	Vlanconfigs *[]struct {
		Name       *string  `json:"name,omitempty"`
		Vlanconfig *float32 `json:"vlanconfig,omitempty"`
	} `json:"vlanconfigs,omitempty"`
}

// SettingsDeviceDsp defines model for SettingsDeviceDsp.
type SettingsDeviceDsp struct {
	Mute             *Boolean            `json:"mute,omitempty"`
	Startupmute      *Boolean            `json:"startupmute,omitempty"`
	Voltagereference *Number             `json:"voltagereference,omitempty"`
	Volume           *Number             `json:"volume,omitempty"`
	Volumeramp       *SettingsVolumeramp `json:"volumeramp,omitempty"`
}

// SettingsEQ defines model for SettingsEQ.
type SettingsEQ struct {
	Enable    *bool           `json:"enable,omitempty"`
	EqId      int             `json:"eq_id"`
	Frequency *int            `json:"frequency,omitempty"`
	Gain      *float32        `json:"gain,omitempty"`
	Quality   *float32        `json:"quality,omitempty"`
	Type      *SettingsEQType `json:"type,omitempty"`
}

// SettingsEQType defines model for SettingsEQ.Type.
type SettingsEQType string

// SettingsEQOptions defines model for SettingsEQOptions.
type SettingsEQOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	EqId *[]interface{} `json:"eq_id,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Frequency *[]interface{} `json:"frequency,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Gain *[]interface{} `json:"gain,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Quality *[]interface{} `json:"quality,omitempty"`
	Type    *[]struct {
		Biquads      *int    `json:"biquads,omitempty"`
		Description  *string `json:"description,omitempty"`
		HasFrequency *bool   `json:"hasFrequency,omitempty"`
		HasGain      *bool   `json:"hasGain,omitempty"`
		HasQuality   *bool   `json:"hasQuality,omitempty"`
		Value        *string `json:"value,omitempty"`
	} `json:"type,omitempty"`
}

// SettingsEQs defines model for SettingsEQs.
type SettingsEQs = []SettingsEQ

// SettingsFIR defines model for SettingsFIR.
type SettingsFIR struct {
	Coefficients  *[]float32 `json:"coefficients,omitempty"`
	Enable        *bool      `json:"enable,omitempty"`
	Length        *int       `json:"length,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ScalingFactor *int       `json:"scaling_factor,omitempty"`
}

// SettingsFIROptions defines model for SettingsFIROptions.
type SettingsFIROptions struct {
	Length        *int `json:"length,omitempty"`
	Max           *int `json:"max,omitempty"`
	Min           *int `json:"min,omitempty"`
	Name          *int `json:"name,omitempty"`
	ScalingFactor *int `json:"scaling_factor,omitempty"`
}

// SettingsFan defines model for SettingsFan.
type SettingsFan struct {
	Mode *int `json:"mode,omitempty"`
}

// SettingsGroup defines model for SettingsGroup.
type SettingsGroup struct {
	Assign  *[]SettingsAssign `json:"assign,omitempty"`
	Enable  *Boolean          `json:"enable,omitempty"`
	GroupId *int              `json:"group_id,omitempty"`
	Mute    *Boolean          `json:"mute,omitempty"`
	Name    *String           `json:"name,omitempty"`
	Solo    *Boolean          `json:"solo,omitempty"`
}

// SettingsGrouping defines model for SettingsGrouping.
type SettingsGrouping struct {
	Groups        *SettingsGroups `json:"groups,omitempty"`
	Soloautoclear *Boolean        `json:"soloautoclear,omitempty"`
}

// SettingsGroups defines model for SettingsGroups.
type SettingsGroups = []SettingsGroup

// SettingsInterface defines model for SettingsInterface.
type SettingsInterface struct {
	Interfaces  *SettingsInterfaces  `json:"interfaces,omitempty"`
	Madithrough *SettingsMadithrough `json:"madithrough,omitempty"`
	Sync        *SettingsAudioSync   `json:"sync,omitempty"`
}

// SettingsInterfaceConfig defines model for SettingsInterfaceConfig.
type SettingsInterfaceConfig struct {
	Inputchannel  *SettingsInterfaceConfigInputChannels  `json:"inputchannel,omitempty"`
	InterfaceId   *int                                   `json:"interface_id,omitempty"`
	Name          *string                                `json:"name,omitempty"`
	Outputchannel *SettingsInterfaceConfigOutputChannels `json:"outputchannel,omitempty"`
}

// SettingsInterfaceConfigInputChannel defines model for SettingsInterfaceConfigInputChannel.
type SettingsInterfaceConfigInputChannel struct {
	ChannelId *int    `json:"channel_id,omitempty"`
	Name      *String `json:"name,omitempty"`
}

// SettingsInterfaceConfigInputChannelPatch defines model for SettingsInterfaceConfigInputChannelPatch.
type SettingsInterfaceConfigInputChannelPatch struct {
	ChannelName *string `json:"channel_name,omitempty"`
	DeviceName  *string `json:"device_name,omitempty"`
}

// SettingsInterfaceConfigInputChannelPatchOption defines model for SettingsInterfaceConfigInputChannelPatchOption.
type SettingsInterfaceConfigInputChannelPatchOption struct {
	Source *[]struct {
		ChannelName *int `json:"channel_name,omitempty"`
		DeviceName  *int `json:"device_name,omitempty"`
	} `json:"source,omitempty"`
}

// SettingsInterfaceConfigInputChannels defines model for SettingsInterfaceConfigInputChannels.
type SettingsInterfaceConfigInputChannels = []SettingsInterfaceConfigInputChannel

// SettingsInterfaceConfigOutputChannel defines model for SettingsInterfaceConfigOutputChannel.
type SettingsInterfaceConfigOutputChannel struct {
	ChannelId *int                                       `json:"channel_id,omitempty"`
	Name      *String                                    `json:"name,omitempty"`
	Patch     *SettingsInterfaceConfigOutputChannelPatch `json:"patch,omitempty"`
}

// SettingsInterfaceConfigOutputChannelPatch defines model for SettingsInterfaceConfigOutputChannelPatch.
type SettingsInterfaceConfigOutputChannelPatch struct {
	Channel      *int    `json:"channel,omitempty"`
	SourceId     *int    `json:"source_id,omitempty"`
	SourceString *string `json:"source_string,omitempty"`
}

// SettingsInterfaceConfigOutputChannels defines model for SettingsInterfaceConfigOutputChannels.
type SettingsInterfaceConfigOutputChannels = []SettingsInterfaceConfigOutputChannel

// SettingsInterfaces defines model for SettingsInterfaces.
type SettingsInterfaces = []SettingsInterfaceConfig

// SettingsInterfacesOptions defines model for SettingsInterfacesOptions.
type SettingsInterfacesOptions = []struct {
	HasInput      *bool   `json:"has_input,omitempty"`
	HasOutput     *bool   `json:"has_output,omitempty"`
	InputChannel  *int    `json:"input_channel,omitempty"`
	InterfaceId   *int    `json:"interface_id,omitempty"`
	Name          *string `json:"name,omitempty"`
	OutputChannel *int    `json:"output_channel,omitempty"`
}

// SettingsMadithrough defines model for SettingsMadithrough.
type SettingsMadithrough struct {
	Type *int `json:"type,omitempty"`
}

// SettingsMadithroughOptions defines model for SettingsMadithroughOptions.
type SettingsMadithroughOptions struct {
	Type *[]struct {
		Description *string `json:"description,omitempty"`
		Value       *int    `json:"value,omitempty"`
	} `json:"type,omitempty"`
}

// SettingsNetwork defines model for SettingsNetwork.
type SettingsNetwork struct {
	Gateway *NetworkIp           `json:"gateway,omitempty"`
	Ip      *NetworkIp           `json:"ip,omitempty"`
	Netmask *NetworkMask         `json:"netmask,omitempty"`
	Type    *SettingsNetworkType `json:"type,omitempty"`
}

// SettingsNetworkType defines model for SettingsNetwork.Type.
type SettingsNetworkType string

// SettingsNetworkOptions defines model for SettingsNetworkOptions.
type SettingsNetworkOptions struct {
	Type *[]SettingsNetworkOptionsType `json:"type,omitempty"`
}

// SettingsNetworkOptionsType defines model for SettingsNetworkOptions.Type.
type SettingsNetworkOptionsType string

// SettingsPatch defines model for SettingsPatch.
type SettingsPatch struct {
	Channel *int     `json:"channel,omitempty"`
	Gain    *float32 `json:"gain,omitempty"`
	Mute    *bool    `json:"mute,omitempty"`
	PatchId *int     `json:"patch_id,omitempty"`

	// depends on software options
	SourceId     *int    `json:"source_id,omitempty"`
	SourceString *string `json:"source_string,omitempty"`
}

// SettingsPatchOption defines model for SettingsPatchOption.
type SettingsPatchOption struct {
	// format [MIN, MAX, STEP, UNIT]
	Gain *[]interface{} `json:"gain,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	PatchId *[]interface{} `json:"patch_id,omitempty"`
	Source  *[]struct {
		MaxChannel *int    `json:"max_channel,omitempty"`
		SourceId   *int    `json:"source_id,omitempty"`
		SourceName *string `json:"source_name,omitempty"`
	} `json:"source,omitempty"`
}

// SettingsPatches defines model for SettingsPatches.
type SettingsPatches = []SettingsPatch

// SettingsPowerlimiter defines model for SettingsPowerlimiter.
type SettingsPowerlimiter struct {
	Attack    *float32 `json:"attack,omitempty"`
	Enable    *bool    `json:"enable,omitempty"`
	Release   *float32 `json:"release,omitempty"`
	Threshold *float32 `json:"threshold,omitempty"`
}

// SettingsPowerlimiterOptions defines model for SettingsPowerlimiterOptions.
type SettingsPowerlimiterOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Attack *[]interface{} `json:"attack,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Release *[]interface{} `json:"release,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Threshold *[]interface{} `json:"threshold,omitempty"`
}

// SettingsRemotemute defines model for SettingsRemotemute.
type SettingsRemotemute struct {
	Enable *bool      `json:"enable,omitempty"`
	Ip     *NetworkIp `json:"ip,omitempty"`
}

// SettingsSpeaker defines model for SettingsSpeaker.
type SettingsSpeaker struct {
	Detection *SettingsSpeakerDetection `json:"detection,omitempty"`
	Preset    *SettingsSpeakerPreset    `json:"preset,omitempty"`
}

// SettingsSpeakerDetection defines model for SettingsSpeakerDetection.
type SettingsSpeakerDetection struct {
	Debounce        *int     `json:"debounce,omitempty"`
	Enable          *bool    `json:"enable,omitempty"`
	PilotToneMute   *bool    `json:"pilot_tone_mute,omitempty"`
	PilotToneVolume *float32 `json:"pilot_tone_volume,omitempty"`
	Threshold       *float32 `json:"threshold,omitempty"`
}

// SettingsSpeakerDetectionOptions defines model for SettingsSpeakerDetectionOptions.
type SettingsSpeakerDetectionOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Debounce *[]interface{} `json:"debounce,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	PilotToneVolume *[]interface{} `json:"pilot_tone_volume,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Threshold *[]interface{} `json:"threshold,omitempty"`
}

// SettingsSpeakerPreset defines model for SettingsSpeakerPreset.
type SettingsSpeakerPreset struct {
	// speakerpreset blob as string
	Value *string `json:"value,omitempty"`
}

// SettingsSyslog defines model for SettingsSyslog.
type SettingsSyslog struct {
	Ip   *NetworkIp `json:"ip,omitempty"`
	Port *int       `json:"port,omitempty"`
}

// SettingsTime defines model for SettingsTime.
type SettingsTime struct {
	Current  *SettingsTimeCurrent `json:"current,omitempty"`
	Timezone *SettingsTimezone    `json:"timezone,omitempty"`
}

// SettingsTimeCurrent defines model for SettingsTimeCurrent.
type SettingsTimeCurrent struct {
	// timeformat 'YYYY-MM-DDTHH:MM:SSZ'
	Value *time.Time `json:"value,omitempty"`
}

// SettingsTimezone defines model for SettingsTimezone.
type SettingsTimezone struct {
	// linux timezone like 'UTC-2'
	Value *string `json:"value,omitempty"`
}

// SettingsVoltagelimiter defines model for SettingsVoltagelimiter.
type SettingsVoltagelimiter struct {
	Attack *float32 `json:"attack,omitempty"`
	Enable *bool    `json:"enable,omitempty"`

	// only for voltagelimiter 1
	Lookaheaddelay   *float32 `json:"lookaheaddelay,omitempty"`
	Release          *float32 `json:"release,omitempty"`
	Threshold        *float32 `json:"threshold,omitempty"`
	VoltagelimiterId *int     `json:"voltagelimiter_id,omitempty"`
}

// SettingsVoltagelimiterOptions defines model for SettingsVoltagelimiterOptions.
type SettingsVoltagelimiterOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Attack *[]interface{} `json:"attack,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Lookaheaddelay *[]interface{} `json:"lookaheaddelay,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Release *[]interface{} `json:"release,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Threshold *[]interface{} `json:"threshold,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	VoltagelimiterId *[]interface{} `json:"voltagelimiter_id,omitempty"`
}

// SettingsVoltagelimiters defines model for SettingsVoltagelimiters.
type SettingsVoltagelimiters = []SettingsVoltagelimiter

// SettingsVolumeramp defines model for SettingsVolumeramp.
type SettingsVolumeramp struct {
	Enable *bool    `json:"enable,omitempty"`
	Time   *float32 `json:"time,omitempty"`
}

// SpeakerpresetOptions defines model for SpeakerpresetOptions.
type SpeakerpresetOptions struct {
	Description  *int `json:"description,omitempty"`
	Manufacturer *int `json:"manufacturer,omitempty"`
	Password     *int `json:"password,omitempty"`
	Speakername  *int `json:"speakername,omitempty"`
	Version      *int `json:"version,omitempty"`
}

// SpeakerpresetValue defines model for SpeakerpresetValue.
type SpeakerpresetValue struct {
	// speakerpreset blob
	Value *string `json:"value,omitempty"`
}

// Status defines model for Status.
type Status struct {
	Channel   *StatusChannels  `json:"channel,omitempty"`
	Device    *StatusDevice    `json:"device,omitempty"`
	Interface *StatusInterface `json:"interface,omitempty"`
	Save      *StatusSave      `json:"save,omitempty"`
	Syslog    *StatusSyslog    `json:"syslog,omitempty"`
}

// StatusAmp defines model for StatusAmp.
type StatusAmp struct {
	Temperature *float32 `json:"temperature,omitempty"`
	Value       *int     `json:"value,omitempty"`
	ValueString *string  `json:"value_string,omitempty"`
}

// StatusAmpOptions defines model for StatusAmpOptions.
type StatusAmpOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Temperature *[]interface{} `json:"temperature,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Value       *[]interface{}                 `json:"value,omitempty"`
	ValueString *[]StatusAmpOptionsValueString `json:"value_string,omitempty"`
}

// StatusAmpOptionsValueString defines model for StatusAmpOptions.ValueString.
type StatusAmpOptionsValueString string

// StatusAudioAnalyzerValue defines model for StatusAudioAnalyzerValue.
type StatusAudioAnalyzerValue struct {
	Rms      *StatusAudioAnalyzerValueRMS `json:"rms,omitempty"`
	Spectrum *ArrayFloat                  `json:"spectrum,omitempty"`
}

// StatusAudioAnalyzerValueRMS defines model for StatusAudioAnalyzerValueRMS.
type StatusAudioAnalyzerValueRMS struct {
	Scale *float32 `json:"scale,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// StatusAudioanalyzer defines model for StatusAudioanalyzer.
type StatusAudioanalyzer struct {
	Current            *StatusAudioAnalyzerValue     `json:"current,omitempty"`
	Impedance          *StatusAudioanalyzerImpedance `json:"impedance,omitempty"`
	ImpedanceMomentary *StatusAudioanalyzerImpedance `json:"impedance_momentary,omitempty"`
	Voltage            *StatusAudioAnalyzerValue     `json:"voltage,omitempty"`
}

// StatusAudioanalyzerImpedance defines model for StatusAudioanalyzerImpedance.
type StatusAudioanalyzerImpedance struct {
	Phase    *ArrayFloat `json:"phase,omitempty"`
	Spectrum *ArrayFloat `json:"spectrum,omitempty"`
	Valid    *ArrayFloat `json:"valid,omitempty"`
}

// StatusChannel defines model for StatusChannel.
type StatusChannel struct {
	Active        *Boolean                        `json:"active,omitempty"`
	Amp           *StatusAmp                      `json:"amp,omitempty"`
	Audioanalyzer *StatusAudioanalyzer            `json:"audioanalyzer,omitempty"`
	ChannelId     *int                            `json:"channel_id,omitempty"`
	Current       *StatusCurrentPowerVoltageLevel `json:"current,omitempty"`
	Error         *StatusError                    `json:"error,omitempty"`
	Level         *StatusLevel                    `json:"level,omitempty"`
	Power         *StatusCurrentPowerVoltageLevel `json:"power,omitempty"`
	Reduction     *StatusReduction                `json:"reduction,omitempty"`
	Speaker       *StatusSpeaker                  `json:"speaker,omitempty"`
	Voltage       *StatusCurrentPowerVoltageLevel `json:"voltage,omitempty"`
}

// StatusChannels defines model for StatusChannels.
type StatusChannels = []StatusChannel

// StatusCurrentPowerVoltageLevel defines model for StatusCurrentPowerVoltageLevel.
type StatusCurrentPowerVoltageLevel struct {
	// format [PEAK, HOLD]
	Level *[]float32 `json:"level,omitempty"`
}

// StatusCurrentPowerVoltageLevelOptions defines model for StatusCurrentPowerVoltageLevelOptions.
type StatusCurrentPowerVoltageLevelOptions struct {
	Level *[]interface{} `json:"level,omitempty"`
	Scale *float32       `json:"scale,omitempty"`
}

// StatusDelay defines model for StatusDelay.
type StatusDelay struct {
	// delay in m of given delay values
	DelayM *float32 `json:"delay_m,omitempty"`

	// delay in ms of given delay values
	DelayMs *float32 `json:"delay_ms,omitempty"`

	// delay in samples of given delay values
	DelaySample *float32 `json:"delay_sample,omitempty"`
}

// StatusDevice defines model for StatusDevice.
type StatusDevice struct {
	Error      *StatusError      `json:"error,omitempty"`
	Fan        *StatusFan        `json:"fan,omitempty"`
	Fpga       *StatusFPGA       `json:"fpga,omitempty"`
	Psu        *StatusPSU        `json:"psu,omitempty"`
	Remotemute *StatusRemotemute `json:"remotemute,omitempty"`
}

// StatusError defines model for StatusError.
type StatusError struct {
	Errors *[]struct {
		Errorcode     *int    `json:"errorcode,omitempty"`
		Message       *string `json:"message,omitempty"`
		MessageLong   *string `json:"message_long,omitempty"`
		Severity      *string `json:"severity,omitempty"`
		SeverityLevel *int    `json:"severity_level,omitempty"`
	} `json:"errors,omitempty"`
	Severity      *string `json:"severity,omitempty"`
	SeverityLevel *int    `json:"severity_level,omitempty"`
}

// StatusFPGA defines model for StatusFPGA.
type StatusFPGA struct {
	// temperature in °C
	Temperature  *float32 `json:"temperature,omitempty"`
	Verification *bool    `json:"verification,omitempty"`
}

// StatusFan defines model for StatusFan.
type StatusFan struct {
	Error *[]int `json:"error,omitempty"`
	Speed *[]int `json:"speed,omitempty"`
}

// StatusFanOptions defines model for StatusFanOptions.
type StatusFanOptions struct {
	// maximum number fans in system
	Fans *int `json:"fans,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Speed *[]interface{} `json:"speed,omitempty"`
}

// StatusInterface defines model for StatusInterface.
type StatusInterface struct {
	Interfaces *StatusInterfaceInterfaces `json:"interfaces,omitempty"`
	Internal   *StatusInterfaceInternal   `json:"internal,omitempty"`
}

// StatusInterfaceInterface defines model for StatusInterfaceInterface.
type StatusInterfaceInterface struct {
	Channel      *float32                                `json:"channel,omitempty"`
	Inputchannel *StatusInterfaceInterfaceIntputchannels `json:"inputchannel,omitempty"`
	InterfaceId  *int                                    `json:"interface_id,omitempty"`
	Name         *string                                 `json:"name,omitempty"`
	Samplingrate *string                                 `json:"samplingrate,omitempty"`
	Status       *string                                 `json:"status,omitempty"`
}

// StatusInterfaceInterfaceIntputchannel defines model for StatusInterfaceInterfaceIntputchannel.
type StatusInterfaceInterfaceIntputchannel struct {
	ChannelId         *int    `json:"channel_id,omitempty"`
	StatusValue       *int    `json:"status_value,omitempty"`
	StatusValueString *string `json:"status_value_string,omitempty"`
	StreamOk          *bool   `json:"stream_ok,omitempty"`
}

// StatusInterfaceInterfaceIntputchannels defines model for StatusInterfaceInterfaceIntputchannels.
type StatusInterfaceInterfaceIntputchannels = []StatusInterfaceInterfaceIntputchannel

// StatusInterfaceInterfaces defines model for StatusInterfaceInterfaces.
type StatusInterfaceInterfaces = []StatusInterfaceInterface

// StatusInterfaceInterfacesOptions defines model for StatusInterfaceInterfacesOptions.
type StatusInterfaceInterfacesOptions struct {
	// available interface ids
	InterfaceId *[]int `json:"interface_id,omitempty"`
}

// StatusInterfaceInternal defines model for StatusInterfaceInternal.
type StatusInterfaceInternal struct {
	Name         *string `json:"name,omitempty"`
	Samplingrate *string `json:"samplingrate,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// StatusLevel defines model for StatusLevel.
type StatusLevel struct {
	// format [PEAK, HOLD]
	In *[]float32 `json:"in,omitempty"`

	// format [PEAK, HOLD]
	Out *[]float32 `json:"out,omitempty"`

	// format [PEAK, HOLD]
	PostFilter *[]float32 `json:"post_filter,omitempty"`
}

// StatusLevelOptions defines model for StatusLevelOptions.
type StatusLevelOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	In *[]interface{} `json:"in,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Out *[]interface{} `json:"out,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	PostFilter *[]interface{} `json:"post_filter,omitempty"`
}

// StatusPSU defines model for StatusPSU.
type StatusPSU struct {
	DcOk           *[]bool    `json:"dc_ok,omitempty"`
	FanSpeed       *int       `json:"fan_speed,omitempty"`
	Load           *int       `json:"load,omitempty"`
	PrimaryVoltage *[]float32 `json:"primary_voltage,omitempty"`
	Reduction      *float32   `json:"reduction,omitempty"`
}

// StatusPSUOptions defines model for StatusPSUOptions.
type StatusPSUOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	FanSpeed *[]interface{} `json:"fan_speed,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Load       *[]interface{} `json:"load,omitempty"`
	NumberPsus *int           `json:"number_psus,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	PrimaryVoltage *[]interface{} `json:"primary_voltage,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Reduction *[]interface{} `json:"reduction,omitempty"`
}

// StatusReduction defines model for StatusReduction.
type StatusReduction struct {
	Currentlimiter *float32   `json:"currentlimiter,omitempty"`
	Powerlimiter   *float32   `json:"powerlimiter,omitempty"`
	Voltagelimiter *[]float32 `json:"voltagelimiter,omitempty"`
}

// StatusReductionOptions defines model for StatusReductionOptions.
type StatusReductionOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Currentlimiter *[]interface{} `json:"currentlimiter,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Powerlimiter *[]interface{} `json:"powerlimiter,omitempty"`

	// format [MIN, MAX, STEP, UNIT]
	Voltagelimiter *[]interface{} `json:"voltagelimiter,omitempty"`
}

// StatusRemotemute defines model for StatusRemotemute.
type StatusRemotemute struct {
	Active    *bool `json:"active,omitempty"`
	Connected *bool `json:"connected,omitempty"`
}

// StatusSave defines model for StatusSave.
type StatusSave struct {
	// next auto save in X sec
	Nextsavetimeout *int `json:"nextsavetimeout,omitempty"`

	// Server saving
	Saving *bool `json:"saving,omitempty"`
}

// StatusSpeaker defines model for StatusSpeaker.
type StatusSpeaker struct {
	Detected *bool    `json:"detected,omitempty"`
	Level    *float32 `json:"level,omitempty"`
}

// StatusSpeakerOptions defines model for StatusSpeakerOptions.
type StatusSpeakerOptions struct {
	// format [MIN, MAX, STEP, UNIT]
	Level *[]interface{} `json:"level,omitempty"`
}

// StatusSyslog defines model for StatusSyslog.
type StatusSyslog struct {
	// number returned lines
	Lines *int      `json:"lines,omitempty"`
	Log   *[]string `json:"log,omitempty"`

	// number of requested lines
	Maxlines *int `json:"maxlines,omitempty"`
}

// String defines model for String.
type String struct {
	// Actual String of this property
	Value *string `json:"value,omitempty"`
}

// Volume defines model for Volume.
type Volume struct {
	// Actual Float Value of this property
	Value *float32 `json:"value,omitempty"`
}

// AssignId defines model for assign_id.
type AssignId = int

// ChannelId defines model for channel_id.
type ChannelId = int

// ClearChannelEq defines model for clear_channel_eq.
type ClearChannelEq = bool

// EqId defines model for eq_id.
type EqId = int

// GroupId defines model for group_id.
type GroupId = int

// InterfaceId defines model for interface_id.
type InterfaceId = int

// PatchId defines model for patch_id.
type PatchId = int

// PresetName defines model for preset_name.
type PresetName = string

// VoltagelimiterId defines model for voltagelimiter_id.
type VoltagelimiterId = int

// BadRequest400 defines model for BadRequest400.
type BadRequest400 = Error

// UnauthorizedError401 defines model for UnauthorizedError401.
type UnauthorizedError401 = Error

// PutPresetStoragePresetNameJSONBody defines parameters for PutPresetStoragePresetName.
type PutPresetStoragePresetNameJSONBody = Settings

// PutSettingsParams defines parameters for PutSettings.
type PutSettingsParams struct {
	// clears all eqs from channel before adding new ones from object
	ClearChannelEq *ClearChannelEq `form:"clear_channel_eq,omitempty" json:"clear_channel_eq,omitempty"`
}

// PutSettingsChannelJSONBody defines parameters for PutSettingsChannel.
type PutSettingsChannelJSONBody = SettingsChannels

// PutSettingsChannelParams defines parameters for PutSettingsChannel.
type PutSettingsChannelParams struct {
	// clears all eqs from channel before adding new ones from object
	ClearChannelEq *ClearChannelEq `form:"clear_channel_eq,omitempty" json:"clear_channel_eq,omitempty"`
}

// PutSettingsChannelChannelIdJSONBody defines parameters for PutSettingsChannelChannelId.
type PutSettingsChannelChannelIdJSONBody = SettingsChannel

// PutSettingsChannelChannelIdParams defines parameters for PutSettingsChannelChannelId.
type PutSettingsChannelChannelIdParams struct {
	// clears all eqs from channel before adding new ones from object
	ClearChannelEq *ClearChannelEq `form:"clear_channel_eq,omitempty" json:"clear_channel_eq,omitempty"`
}

// PutSettingsChannelChannelIdAmpenableJSONBody defines parameters for PutSettingsChannelChannelIdAmpenable.
type PutSettingsChannelChannelIdAmpenableJSONBody = Boolean

// PutSettingsChannelChannelIdAudioanalyzerJSONBody defines parameters for PutSettingsChannelChannelIdAudioanalyzer.
type PutSettingsChannelChannelIdAudioanalyzerJSONBody = SettingsChannelAudioAnalyzer

// PutSettingsChannelChannelIdAudioanalyzerEnableJSONBody defines parameters for PutSettingsChannelChannelIdAudioanalyzerEnable.
type PutSettingsChannelChannelIdAudioanalyzerEnableJSONBody = Boolean

// PutSettingsChannelChannelIdAudioanalyzerReferenceJSONBody defines parameters for PutSettingsChannelChannelIdAudioanalyzerReference.
type PutSettingsChannelChannelIdAudioanalyzerReferenceJSONBody = SettingsChannelAudioAnalyzerReference

// PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONBody defines parameters for PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance.
type PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONBody = ArrayFloat

// PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONBody defines parameters for PutSettingsChannelChannelIdAudioanalyzerReferencePhase.
type PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONBody = ArrayFloat

// PutSettingsChannelChannelIdBridgeenableJSONBody defines parameters for PutSettingsChannelChannelIdBridgeenable.
type PutSettingsChannelChannelIdBridgeenableJSONBody = Boolean

// PutSettingsChannelChannelIdDspCurrentlimiterJSONBody defines parameters for PutSettingsChannelChannelIdDspCurrentlimiter.
type PutSettingsChannelChannelIdDspCurrentlimiterJSONBody = SettingsCurrentlimiter

// PutSettingsChannelChannelIdDspDelayJSONBody defines parameters for PutSettingsChannelChannelIdDspDelay.
type PutSettingsChannelChannelIdDspDelayJSONBody = SettingsDelay

// PostSettingsChannelChannelIdDspEqJSONBody defines parameters for PostSettingsChannelChannelIdDspEq.
type PostSettingsChannelChannelIdDspEqJSONBody = SettingsEQ

// PutSettingsChannelChannelIdDspEqJSONBody defines parameters for PutSettingsChannelChannelIdDspEq.
type PutSettingsChannelChannelIdDspEqJSONBody = SettingsEQs

// PutSettingsChannelChannelIdDspEqParams defines parameters for PutSettingsChannelChannelIdDspEq.
type PutSettingsChannelChannelIdDspEqParams struct {
	// clears all eqs from channel before adding new ones from object
	ClearChannelEq *ClearChannelEq `form:"clear_channel_eq,omitempty" json:"clear_channel_eq,omitempty"`
}

// PutSettingsChannelChannelIdDspEqEqIdJSONBody defines parameters for PutSettingsChannelChannelIdDspEqEqId.
type PutSettingsChannelChannelIdDspEqEqIdJSONBody = SettingsEQ

// PutSettingsChannelChannelIdDspEqenableJSONBody defines parameters for PutSettingsChannelChannelIdDspEqenable.
type PutSettingsChannelChannelIdDspEqenableJSONBody = Boolean

// PutSettingsChannelChannelIdDspFirJSONBody defines parameters for PutSettingsChannelChannelIdDspFir.
type PutSettingsChannelChannelIdDspFirJSONBody = SettingsFIR

// PutSettingsChannelChannelIdDspMuteJSONBody defines parameters for PutSettingsChannelChannelIdDspMute.
type PutSettingsChannelChannelIdDspMuteJSONBody = Boolean

// PutSettingsChannelChannelIdDspPatchJSONBody defines parameters for PutSettingsChannelChannelIdDspPatch.
type PutSettingsChannelChannelIdDspPatchJSONBody = SettingsPatches

// PutSettingsChannelChannelIdDspPhaseJSONBody defines parameters for PutSettingsChannelChannelIdDspPhase.
type PutSettingsChannelChannelIdDspPhaseJSONBody = Boolean

// PutSettingsChannelChannelIdDspPowerlimiterJSONBody defines parameters for PutSettingsChannelChannelIdDspPowerlimiter.
type PutSettingsChannelChannelIdDspPowerlimiterJSONBody = SettingsPowerlimiter

// PutSettingsChannelChannelIdDspVoltagelimiterJSONBody defines parameters for PutSettingsChannelChannelIdDspVoltagelimiter.
type PutSettingsChannelChannelIdDspVoltagelimiterJSONBody = SettingsVoltagelimiters

// PutSettingsChannelChannelIdDspVolumeJSONBody defines parameters for PutSettingsChannelChannelIdDspVolume.
type PutSettingsChannelChannelIdDspVolumeJSONBody = Volume

// PutSettingsChannelChannelIdNameJSONBody defines parameters for PutSettingsChannelChannelIdName.
type PutSettingsChannelChannelIdNameJSONBody struct {
	Value *string `json:"value,omitempty"`
}

// PutSettingsChannelChannelIdSpeakerJSONBody defines parameters for PutSettingsChannelChannelIdSpeaker.
type PutSettingsChannelChannelIdSpeakerJSONBody = SettingsSpeaker

// PutSettingsChannelChannelIdSpeakerDetectionJSONBody defines parameters for PutSettingsChannelChannelIdSpeakerDetection.
type PutSettingsChannelChannelIdSpeakerDetectionJSONBody = SettingsSpeakerDetection

// PutSettingsChannelChannelIdSpeakerPresetJSONBody defines parameters for PutSettingsChannelChannelIdSpeakerPreset.
type PutSettingsChannelChannelIdSpeakerPresetJSONBody = SettingsSpeakerPreset

// PutSettingsDeviceJSONBody defines parameters for PutSettingsDevice.
type PutSettingsDeviceJSONBody = SettingsDevice

// PutSettingsDeviceDanteIdentityJSONBody defines parameters for PutSettingsDeviceDanteIdentity.
type PutSettingsDeviceDanteIdentityJSONBody = String

// PutSettingsDeviceDanteNetworkJSONBody defines parameters for PutSettingsDeviceDanteNetwork.
type PutSettingsDeviceDanteNetworkJSONBody = SettingsDeviceDanteNetwork

// PutSettingsDeviceDspJSONBody defines parameters for PutSettingsDeviceDsp.
type PutSettingsDeviceDspJSONBody = SettingsDeviceDsp

// PutSettingsDeviceDspMuteJSONBody defines parameters for PutSettingsDeviceDspMute.
type PutSettingsDeviceDspMuteJSONBody = Boolean

// PutSettingsDeviceDspStartupmuteJSONBody defines parameters for PutSettingsDeviceDspStartupmute.
type PutSettingsDeviceDspStartupmuteJSONBody = Boolean

// PutSettingsDeviceDspVolumeJSONBody defines parameters for PutSettingsDeviceDspVolume.
type PutSettingsDeviceDspVolumeJSONBody = Volume

// PutSettingsDeviceDspVolumerampJSONBody defines parameters for PutSettingsDeviceDspVolumeramp.
type PutSettingsDeviceDspVolumerampJSONBody = SettingsVolumeramp

// PutSettingsDeviceFanJSONBody defines parameters for PutSettingsDeviceFan.
type PutSettingsDeviceFanJSONBody = SettingsFan

// PutSettingsDeviceGroupingJSONBody defines parameters for PutSettingsDeviceGrouping.
type PutSettingsDeviceGroupingJSONBody = SettingsGrouping

// PutSettingsDeviceGroupingGroupsJSONBody defines parameters for PutSettingsDeviceGroupingGroups.
type PutSettingsDeviceGroupingGroupsJSONBody = SettingsGroups

// PutSettingsDeviceGroupingGroupsGroupIdAssignJSONBody defines parameters for PutSettingsDeviceGroupingGroupsGroupIdAssign.
type PutSettingsDeviceGroupingGroupsGroupIdAssignJSONBody = SettingsAssigns

// PutSettingsDeviceGroupingGroupsGroupIdEnableJSONBody defines parameters for PutSettingsDeviceGroupingGroupsGroupIdEnable.
type PutSettingsDeviceGroupingGroupsGroupIdEnableJSONBody = Boolean

// PutSettingsDeviceGroupingGroupsGroupIdMuteJSONBody defines parameters for PutSettingsDeviceGroupingGroupsGroupIdMute.
type PutSettingsDeviceGroupingGroupsGroupIdMuteJSONBody = Boolean

// PutSettingsDeviceGroupingGroupsGroupIdNameJSONBody defines parameters for PutSettingsDeviceGroupingGroupsGroupIdName.
type PutSettingsDeviceGroupingGroupsGroupIdNameJSONBody = String

// PutSettingsDeviceGroupingGroupsGroupIdSoloJSONBody defines parameters for PutSettingsDeviceGroupingGroupsGroupIdSolo.
type PutSettingsDeviceGroupingGroupsGroupIdSoloJSONBody = Boolean

// PutSettingsDeviceGroupingSoloautoclearJSONBody defines parameters for PutSettingsDeviceGroupingSoloautoclear.
type PutSettingsDeviceGroupingSoloautoclearJSONBody = Boolean

// PutSettingsDeviceIdentifyJSONBody defines parameters for PutSettingsDeviceIdentify.
type PutSettingsDeviceIdentifyJSONBody = Boolean

// PutSettingsDeviceLocationJSONBody defines parameters for PutSettingsDeviceLocation.
type PutSettingsDeviceLocationJSONBody = String

// PutSettingsDeviceMainsvoltageJSONBody defines parameters for PutSettingsDeviceMainsvoltage.
type PutSettingsDeviceMainsvoltageJSONBody = Integer

// PutSettingsDeviceNameJSONBody defines parameters for PutSettingsDeviceName.
type PutSettingsDeviceNameJSONBody = String

// PutSettingsDeviceNetworkJSONBody defines parameters for PutSettingsDeviceNetwork.
type PutSettingsDeviceNetworkJSONBody = SettingsNetwork

// PutSettingsDeviceRemotemuteJSONBody defines parameters for PutSettingsDeviceRemotemute.
type PutSettingsDeviceRemotemuteJSONBody = SettingsRemotemute

// PutSettingsDeviceSyslogJSONBody defines parameters for PutSettingsDeviceSyslog.
type PutSettingsDeviceSyslogJSONBody = SettingsSyslog

// PutSettingsDeviceTimeJSONBody defines parameters for PutSettingsDeviceTime.
type PutSettingsDeviceTimeJSONBody = SettingsTime

// PutSettingsDeviceTimeCurrentJSONBody defines parameters for PutSettingsDeviceTimeCurrent.
type PutSettingsDeviceTimeCurrentJSONBody = SettingsTimeCurrent

// PutSettingsDeviceTimeTimezoneJSONBody defines parameters for PutSettingsDeviceTimeTimezone.
type PutSettingsDeviceTimeTimezoneJSONBody = SettingsTimezone

// PutSettingsInterfaceJSONBody defines parameters for PutSettingsInterface.
type PutSettingsInterfaceJSONBody = SettingsInterface

// PutSettingsInterfaceInterfacesJSONBody defines parameters for PutSettingsInterfaceInterfaces.
type PutSettingsInterfaceInterfacesJSONBody = SettingsInterfaces

// PutSettingsInterfaceInterfacesInterfaceIdJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceId.
type PutSettingsInterfaceInterfacesInterfaceIdJSONBody = SettingsInterfaceConfig

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdInputchannel.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONBody = SettingsInterfaceConfigInputChannels

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONBody = SettingsInterfaceConfigInputChannel

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONBody = String

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONBody = SettingsInterfaceConfigInputChannelPatchOption

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdOutputchannel.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONBody = SettingsInterfaceConfigOutputChannels

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONBody = SettingsInterfaceConfigOutputChannel

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONBody defines parameters for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONBody = SettingsInterfaceConfigOutputChannelPatch

// PutSettingsInterfaceMadithroughJSONBody defines parameters for PutSettingsInterfaceMadithrough.
type PutSettingsInterfaceMadithroughJSONBody = SettingsMadithrough

// PutSettingsInterfaceSyncJSONBody defines parameters for PutSettingsInterfaceSync.
type PutSettingsInterfaceSyncJSONBody = SettingsAudioSync

// GetSpeakerpresetParams defines parameters for GetSpeakerpreset.
type GetSpeakerpresetParams struct {
	Speakername  *string `form:"speakername,omitempty" json:"speakername,omitempty"`
	Manufacturer *string `form:"manufacturer,omitempty" json:"manufacturer,omitempty"`
	Description  *string `form:"description,omitempty" json:"description,omitempty"`
	Version      *string `form:"version,omitempty" json:"version,omitempty"`

	// add a password to prevent loading it to channel dsp
	Password *string `form:"password,omitempty" json:"password,omitempty"`

	// channel_id of channel to generate the speakerpreset
	ChannelId int `form:"channel_id" json:"channel_id"`
}

// PutSpeakerpresetJSONBody defines parameters for PutSpeakerpreset.
type PutSpeakerpresetJSONBody = SpeakerpresetValue

// PutSpeakerpresetParams defines parameters for PutSpeakerpreset.
type PutSpeakerpresetParams struct {
	// send getMetaData true to get a JSON with metadata from preset blob
	GetMetaData *bool `form:"getMetaData,omitempty" json:"getMetaData,omitempty"`

	// send a channel id if you want to load the preset data to channel dsp to edit it (maybe password is required)
	ChannelId *int `form:"channel_id,omitempty" json:"channel_id,omitempty"`

	// password to unlock speakerpreset (if required) to load it to channel dsp
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// GetStatusSyslogParams defines parameters for GetStatusSyslog.
type GetStatusSyslogParams struct {
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`
}

// PutPresetStoragePresetNameJSONRequestBody defines body for PutPresetStoragePresetName for application/json ContentType.
type PutPresetStoragePresetNameJSONRequestBody = PutPresetStoragePresetNameJSONBody

// PutSettingsChannelJSONRequestBody defines body for PutSettingsChannel for application/json ContentType.
type PutSettingsChannelJSONRequestBody = PutSettingsChannelJSONBody

// PutSettingsChannelChannelIdJSONRequestBody defines body for PutSettingsChannelChannelId for application/json ContentType.
type PutSettingsChannelChannelIdJSONRequestBody = PutSettingsChannelChannelIdJSONBody

// PutSettingsChannelChannelIdAmpenableJSONRequestBody defines body for PutSettingsChannelChannelIdAmpenable for application/json ContentType.
type PutSettingsChannelChannelIdAmpenableJSONRequestBody = PutSettingsChannelChannelIdAmpenableJSONBody

// PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody defines body for PutSettingsChannelChannelIdAudioanalyzer for application/json ContentType.
type PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody = PutSettingsChannelChannelIdAudioanalyzerJSONBody

// PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody defines body for PutSettingsChannelChannelIdAudioanalyzerEnable for application/json ContentType.
type PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody = PutSettingsChannelChannelIdAudioanalyzerEnableJSONBody

// PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody defines body for PutSettingsChannelChannelIdAudioanalyzerReference for application/json ContentType.
type PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody = PutSettingsChannelChannelIdAudioanalyzerReferenceJSONBody

// PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody defines body for PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance for application/json ContentType.
type PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody = PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONBody

// PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody defines body for PutSettingsChannelChannelIdAudioanalyzerReferencePhase for application/json ContentType.
type PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody = PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONBody

// PutSettingsChannelChannelIdBridgeenableJSONRequestBody defines body for PutSettingsChannelChannelIdBridgeenable for application/json ContentType.
type PutSettingsChannelChannelIdBridgeenableJSONRequestBody = PutSettingsChannelChannelIdBridgeenableJSONBody

// PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody defines body for PutSettingsChannelChannelIdDspCurrentlimiter for application/json ContentType.
type PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody = PutSettingsChannelChannelIdDspCurrentlimiterJSONBody

// PutSettingsChannelChannelIdDspDelayJSONRequestBody defines body for PutSettingsChannelChannelIdDspDelay for application/json ContentType.
type PutSettingsChannelChannelIdDspDelayJSONRequestBody = PutSettingsChannelChannelIdDspDelayJSONBody

// PostSettingsChannelChannelIdDspEqJSONRequestBody defines body for PostSettingsChannelChannelIdDspEq for application/json ContentType.
type PostSettingsChannelChannelIdDspEqJSONRequestBody = PostSettingsChannelChannelIdDspEqJSONBody

// PutSettingsChannelChannelIdDspEqJSONRequestBody defines body for PutSettingsChannelChannelIdDspEq for application/json ContentType.
type PutSettingsChannelChannelIdDspEqJSONRequestBody = PutSettingsChannelChannelIdDspEqJSONBody

// PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody defines body for PutSettingsChannelChannelIdDspEqEqId for application/json ContentType.
type PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody = PutSettingsChannelChannelIdDspEqEqIdJSONBody

// PutSettingsChannelChannelIdDspEqenableJSONRequestBody defines body for PutSettingsChannelChannelIdDspEqenable for application/json ContentType.
type PutSettingsChannelChannelIdDspEqenableJSONRequestBody = PutSettingsChannelChannelIdDspEqenableJSONBody

// PutSettingsChannelChannelIdDspFirJSONRequestBody defines body for PutSettingsChannelChannelIdDspFir for application/json ContentType.
type PutSettingsChannelChannelIdDspFirJSONRequestBody = PutSettingsChannelChannelIdDspFirJSONBody

// PutSettingsChannelChannelIdDspMuteJSONRequestBody defines body for PutSettingsChannelChannelIdDspMute for application/json ContentType.
type PutSettingsChannelChannelIdDspMuteJSONRequestBody = PutSettingsChannelChannelIdDspMuteJSONBody

// PutSettingsChannelChannelIdDspPatchJSONRequestBody defines body for PutSettingsChannelChannelIdDspPatch for application/json ContentType.
type PutSettingsChannelChannelIdDspPatchJSONRequestBody = PutSettingsChannelChannelIdDspPatchJSONBody

// PutSettingsChannelChannelIdDspPhaseJSONRequestBody defines body for PutSettingsChannelChannelIdDspPhase for application/json ContentType.
type PutSettingsChannelChannelIdDspPhaseJSONRequestBody = PutSettingsChannelChannelIdDspPhaseJSONBody

// PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody defines body for PutSettingsChannelChannelIdDspPowerlimiter for application/json ContentType.
type PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody = PutSettingsChannelChannelIdDspPowerlimiterJSONBody

// PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody defines body for PutSettingsChannelChannelIdDspVoltagelimiter for application/json ContentType.
type PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody = PutSettingsChannelChannelIdDspVoltagelimiterJSONBody

// PutSettingsChannelChannelIdDspVolumeJSONRequestBody defines body for PutSettingsChannelChannelIdDspVolume for application/json ContentType.
type PutSettingsChannelChannelIdDspVolumeJSONRequestBody = PutSettingsChannelChannelIdDspVolumeJSONBody

// PutSettingsChannelChannelIdNameJSONRequestBody defines body for PutSettingsChannelChannelIdName for application/json ContentType.
type PutSettingsChannelChannelIdNameJSONRequestBody PutSettingsChannelChannelIdNameJSONBody

// PutSettingsChannelChannelIdSpeakerJSONRequestBody defines body for PutSettingsChannelChannelIdSpeaker for application/json ContentType.
type PutSettingsChannelChannelIdSpeakerJSONRequestBody = PutSettingsChannelChannelIdSpeakerJSONBody

// PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody defines body for PutSettingsChannelChannelIdSpeakerDetection for application/json ContentType.
type PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody = PutSettingsChannelChannelIdSpeakerDetectionJSONBody

// PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody defines body for PutSettingsChannelChannelIdSpeakerPreset for application/json ContentType.
type PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody = PutSettingsChannelChannelIdSpeakerPresetJSONBody

// PutSettingsDeviceJSONRequestBody defines body for PutSettingsDevice for application/json ContentType.
type PutSettingsDeviceJSONRequestBody = PutSettingsDeviceJSONBody

// PutSettingsDeviceDanteIdentityJSONRequestBody defines body for PutSettingsDeviceDanteIdentity for application/json ContentType.
type PutSettingsDeviceDanteIdentityJSONRequestBody = PutSettingsDeviceDanteIdentityJSONBody

// PutSettingsDeviceDanteNetworkJSONRequestBody defines body for PutSettingsDeviceDanteNetwork for application/json ContentType.
type PutSettingsDeviceDanteNetworkJSONRequestBody = PutSettingsDeviceDanteNetworkJSONBody

// PutSettingsDeviceDspJSONRequestBody defines body for PutSettingsDeviceDsp for application/json ContentType.
type PutSettingsDeviceDspJSONRequestBody = PutSettingsDeviceDspJSONBody

// PutSettingsDeviceDspMuteJSONRequestBody defines body for PutSettingsDeviceDspMute for application/json ContentType.
type PutSettingsDeviceDspMuteJSONRequestBody = PutSettingsDeviceDspMuteJSONBody

// PutSettingsDeviceDspStartupmuteJSONRequestBody defines body for PutSettingsDeviceDspStartupmute for application/json ContentType.
type PutSettingsDeviceDspStartupmuteJSONRequestBody = PutSettingsDeviceDspStartupmuteJSONBody

// PutSettingsDeviceDspVolumeJSONRequestBody defines body for PutSettingsDeviceDspVolume for application/json ContentType.
type PutSettingsDeviceDspVolumeJSONRequestBody = PutSettingsDeviceDspVolumeJSONBody

// PutSettingsDeviceDspVolumerampJSONRequestBody defines body for PutSettingsDeviceDspVolumeramp for application/json ContentType.
type PutSettingsDeviceDspVolumerampJSONRequestBody = PutSettingsDeviceDspVolumerampJSONBody

// PutSettingsDeviceFanJSONRequestBody defines body for PutSettingsDeviceFan for application/json ContentType.
type PutSettingsDeviceFanJSONRequestBody = PutSettingsDeviceFanJSONBody

// PutSettingsDeviceGroupingJSONRequestBody defines body for PutSettingsDeviceGrouping for application/json ContentType.
type PutSettingsDeviceGroupingJSONRequestBody = PutSettingsDeviceGroupingJSONBody

// PutSettingsDeviceGroupingGroupsJSONRequestBody defines body for PutSettingsDeviceGroupingGroups for application/json ContentType.
type PutSettingsDeviceGroupingGroupsJSONRequestBody = PutSettingsDeviceGroupingGroupsJSONBody

// PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody defines body for PutSettingsDeviceGroupingGroupsGroupIdAssign for application/json ContentType.
type PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody = PutSettingsDeviceGroupingGroupsGroupIdAssignJSONBody

// PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody defines body for PutSettingsDeviceGroupingGroupsGroupIdEnable for application/json ContentType.
type PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody = PutSettingsDeviceGroupingGroupsGroupIdEnableJSONBody

// PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody defines body for PutSettingsDeviceGroupingGroupsGroupIdMute for application/json ContentType.
type PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody = PutSettingsDeviceGroupingGroupsGroupIdMuteJSONBody

// PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody defines body for PutSettingsDeviceGroupingGroupsGroupIdName for application/json ContentType.
type PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody = PutSettingsDeviceGroupingGroupsGroupIdNameJSONBody

// PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody defines body for PutSettingsDeviceGroupingGroupsGroupIdSolo for application/json ContentType.
type PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody = PutSettingsDeviceGroupingGroupsGroupIdSoloJSONBody

// PutSettingsDeviceGroupingSoloautoclearJSONRequestBody defines body for PutSettingsDeviceGroupingSoloautoclear for application/json ContentType.
type PutSettingsDeviceGroupingSoloautoclearJSONRequestBody = PutSettingsDeviceGroupingSoloautoclearJSONBody

// PutSettingsDeviceIdentifyJSONRequestBody defines body for PutSettingsDeviceIdentify for application/json ContentType.
type PutSettingsDeviceIdentifyJSONRequestBody = PutSettingsDeviceIdentifyJSONBody

// PutSettingsDeviceLocationJSONRequestBody defines body for PutSettingsDeviceLocation for application/json ContentType.
type PutSettingsDeviceLocationJSONRequestBody = PutSettingsDeviceLocationJSONBody

// PutSettingsDeviceMainsvoltageJSONRequestBody defines body for PutSettingsDeviceMainsvoltage for application/json ContentType.
type PutSettingsDeviceMainsvoltageJSONRequestBody = PutSettingsDeviceMainsvoltageJSONBody

// PutSettingsDeviceNameJSONRequestBody defines body for PutSettingsDeviceName for application/json ContentType.
type PutSettingsDeviceNameJSONRequestBody = PutSettingsDeviceNameJSONBody

// PutSettingsDeviceNetworkJSONRequestBody defines body for PutSettingsDeviceNetwork for application/json ContentType.
type PutSettingsDeviceNetworkJSONRequestBody = PutSettingsDeviceNetworkJSONBody

// PutSettingsDeviceRemotemuteJSONRequestBody defines body for PutSettingsDeviceRemotemute for application/json ContentType.
type PutSettingsDeviceRemotemuteJSONRequestBody = PutSettingsDeviceRemotemuteJSONBody

// PutSettingsDeviceSyslogJSONRequestBody defines body for PutSettingsDeviceSyslog for application/json ContentType.
type PutSettingsDeviceSyslogJSONRequestBody = PutSettingsDeviceSyslogJSONBody

// PutSettingsDeviceTimeJSONRequestBody defines body for PutSettingsDeviceTime for application/json ContentType.
type PutSettingsDeviceTimeJSONRequestBody = PutSettingsDeviceTimeJSONBody

// PutSettingsDeviceTimeCurrentJSONRequestBody defines body for PutSettingsDeviceTimeCurrent for application/json ContentType.
type PutSettingsDeviceTimeCurrentJSONRequestBody = PutSettingsDeviceTimeCurrentJSONBody

// PutSettingsDeviceTimeTimezoneJSONRequestBody defines body for PutSettingsDeviceTimeTimezone for application/json ContentType.
type PutSettingsDeviceTimeTimezoneJSONRequestBody = PutSettingsDeviceTimeTimezoneJSONBody

// PutSettingsInterfaceJSONRequestBody defines body for PutSettingsInterface for application/json ContentType.
type PutSettingsInterfaceJSONRequestBody = PutSettingsInterfaceJSONBody

// PutSettingsInterfaceInterfacesJSONRequestBody defines body for PutSettingsInterfaceInterfaces for application/json ContentType.
type PutSettingsInterfaceInterfacesJSONRequestBody = PutSettingsInterfaceInterfacesJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceId for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdInputchannel for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdOutputchannel for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONBody

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody defines body for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch for application/json ContentType.
type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody = PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONBody

// PutSettingsInterfaceMadithroughJSONRequestBody defines body for PutSettingsInterfaceMadithrough for application/json ContentType.
type PutSettingsInterfaceMadithroughJSONRequestBody = PutSettingsInterfaceMadithroughJSONBody

// PutSettingsInterfaceSyncJSONRequestBody defines body for PutSettingsInterfaceSync for application/json ContentType.
type PutSettingsInterfaceSyncJSONRequestBody = PutSettingsInterfaceSyncJSONBody

// PutSpeakerpresetJSONRequestBody defines body for PutSpeakerpreset for application/json ContentType.
type PutSpeakerpresetJSONRequestBody = PutSpeakerpresetJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetInfoDevice request
	GetInfoDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPresetRecallPresetName request
	PutPresetRecallPresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsPresetStorage request
	OptionsPresetStorage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePresetStoragePresetName request
	DeletePresetStoragePresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPresetStoragePresetName request
	GetPresetStoragePresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPresetStoragePresetName request with any body
	PutPresetStoragePresetNameWithBody(ctx context.Context, presetName PresetName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPresetStoragePresetName(ctx context.Context, presetName PresetName, body PutPresetStoragePresetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettings request
	GetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettings request
	PutSettings(ctx context.Context, params *PutSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannel request
	GetSettingsChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannel request
	OptionsSettingsChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannel request with any body
	PutSettingsChannelWithBody(ctx context.Context, params *PutSettingsChannelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannel(ctx context.Context, params *PutSettingsChannelParams, body PutSettingsChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelId request
	GetSettingsChannelChannelId(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelId request with any body
	PutSettingsChannelChannelIdWithBody(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelId(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, body PutSettingsChannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAmpenable request
	GetSettingsChannelChannelIdAmpenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAmpenable request with any body
	PutSettingsChannelChannelIdAmpenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAmpenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAmpenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAudioanalyzer request
	GetSettingsChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAudioanalyzer request with any body
	PutSettingsChannelChannelIdAudioanalyzerWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAudioanalyzerEnable request
	GetSettingsChannelChannelIdAudioanalyzerEnable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAudioanalyzerEnable request with any body
	PutSettingsChannelChannelIdAudioanalyzerEnableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAudioanalyzerEnable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAudioanalyzerReference request
	GetSettingsChannelChannelIdAudioanalyzerReference(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAudioanalyzerReference request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferenceWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAudioanalyzerReference(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance request
	GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance request
	OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdAudioanalyzerReferencePhase request
	GetSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase request
	OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdAudioanalyzerReferencePhase request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdBridgeenable request
	GetSettingsChannelChannelIdBridgeenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdBridgeenable request with any body
	PutSettingsChannelChannelIdBridgeenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdBridgeenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdBridgeenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDsp request
	GetSettingsChannelChannelIdDsp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspCurrentlimiter request
	GetSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspCurrentlimiter request
	OptionsSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspCurrentlimiter request with any body
	PutSettingsChannelChannelIdDspCurrentlimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspDelay request
	GetSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspDelay request
	OptionsSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspDelay request with any body
	PutSettingsChannelChannelIdDspDelayWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspDelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspEq request
	GetSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspEq request
	OptionsSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSettingsChannelChannelIdDspEq request with any body
	PostSettingsChannelChannelIdDspEqWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, body PostSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspEq request with any body
	PutSettingsChannelChannelIdDspEqWithBody(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, body PutSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSettingsChannelChannelIdDspEqEqId request
	DeleteSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspEqEqId request
	GetSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspEqEqId request with any body
	PutSettingsChannelChannelIdDspEqEqIdWithBody(ctx context.Context, channelId ChannelId, eqId EqId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, body PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspEqenable request
	GetSettingsChannelChannelIdDspEqenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspEqenable request with any body
	PutSettingsChannelChannelIdDspEqenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspEqenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspEqenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspFir request
	GetSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspFir request
	OptionsSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspFir request with any body
	PutSettingsChannelChannelIdDspFirWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspFirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspGroupmute request
	GetSettingsChannelChannelIdDspGroupmute(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspMute request
	GetSettingsChannelChannelIdDspMute(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspMute request with any body
	PutSettingsChannelChannelIdDspMuteWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspMute(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspPatch request
	GetSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspPatch request
	OptionsSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspPatch request with any body
	PutSettingsChannelChannelIdDspPatchWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspPatchPatchId request
	GetSettingsChannelChannelIdDspPatchPatchId(ctx context.Context, channelId ChannelId, patchId PatchId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspPhase request
	GetSettingsChannelChannelIdDspPhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspPhase request with any body
	PutSettingsChannelChannelIdDspPhaseWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspPhase(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspPowerlimiter request
	GetSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspPowerlimiter request
	OptionsSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspPowerlimiter request with any body
	PutSettingsChannelChannelIdDspPowerlimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspVoltagelimiter request
	GetSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspVoltagelimiter request
	OptionsSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspVoltagelimiter request with any body
	PutSettingsChannelChannelIdDspVoltagelimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId request
	GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId(ctx context.Context, channelId ChannelId, voltagelimiterId VoltagelimiterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdDspVolume request
	GetSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdDspVolume request
	OptionsSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdDspVolume request with any body
	PutSettingsChannelChannelIdDspVolumeWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdName request
	GetSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdName request
	OptionsSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdName request with any body
	PutSettingsChannelChannelIdNameWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdSpeaker request
	GetSettingsChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdSpeaker request with any body
	PutSettingsChannelChannelIdSpeakerWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdSpeakerDetection request
	GetSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsChannelChannelIdSpeakerDetection request
	OptionsSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdSpeakerDetection request with any body
	PutSettingsChannelChannelIdSpeakerDetectionWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSettingsChannelChannelIdSpeakerPreset request
	DeleteSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsChannelChannelIdSpeakerPreset request
	GetSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsChannelChannelIdSpeakerPreset request with any body
	PutSettingsChannelChannelIdSpeakerPresetWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDevice request
	GetSettingsDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDevice request with any body
	PutSettingsDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDevice(ctx context.Context, body PutSettingsDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDante request
	GetSettingsDeviceDante(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDanteIdentity request
	GetSettingsDeviceDanteIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDanteIdentity request with any body
	PutSettingsDeviceDanteIdentityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDanteIdentity(ctx context.Context, body PutSettingsDeviceDanteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDanteNetwork request
	GetSettingsDeviceDanteNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceDanteNetwork request
	OptionsSettingsDeviceDanteNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDanteNetwork request with any body
	PutSettingsDeviceDanteNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDanteNetwork(ctx context.Context, body PutSettingsDeviceDanteNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDsp request
	GetSettingsDeviceDsp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDsp request with any body
	PutSettingsDeviceDspWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDsp(ctx context.Context, body PutSettingsDeviceDspJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDspMute request
	GetSettingsDeviceDspMute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDspMute request with any body
	PutSettingsDeviceDspMuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDspMute(ctx context.Context, body PutSettingsDeviceDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDspStartupmute request
	GetSettingsDeviceDspStartupmute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDspStartupmute request with any body
	PutSettingsDeviceDspStartupmuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDspStartupmute(ctx context.Context, body PutSettingsDeviceDspStartupmuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDspVolume request
	GetSettingsDeviceDspVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceDspVolume request
	OptionsSettingsDeviceDspVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDspVolume request with any body
	PutSettingsDeviceDspVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDspVolume(ctx context.Context, body PutSettingsDeviceDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceDspVolumeramp request
	GetSettingsDeviceDspVolumeramp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceDspVolumeramp request
	OptionsSettingsDeviceDspVolumeramp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceDspVolumeramp request with any body
	PutSettingsDeviceDspVolumerampWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceDspVolumeramp(ctx context.Context, body PutSettingsDeviceDspVolumerampJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceFan request
	GetSettingsDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceFan request with any body
	PutSettingsDeviceFanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceFan(ctx context.Context, body PutSettingsDeviceFanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGrouping request
	GetSettingsDeviceGrouping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGrouping request with any body
	PutSettingsDeviceGroupingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGrouping(ctx context.Context, body PutSettingsDeviceGroupingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroups request
	GetSettingsDeviceGroupingGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceGroupingGroups request
	OptionsSettingsDeviceGroupingGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroups request with any body
	PutSettingsDeviceGroupingGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroups(ctx context.Context, body PutSettingsDeviceGroupingGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupId request
	GetSettingsDeviceGroupingGroupsGroupId(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdAssign request
	GetSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceGroupingGroupsGroupIdAssign request
	OptionsSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroupsGroupIdAssign request with any body
	PutSettingsDeviceGroupingGroupsGroupIdAssignWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId request
	GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId(ctx context.Context, groupId GroupId, assignId AssignId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdEnable request
	GetSettingsDeviceGroupingGroupsGroupIdEnable(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroupsGroupIdEnable request with any body
	PutSettingsDeviceGroupingGroupsGroupIdEnableWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroupsGroupIdEnable(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdMute request
	GetSettingsDeviceGroupingGroupsGroupIdMute(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroupsGroupIdMute request with any body
	PutSettingsDeviceGroupingGroupsGroupIdMuteWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroupsGroupIdMute(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdName request
	GetSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceGroupingGroupsGroupIdName request
	OptionsSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroupsGroupIdName request with any body
	PutSettingsDeviceGroupingGroupsGroupIdNameWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingGroupsGroupIdSolo request
	GetSettingsDeviceGroupingGroupsGroupIdSolo(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingGroupsGroupIdSolo request with any body
	PutSettingsDeviceGroupingGroupsGroupIdSoloWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingGroupsGroupIdSolo(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceGroupingSoloautoclear request
	GetSettingsDeviceGroupingSoloautoclear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceGroupingSoloautoclear request with any body
	PutSettingsDeviceGroupingSoloautoclearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceGroupingSoloautoclear(ctx context.Context, body PutSettingsDeviceGroupingSoloautoclearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceIdentify request
	GetSettingsDeviceIdentify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceIdentify request with any body
	PutSettingsDeviceIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceIdentify(ctx context.Context, body PutSettingsDeviceIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceLocation request
	GetSettingsDeviceLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceLocation request
	OptionsSettingsDeviceLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceLocation request with any body
	PutSettingsDeviceLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceLocation(ctx context.Context, body PutSettingsDeviceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceMainsvoltage request
	GetSettingsDeviceMainsvoltage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceMainsvoltage request
	OptionsSettingsDeviceMainsvoltage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceMainsvoltage request with any body
	PutSettingsDeviceMainsvoltageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceMainsvoltage(ctx context.Context, body PutSettingsDeviceMainsvoltageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceName request
	GetSettingsDeviceName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceName request
	OptionsSettingsDeviceName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceName request with any body
	PutSettingsDeviceNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceName(ctx context.Context, body PutSettingsDeviceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceNetwork request
	GetSettingsDeviceNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsDeviceNetwork request
	OptionsSettingsDeviceNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceNetwork request with any body
	PutSettingsDeviceNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceNetwork(ctx context.Context, body PutSettingsDeviceNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceRemotemute request
	GetSettingsDeviceRemotemute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceRemotemute request with any body
	PutSettingsDeviceRemotemuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceRemotemute(ctx context.Context, body PutSettingsDeviceRemotemuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceSyslog request
	GetSettingsDeviceSyslog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceSyslog request with any body
	PutSettingsDeviceSyslogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceSyslog(ctx context.Context, body PutSettingsDeviceSyslogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceTime request
	GetSettingsDeviceTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceTime request with any body
	PutSettingsDeviceTimeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceTime(ctx context.Context, body PutSettingsDeviceTimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceTimeCurrent request
	GetSettingsDeviceTimeCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceTimeCurrent request with any body
	PutSettingsDeviceTimeCurrentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceTimeCurrent(ctx context.Context, body PutSettingsDeviceTimeCurrentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsDeviceTimeTimezone request
	GetSettingsDeviceTimeTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsDeviceTimeTimezone request with any body
	PutSettingsDeviceTimeTimezoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsDeviceTimeTimezone(ctx context.Context, body PutSettingsDeviceTimeTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterface request
	GetSettingsInterface(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterface request with any body
	PutSettingsInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterface(ctx context.Context, body PutSettingsInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfaces request
	GetSettingsInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsInterfaceInterfaces request
	OptionsSettingsInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfaces request with any body
	PutSettingsInterfaceInterfacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfaces(ctx context.Context, body PutSettingsInterfaceInterfacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceId request
	GetSettingsInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannel request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannel request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannel request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannel request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request
	OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceMadithrough request
	GetSettingsInterfaceMadithrough(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsInterfaceMadithrough request
	OptionsSettingsInterfaceMadithrough(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceMadithrough request with any body
	PutSettingsInterfaceMadithroughWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceMadithrough(ctx context.Context, body PutSettingsInterfaceMadithroughJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsInterfaceSync request
	GetSettingsInterfaceSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSettingsInterfaceSync request
	OptionsSettingsInterfaceSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsInterfaceSync request with any body
	PutSettingsInterfaceSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsInterfaceSync(ctx context.Context, body PutSettingsInterfaceSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsSave request
	PutSettingsSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpeakerpreset request
	GetSpeakerpreset(ctx context.Context, params *GetSpeakerpresetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsSpeakerpreset request
	OptionsSpeakerpreset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSpeakerpreset request with any body
	PutSpeakerpresetWithBody(ctx context.Context, params *PutSpeakerpresetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSpeakerpreset(ctx context.Context, params *PutSpeakerpresetParams, body PutSpeakerpresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannel request
	GetStatusChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannel request
	OptionsStatusChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelId request
	GetStatusChannelChannelId(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdActive request
	GetStatusChannelChannelIdActive(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAmp request
	GetStatusChannelChannelIdAmp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdAmp request
	OptionsStatusChannelChannelIdAmp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzer request
	GetStatusChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrent request
	GetStatusChannelChannelIdAudioanalyzerCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrentRms request
	GetStatusChannelChannelIdAudioanalyzerCurrentRms(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum request
	GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum request
	OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerImpedance request
	GetStatusChannelChannelIdAudioanalyzerImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdAudioanalyzerImpedance request
	OptionsStatusChannelChannelIdAudioanalyzerImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary request
	GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary request
	OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltage request
	GetStatusChannelChannelIdAudioanalyzerVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltageRms request
	GetStatusChannelChannelIdAudioanalyzerVoltageRms(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum request
	GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum request
	OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdCurrent request
	GetStatusChannelChannelIdCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdCurrent request
	OptionsStatusChannelChannelIdCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdDspDelay request
	GetStatusChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdDspEq request
	GetStatusChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdDspLevel request
	GetStatusChannelChannelIdDspLevel(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdDspLevel request
	OptionsStatusChannelChannelIdDspLevel(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdDspReduction request
	GetStatusChannelChannelIdDspReduction(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdDspReduction request
	OptionsStatusChannelChannelIdDspReduction(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdError request
	GetStatusChannelChannelIdError(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdPower request
	GetStatusChannelChannelIdPower(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdPower request
	OptionsStatusChannelChannelIdPower(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdSpeaker request
	GetStatusChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdSpeaker request
	OptionsStatusChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChannelChannelIdVoltage request
	GetStatusChannelChannelIdVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusChannelChannelIdVoltage request
	OptionsStatusChannelChannelIdVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDevice request
	GetStatusDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDeviceDante request
	GetStatusDeviceDante(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDeviceError request
	GetStatusDeviceError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDeviceFan request
	GetStatusDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusDeviceFan request
	OptionsStatusDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDeviceFpga request
	GetStatusDeviceFpga(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDevicePsu request
	GetStatusDevicePsu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusDevicePsu request
	OptionsStatusDevicePsu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusDeviceRemotemute request
	GetStatusDeviceRemotemute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterface request
	GetStatusInterface(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterfaceInterfaces request
	GetStatusInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsStatusInterfaceInterfaces request
	OptionsStatusInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterfaceInterfacesInterfaceId request
	GetStatusInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterfaceInterfacesInterfaceIdInputchannel request
	GetStatusInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId request
	GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusInterfaceInternal request
	GetStatusInterfaceInternal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusSave request
	GetStatusSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusSyslog request
	DeleteStatusSyslog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusSyslog request
	GetStatusSyslog(ctx context.Context, params *GetStatusSyslogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusSystem request
	GetStatusSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetInfoDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfoDeviceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetRecallPresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetRecallPresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsPresetStorage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsPresetStorageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePresetStoragePresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePresetStoragePresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresetStoragePresetName(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresetStoragePresetNameRequest(c.Server, presetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetStoragePresetNameWithBody(ctx context.Context, presetName PresetName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetStoragePresetNameRequestWithBody(c.Server, presetName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPresetStoragePresetName(ctx context.Context, presetName PresetName, body PutPresetStoragePresetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPresetStoragePresetNameRequest(c.Server, presetName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettings(ctx context.Context, params *PutSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelWithBody(ctx context.Context, params *PutSettingsChannelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannel(ctx context.Context, params *PutSettingsChannelParams, body PutSettingsChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelId(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdWithBody(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdRequestWithBody(c.Server, channelId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelId(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, body PutSettingsChannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdRequest(c.Server, channelId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAmpenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAmpenableRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAmpenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAmpenableRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAmpenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAmpenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAmpenableRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAudioanalyzerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAudioanalyzerEnable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAudioanalyzerEnableRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerEnableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerEnableRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerEnable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerEnableRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAudioanalyzerReference(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAudioanalyzerReferenceRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReferenceWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReference(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdBridgeenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdBridgeenableRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdBridgeenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdBridgeenableRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdBridgeenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdBridgeenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdBridgeenableRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDsp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspCurrentlimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspCurrentlimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspCurrentlimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspCurrentlimiterRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspCurrentlimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspCurrentlimiterRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspDelayRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspDelayRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspDelayWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspDelayRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspDelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspDelayRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspEqRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspEqRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSettingsChannelChannelIdDspEqWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSettingsChannelChannelIdDspEqRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, body PostSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSettingsChannelChannelIdDspEqRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEqWithBody(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqRequestWithBody(c.Server, channelId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, body PutSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqRequest(c.Server, channelId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSettingsChannelChannelIdDspEqEqIdRequest(c.Server, channelId, eqId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspEqEqIdRequest(c.Server, channelId, eqId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEqEqIdWithBody(ctx context.Context, channelId ChannelId, eqId EqId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqEqIdRequestWithBody(c.Server, channelId, eqId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEqEqId(ctx context.Context, channelId ChannelId, eqId EqId, body PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqEqIdRequest(c.Server, channelId, eqId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspEqenable(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspEqenableRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEqenableWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqenableRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspEqenable(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspEqenableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspEqenableRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspFirRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspFirRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspFirWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspFirRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspFir(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspFirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspFirRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspGroupmute(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspGroupmuteRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspMute(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspMuteRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspMuteWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspMuteRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspMute(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspMuteRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspPatchRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspPatchRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPatchWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPatchRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPatch(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPatchRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspPatchPatchId(ctx context.Context, channelId ChannelId, patchId PatchId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspPatchPatchIdRequest(c.Server, channelId, patchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspPhase(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspPhaseRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPhaseWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPhaseRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPhase(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPhaseRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspPowerlimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspPowerlimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPowerlimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPowerlimiterRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspPowerlimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspPowerlimiterRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspVoltagelimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspVoltagelimiterRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspVoltagelimiterWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspVoltagelimiterRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspVoltagelimiter(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspVoltagelimiterRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId(ctx context.Context, channelId ChannelId, voltagelimiterId VoltagelimiterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdRequest(c.Server, channelId, voltagelimiterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdDspVolumeRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdDspVolumeRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspVolumeWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspVolumeRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdDspVolume(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdDspVolumeRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdNameRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdNameRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdNameWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdNameRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdName(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdNameRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdSpeakerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeakerWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdSpeakerDetectionRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsChannelChannelIdSpeakerDetectionRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeakerDetectionWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerDetectionRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeakerDetection(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerDetectionRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSettingsChannelChannelIdSpeakerPresetRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsChannelChannelIdSpeakerPresetRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeakerPresetWithBody(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerPresetRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsChannelChannelIdSpeakerPreset(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsChannelChannelIdSpeakerPresetRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDevice(ctx context.Context, body PutSettingsDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDante(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDanteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDanteIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDanteIdentityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDanteIdentityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDanteIdentityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDanteIdentity(ctx context.Context, body PutSettingsDeviceDanteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDanteIdentityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDanteNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDanteNetworkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceDanteNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceDanteNetworkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDanteNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDanteNetworkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDanteNetwork(ctx context.Context, body PutSettingsDeviceDanteNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDanteNetworkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDsp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDspRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDsp(ctx context.Context, body PutSettingsDeviceDspJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDspMute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDspMuteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspMuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspMuteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspMute(ctx context.Context, body PutSettingsDeviceDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspMuteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDspStartupmute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDspStartupmuteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspStartupmuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspStartupmuteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspStartupmute(ctx context.Context, body PutSettingsDeviceDspStartupmuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspStartupmuteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDspVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDspVolumeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceDspVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceDspVolumeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspVolumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspVolume(ctx context.Context, body PutSettingsDeviceDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspVolumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceDspVolumeramp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceDspVolumerampRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceDspVolumeramp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceDspVolumerampRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspVolumerampWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspVolumerampRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceDspVolumeramp(ctx context.Context, body PutSettingsDeviceDspVolumerampJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceDspVolumerampRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceFanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceFanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceFanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceFan(ctx context.Context, body PutSettingsDeviceFanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceFanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGrouping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGrouping(ctx context.Context, body PutSettingsDeviceGroupingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceGroupingGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceGroupingGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroups(ctx context.Context, body PutSettingsDeviceGroupingGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupId(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdAssignRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceGroupingGroupsGroupIdAssignRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdAssignWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdAssign(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId(ctx context.Context, groupId GroupId, assignId AssignId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdRequest(c.Server, groupId, assignId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdEnable(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdEnableRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdEnableWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdEnable(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdMute(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdMuteRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdMuteWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdMute(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdNameRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceGroupingGroupsGroupIdNameRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdNameWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdNameRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdName(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdNameRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingGroupsGroupIdSolo(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingGroupsGroupIdSoloRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdSoloWithBody(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingGroupsGroupIdSolo(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceGroupingSoloautoclear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceGroupingSoloautoclearRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingSoloautoclearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingSoloautoclearRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceGroupingSoloautoclear(ctx context.Context, body PutSettingsDeviceGroupingSoloautoclearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceGroupingSoloautoclearRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceIdentify(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceIdentifyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceIdentifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceIdentify(ctx context.Context, body PutSettingsDeviceIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceIdentifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceLocationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceLocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceLocationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceLocation(ctx context.Context, body PutSettingsDeviceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceMainsvoltage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceMainsvoltageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceMainsvoltage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceMainsvoltageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceMainsvoltageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceMainsvoltageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceMainsvoltage(ctx context.Context, body PutSettingsDeviceMainsvoltageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceMainsvoltageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceNameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceName(ctx context.Context, body PutSettingsDeviceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceNameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceNetworkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsDeviceNetwork(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsDeviceNetworkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceNetworkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceNetworkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceNetwork(ctx context.Context, body PutSettingsDeviceNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceNetworkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceRemotemute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceRemotemuteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceRemotemuteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceRemotemuteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceRemotemute(ctx context.Context, body PutSettingsDeviceRemotemuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceRemotemuteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceSyslog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceSyslogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceSyslogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceSyslogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceSyslog(ctx context.Context, body PutSettingsDeviceSyslogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceSyslogRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceTimeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTimeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTime(ctx context.Context, body PutSettingsDeviceTimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceTimeCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceTimeCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTimeCurrentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeCurrentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTimeCurrent(ctx context.Context, body PutSettingsDeviceTimeCurrentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeCurrentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsDeviceTimeTimezone(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsDeviceTimeTimezoneRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTimeTimezoneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeTimezoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsDeviceTimeTimezone(ctx context.Context, body PutSettingsDeviceTimeTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsDeviceTimeTimezoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterface(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterface(ctx context.Context, body PutSettingsInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsInterfaceInterfacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfaces(ctx context.Context, body PutSettingsInterfaceInterfacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdRequest(c.Server, interfaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdRequestWithBody(c.Server, interfaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdRequest(c.Server, interfaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelRequest(c.Server, interfaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequestWithBody(c.Server, interfaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequest(c.Server, interfaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequestWithBody(c.Server, interfaceId, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(c.Server, interfaceId, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequestWithBody(c.Server, interfaceId, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest(c.Server, interfaceId, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequestWithBody(c.Server, interfaceId, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest(c.Server, interfaceId, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest(c.Server, interfaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBody(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequestWithBody(c.Server, interfaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest(c.Server, interfaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequestWithBody(c.Server, interfaceId, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest(c.Server, interfaceId, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBody(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequestWithBody(c.Server, interfaceId, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(c.Server, interfaceId, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceMadithrough(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceMadithroughRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsInterfaceMadithrough(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsInterfaceMadithroughRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceMadithroughWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceMadithroughRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceMadithrough(ctx context.Context, body PutSettingsInterfaceMadithroughJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceMadithroughRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsInterfaceSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsInterfaceSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSettingsInterfaceSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSettingsInterfaceSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsInterfaceSync(ctx context.Context, body PutSettingsInterfaceSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsInterfaceSyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsSaveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpeakerpreset(ctx context.Context, params *GetSpeakerpresetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpeakerpresetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsSpeakerpreset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsSpeakerpresetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSpeakerpresetWithBody(ctx context.Context, params *PutSpeakerpresetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSpeakerpresetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSpeakerpreset(ctx context.Context, params *PutSpeakerpresetParams, body PutSpeakerpresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSpeakerpresetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelId(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdActive(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdActiveRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAmp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAmpRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdAmp(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdAmpRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzer(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerCurrentRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerCurrentRms(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerCurrentRmsRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerImpedanceRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdAudioanalyzerImpedance(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerVoltageRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerVoltageRms(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerVoltageRmsRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdCurrentRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdCurrent(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdCurrentRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdDspDelay(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdDspDelayRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdDspEq(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdDspEqRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdDspLevel(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdDspLevelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdDspLevel(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdDspLevelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdDspReduction(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdDspReductionRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdDspReduction(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdDspReductionRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdError(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdErrorRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdPower(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdPowerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdPower(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdPowerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdSpeakerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdSpeaker(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdSpeakerRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChannelChannelIdVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChannelChannelIdVoltageRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusChannelChannelIdVoltage(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusChannelChannelIdVoltageRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDevice(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDeviceDante(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceDanteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDeviceError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceFanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusDeviceFan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusDeviceFanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDeviceFpga(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceFpgaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDevicePsu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDevicePsuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusDevicePsu(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusDevicePsuRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusDeviceRemotemute(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusDeviceRemotemuteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterface(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceInterfacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsStatusInterfaceInterfaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsStatusInterfaceInterfacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterfaceInterfacesInterfaceId(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceInterfacesInterfaceIdRequest(c.Server, interfaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterfaceInterfacesInterfaceIdInputchannel(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceInterfacesInterfaceIdInputchannelRequest(c.Server, interfaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(c.Server, interfaceId, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusInterfaceInternal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusInterfaceInternalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusSave(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusSaveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusSyslog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusSyslogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusSyslog(ctx context.Context, params *GetStatusSyslogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusSyslogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusSystemRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetInfoDeviceRequest generates requests for GetInfoDevice
func NewGetInfoDeviceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPresetRecallPresetNameRequest generates requests for PutPresetRecallPresetName
func NewPutPresetRecallPresetNameRequest(server string, presetName PresetName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "preset_name", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preset/recall/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsPresetStorageRequest generates requests for OptionsPresetStorage
func NewOptionsPresetStorageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preset/storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePresetStoragePresetNameRequest generates requests for DeletePresetStoragePresetName
func NewDeletePresetStoragePresetNameRequest(server string, presetName PresetName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "preset_name", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preset/storage/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPresetStoragePresetNameRequest generates requests for GetPresetStoragePresetName
func NewGetPresetStoragePresetNameRequest(server string, presetName PresetName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "preset_name", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preset/storage/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPresetStoragePresetNameRequest calls the generic PutPresetStoragePresetName builder with application/json body
func NewPutPresetStoragePresetNameRequest(server string, presetName PresetName, body PutPresetStoragePresetNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPresetStoragePresetNameRequestWithBody(server, presetName, "application/json", bodyReader)
}

// NewPutPresetStoragePresetNameRequestWithBody generates requests for PutPresetStoragePresetName with any type of body
func NewPutPresetStoragePresetNameRequestWithBody(server string, presetName PresetName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "preset_name", runtime.ParamLocationPath, presetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preset/storage/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsRequest generates requests for GetSettings
func NewGetSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsRequest generates requests for PutSettings
func NewPutSettingsRequest(server string, params *PutSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClearChannelEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clear_channel_eq", runtime.ParamLocationQuery, *params.ClearChannelEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelRequest generates requests for GetSettingsChannel
func NewGetSettingsChannelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelRequest generates requests for OptionsSettingsChannel
func NewOptionsSettingsChannelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelRequest calls the generic PutSettingsChannel builder with application/json body
func NewPutSettingsChannelRequest(server string, params *PutSettingsChannelParams, body PutSettingsChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutSettingsChannelRequestWithBody generates requests for PutSettingsChannel with any type of body
func NewPutSettingsChannelRequestWithBody(server string, params *PutSettingsChannelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClearChannelEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clear_channel_eq", runtime.ParamLocationQuery, *params.ClearChannelEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdRequest generates requests for GetSettingsChannelChannelId
func NewGetSettingsChannelChannelIdRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdRequest calls the generic PutSettingsChannelChannelId builder with application/json body
func NewPutSettingsChannelChannelIdRequest(server string, channelId ChannelId, params *PutSettingsChannelChannelIdParams, body PutSettingsChannelChannelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdRequestWithBody(server, channelId, params, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdRequestWithBody generates requests for PutSettingsChannelChannelId with any type of body
func NewPutSettingsChannelChannelIdRequestWithBody(server string, channelId ChannelId, params *PutSettingsChannelChannelIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClearChannelEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clear_channel_eq", runtime.ParamLocationQuery, *params.ClearChannelEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAmpenableRequest generates requests for GetSettingsChannelChannelIdAmpenable
func NewGetSettingsChannelChannelIdAmpenableRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/ampenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAmpenableRequest calls the generic PutSettingsChannelChannelIdAmpenable builder with application/json body
func NewPutSettingsChannelChannelIdAmpenableRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAmpenableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAmpenableRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAmpenableRequestWithBody generates requests for PutSettingsChannelChannelIdAmpenable with any type of body
func NewPutSettingsChannelChannelIdAmpenableRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/ampenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAudioanalyzerRequest generates requests for GetSettingsChannelChannelIdAudioanalyzer
func NewGetSettingsChannelChannelIdAudioanalyzerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAudioanalyzerRequest calls the generic PutSettingsChannelChannelIdAudioanalyzer builder with application/json body
func NewPutSettingsChannelChannelIdAudioanalyzerRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAudioanalyzerRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAudioanalyzerRequestWithBody generates requests for PutSettingsChannelChannelIdAudioanalyzer with any type of body
func NewPutSettingsChannelChannelIdAudioanalyzerRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAudioanalyzerEnableRequest generates requests for GetSettingsChannelChannelIdAudioanalyzerEnable
func NewGetSettingsChannelChannelIdAudioanalyzerEnableRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAudioanalyzerEnableRequest calls the generic PutSettingsChannelChannelIdAudioanalyzerEnable builder with application/json body
func NewPutSettingsChannelChannelIdAudioanalyzerEnableRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAudioanalyzerEnableRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAudioanalyzerEnableRequestWithBody generates requests for PutSettingsChannelChannelIdAudioanalyzerEnable with any type of body
func NewPutSettingsChannelChannelIdAudioanalyzerEnableRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAudioanalyzerReferenceRequest generates requests for GetSettingsChannelChannelIdAudioanalyzerReference
func NewGetSettingsChannelChannelIdAudioanalyzerReferenceRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequest calls the generic PutSettingsChannelChannelIdAudioanalyzerReference builder with application/json body
func NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequestWithBody generates requests for PutSettingsChannelChannelIdAudioanalyzerReference with any type of body
func NewPutSettingsChannelChannelIdAudioanalyzerReferenceRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest generates requests for GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance
func NewGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/impedance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest generates requests for OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance
func NewOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/impedance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest calls the generic PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance builder with application/json body
func NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequestWithBody generates requests for PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance with any type of body
func NewPutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/impedance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest generates requests for GetSettingsChannelChannelIdAudioanalyzerReferencePhase
func NewGetSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/phase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest generates requests for OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase
func NewOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/phase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest calls the generic PutSettingsChannelChannelIdAudioanalyzerReferencePhase builder with application/json body
func NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequestWithBody generates requests for PutSettingsChannelChannelIdAudioanalyzerReferencePhase with any type of body
func NewPutSettingsChannelChannelIdAudioanalyzerReferencePhaseRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/audioanalyzer/reference/phase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdBridgeenableRequest generates requests for GetSettingsChannelChannelIdBridgeenable
func NewGetSettingsChannelChannelIdBridgeenableRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/bridgeenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdBridgeenableRequest calls the generic PutSettingsChannelChannelIdBridgeenable builder with application/json body
func NewPutSettingsChannelChannelIdBridgeenableRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdBridgeenableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdBridgeenableRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdBridgeenableRequestWithBody generates requests for PutSettingsChannelChannelIdBridgeenable with any type of body
func NewPutSettingsChannelChannelIdBridgeenableRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/bridgeenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspRequest generates requests for GetSettingsChannelChannelIdDsp
func NewGetSettingsChannelChannelIdDspRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdDspCurrentlimiterRequest generates requests for GetSettingsChannelChannelIdDspCurrentlimiter
func NewGetSettingsChannelChannelIdDspCurrentlimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/currentlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspCurrentlimiterRequest generates requests for OptionsSettingsChannelChannelIdDspCurrentlimiter
func NewOptionsSettingsChannelChannelIdDspCurrentlimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/currentlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspCurrentlimiterRequest calls the generic PutSettingsChannelChannelIdDspCurrentlimiter builder with application/json body
func NewPutSettingsChannelChannelIdDspCurrentlimiterRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspCurrentlimiterRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspCurrentlimiterRequestWithBody generates requests for PutSettingsChannelChannelIdDspCurrentlimiter with any type of body
func NewPutSettingsChannelChannelIdDspCurrentlimiterRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/currentlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspDelayRequest generates requests for GetSettingsChannelChannelIdDspDelay
func NewGetSettingsChannelChannelIdDspDelayRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/delay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspDelayRequest generates requests for OptionsSettingsChannelChannelIdDspDelay
func NewOptionsSettingsChannelChannelIdDspDelayRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/delay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspDelayRequest calls the generic PutSettingsChannelChannelIdDspDelay builder with application/json body
func NewPutSettingsChannelChannelIdDspDelayRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspDelayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspDelayRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspDelayRequestWithBody generates requests for PutSettingsChannelChannelIdDspDelay with any type of body
func NewPutSettingsChannelChannelIdDspDelayRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/delay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspEqRequest generates requests for GetSettingsChannelChannelIdDspEq
func NewGetSettingsChannelChannelIdDspEqRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspEqRequest generates requests for OptionsSettingsChannelChannelIdDspEq
func NewOptionsSettingsChannelChannelIdDspEqRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSettingsChannelChannelIdDspEqRequest calls the generic PostSettingsChannelChannelIdDspEq builder with application/json body
func NewPostSettingsChannelChannelIdDspEqRequest(server string, channelId ChannelId, body PostSettingsChannelChannelIdDspEqJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSettingsChannelChannelIdDspEqRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostSettingsChannelChannelIdDspEqRequestWithBody generates requests for PostSettingsChannelChannelIdDspEq with any type of body
func NewPostSettingsChannelChannelIdDspEqRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSettingsChannelChannelIdDspEqRequest calls the generic PutSettingsChannelChannelIdDspEq builder with application/json body
func NewPutSettingsChannelChannelIdDspEqRequest(server string, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, body PutSettingsChannelChannelIdDspEqJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspEqRequestWithBody(server, channelId, params, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspEqRequestWithBody generates requests for PutSettingsChannelChannelIdDspEq with any type of body
func NewPutSettingsChannelChannelIdDspEqRequestWithBody(server string, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClearChannelEq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clear_channel_eq", runtime.ParamLocationQuery, *params.ClearChannelEq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSettingsChannelChannelIdDspEqEqIdRequest generates requests for DeleteSettingsChannelChannelIdDspEqEqId
func NewDeleteSettingsChannelChannelIdDspEqEqIdRequest(server string, channelId ChannelId, eqId EqId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eq_id", runtime.ParamLocationPath, eqId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdDspEqEqIdRequest generates requests for GetSettingsChannelChannelIdDspEqEqId
func NewGetSettingsChannelChannelIdDspEqEqIdRequest(server string, channelId ChannelId, eqId EqId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eq_id", runtime.ParamLocationPath, eqId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspEqEqIdRequest calls the generic PutSettingsChannelChannelIdDspEqEqId builder with application/json body
func NewPutSettingsChannelChannelIdDspEqEqIdRequest(server string, channelId ChannelId, eqId EqId, body PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspEqEqIdRequestWithBody(server, channelId, eqId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspEqEqIdRequestWithBody generates requests for PutSettingsChannelChannelIdDspEqEqId with any type of body
func NewPutSettingsChannelChannelIdDspEqEqIdRequestWithBody(server string, channelId ChannelId, eqId EqId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eq_id", runtime.ParamLocationPath, eqId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eq/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspEqenableRequest generates requests for GetSettingsChannelChannelIdDspEqenable
func NewGetSettingsChannelChannelIdDspEqenableRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eqenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspEqenableRequest calls the generic PutSettingsChannelChannelIdDspEqenable builder with application/json body
func NewPutSettingsChannelChannelIdDspEqenableRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspEqenableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspEqenableRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspEqenableRequestWithBody generates requests for PutSettingsChannelChannelIdDspEqenable with any type of body
func NewPutSettingsChannelChannelIdDspEqenableRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/eqenable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspFirRequest generates requests for GetSettingsChannelChannelIdDspFir
func NewGetSettingsChannelChannelIdDspFirRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/fir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspFirRequest generates requests for OptionsSettingsChannelChannelIdDspFir
func NewOptionsSettingsChannelChannelIdDspFirRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/fir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspFirRequest calls the generic PutSettingsChannelChannelIdDspFir builder with application/json body
func NewPutSettingsChannelChannelIdDspFirRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspFirJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspFirRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspFirRequestWithBody generates requests for PutSettingsChannelChannelIdDspFir with any type of body
func NewPutSettingsChannelChannelIdDspFirRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/fir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspGroupmuteRequest generates requests for GetSettingsChannelChannelIdDspGroupmute
func NewGetSettingsChannelChannelIdDspGroupmuteRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/groupmute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdDspMuteRequest generates requests for GetSettingsChannelChannelIdDspMute
func NewGetSettingsChannelChannelIdDspMuteRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspMuteRequest calls the generic PutSettingsChannelChannelIdDspMute builder with application/json body
func NewPutSettingsChannelChannelIdDspMuteRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspMuteRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspMuteRequestWithBody generates requests for PutSettingsChannelChannelIdDspMute with any type of body
func NewPutSettingsChannelChannelIdDspMuteRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspPatchRequest generates requests for GetSettingsChannelChannelIdDspPatch
func NewGetSettingsChannelChannelIdDspPatchRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/patch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspPatchRequest generates requests for OptionsSettingsChannelChannelIdDspPatch
func NewOptionsSettingsChannelChannelIdDspPatchRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/patch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspPatchRequest calls the generic PutSettingsChannelChannelIdDspPatch builder with application/json body
func NewPutSettingsChannelChannelIdDspPatchRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspPatchRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspPatchRequestWithBody generates requests for PutSettingsChannelChannelIdDspPatch with any type of body
func NewPutSettingsChannelChannelIdDspPatchRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/patch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspPatchPatchIdRequest generates requests for GetSettingsChannelChannelIdDspPatchPatchId
func NewGetSettingsChannelChannelIdDspPatchPatchIdRequest(server string, channelId ChannelId, patchId PatchId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "patch_id", runtime.ParamLocationPath, patchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/patch/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdDspPhaseRequest generates requests for GetSettingsChannelChannelIdDspPhase
func NewGetSettingsChannelChannelIdDspPhaseRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/phase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspPhaseRequest calls the generic PutSettingsChannelChannelIdDspPhase builder with application/json body
func NewPutSettingsChannelChannelIdDspPhaseRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspPhaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspPhaseRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspPhaseRequestWithBody generates requests for PutSettingsChannelChannelIdDspPhase with any type of body
func NewPutSettingsChannelChannelIdDspPhaseRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/phase", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspPowerlimiterRequest generates requests for GetSettingsChannelChannelIdDspPowerlimiter
func NewGetSettingsChannelChannelIdDspPowerlimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/powerlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspPowerlimiterRequest generates requests for OptionsSettingsChannelChannelIdDspPowerlimiter
func NewOptionsSettingsChannelChannelIdDspPowerlimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/powerlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspPowerlimiterRequest calls the generic PutSettingsChannelChannelIdDspPowerlimiter builder with application/json body
func NewPutSettingsChannelChannelIdDspPowerlimiterRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspPowerlimiterRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspPowerlimiterRequestWithBody generates requests for PutSettingsChannelChannelIdDspPowerlimiter with any type of body
func NewPutSettingsChannelChannelIdDspPowerlimiterRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/powerlimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspVoltagelimiterRequest generates requests for GetSettingsChannelChannelIdDspVoltagelimiter
func NewGetSettingsChannelChannelIdDspVoltagelimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/voltagelimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspVoltagelimiterRequest generates requests for OptionsSettingsChannelChannelIdDspVoltagelimiter
func NewOptionsSettingsChannelChannelIdDspVoltagelimiterRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/voltagelimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspVoltagelimiterRequest calls the generic PutSettingsChannelChannelIdDspVoltagelimiter builder with application/json body
func NewPutSettingsChannelChannelIdDspVoltagelimiterRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspVoltagelimiterRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspVoltagelimiterRequestWithBody generates requests for PutSettingsChannelChannelIdDspVoltagelimiter with any type of body
func NewPutSettingsChannelChannelIdDspVoltagelimiterRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/voltagelimiter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdRequest generates requests for GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId
func NewGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdRequest(server string, channelId ChannelId, voltagelimiterId VoltagelimiterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "voltagelimiter_id", runtime.ParamLocationPath, voltagelimiterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/voltagelimiter/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdDspVolumeRequest generates requests for GetSettingsChannelChannelIdDspVolume
func NewGetSettingsChannelChannelIdDspVolumeRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/volume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdDspVolumeRequest generates requests for OptionsSettingsChannelChannelIdDspVolume
func NewOptionsSettingsChannelChannelIdDspVolumeRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/volume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdDspVolumeRequest calls the generic PutSettingsChannelChannelIdDspVolume builder with application/json body
func NewPutSettingsChannelChannelIdDspVolumeRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdDspVolumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdDspVolumeRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdDspVolumeRequestWithBody generates requests for PutSettingsChannelChannelIdDspVolume with any type of body
func NewPutSettingsChannelChannelIdDspVolumeRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/dsp/volume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdNameRequest generates requests for GetSettingsChannelChannelIdName
func NewGetSettingsChannelChannelIdNameRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdNameRequest generates requests for OptionsSettingsChannelChannelIdName
func NewOptionsSettingsChannelChannelIdNameRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdNameRequest calls the generic PutSettingsChannelChannelIdName builder with application/json body
func NewPutSettingsChannelChannelIdNameRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdNameRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdNameRequestWithBody generates requests for PutSettingsChannelChannelIdName with any type of body
func NewPutSettingsChannelChannelIdNameRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdSpeakerRequest generates requests for GetSettingsChannelChannelIdSpeaker
func NewGetSettingsChannelChannelIdSpeakerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdSpeakerRequest calls the generic PutSettingsChannelChannelIdSpeaker builder with application/json body
func NewPutSettingsChannelChannelIdSpeakerRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdSpeakerRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdSpeakerRequestWithBody generates requests for PutSettingsChannelChannelIdSpeaker with any type of body
func NewPutSettingsChannelChannelIdSpeakerRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsChannelChannelIdSpeakerDetectionRequest generates requests for GetSettingsChannelChannelIdSpeakerDetection
func NewGetSettingsChannelChannelIdSpeakerDetectionRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/detection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsChannelChannelIdSpeakerDetectionRequest generates requests for OptionsSettingsChannelChannelIdSpeakerDetection
func NewOptionsSettingsChannelChannelIdSpeakerDetectionRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/detection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdSpeakerDetectionRequest calls the generic PutSettingsChannelChannelIdSpeakerDetection builder with application/json body
func NewPutSettingsChannelChannelIdSpeakerDetectionRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdSpeakerDetectionRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdSpeakerDetectionRequestWithBody generates requests for PutSettingsChannelChannelIdSpeakerDetection with any type of body
func NewPutSettingsChannelChannelIdSpeakerDetectionRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/detection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSettingsChannelChannelIdSpeakerPresetRequest generates requests for DeleteSettingsChannelChannelIdSpeakerPreset
func NewDeleteSettingsChannelChannelIdSpeakerPresetRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/preset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsChannelChannelIdSpeakerPresetRequest generates requests for GetSettingsChannelChannelIdSpeakerPreset
func NewGetSettingsChannelChannelIdSpeakerPresetRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/preset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsChannelChannelIdSpeakerPresetRequest calls the generic PutSettingsChannelChannelIdSpeakerPreset builder with application/json body
func NewPutSettingsChannelChannelIdSpeakerPresetRequest(server string, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsChannelChannelIdSpeakerPresetRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPutSettingsChannelChannelIdSpeakerPresetRequestWithBody generates requests for PutSettingsChannelChannelIdSpeakerPreset with any type of body
func NewPutSettingsChannelChannelIdSpeakerPresetRequestWithBody(server string, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/channel/%s/speaker/preset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceRequest generates requests for GetSettingsDevice
func NewGetSettingsDeviceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceRequest calls the generic PutSettingsDevice builder with application/json body
func NewPutSettingsDeviceRequest(server string, body PutSettingsDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceRequestWithBody generates requests for PutSettingsDevice with any type of body
func NewPutSettingsDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDanteRequest generates requests for GetSettingsDeviceDante
func NewGetSettingsDeviceDanteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsDeviceDanteIdentityRequest generates requests for GetSettingsDeviceDanteIdentity
func NewGetSettingsDeviceDanteIdentityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante/identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDanteIdentityRequest calls the generic PutSettingsDeviceDanteIdentity builder with application/json body
func NewPutSettingsDeviceDanteIdentityRequest(server string, body PutSettingsDeviceDanteIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDanteIdentityRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDanteIdentityRequestWithBody generates requests for PutSettingsDeviceDanteIdentity with any type of body
func NewPutSettingsDeviceDanteIdentityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante/identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDanteNetworkRequest generates requests for GetSettingsDeviceDanteNetwork
func NewGetSettingsDeviceDanteNetworkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceDanteNetworkRequest generates requests for OptionsSettingsDeviceDanteNetwork
func NewOptionsSettingsDeviceDanteNetworkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDanteNetworkRequest calls the generic PutSettingsDeviceDanteNetwork builder with application/json body
func NewPutSettingsDeviceDanteNetworkRequest(server string, body PutSettingsDeviceDanteNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDanteNetworkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDanteNetworkRequestWithBody generates requests for PutSettingsDeviceDanteNetwork with any type of body
func NewPutSettingsDeviceDanteNetworkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dante/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDspRequest generates requests for GetSettingsDeviceDsp
func NewGetSettingsDeviceDspRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDspRequest calls the generic PutSettingsDeviceDsp builder with application/json body
func NewPutSettingsDeviceDspRequest(server string, body PutSettingsDeviceDspJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDspRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDspRequestWithBody generates requests for PutSettingsDeviceDsp with any type of body
func NewPutSettingsDeviceDspRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDspMuteRequest generates requests for GetSettingsDeviceDspMute
func NewGetSettingsDeviceDspMuteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/mute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDspMuteRequest calls the generic PutSettingsDeviceDspMute builder with application/json body
func NewPutSettingsDeviceDspMuteRequest(server string, body PutSettingsDeviceDspMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDspMuteRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDspMuteRequestWithBody generates requests for PutSettingsDeviceDspMute with any type of body
func NewPutSettingsDeviceDspMuteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/mute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDspStartupmuteRequest generates requests for GetSettingsDeviceDspStartupmute
func NewGetSettingsDeviceDspStartupmuteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/startupmute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDspStartupmuteRequest calls the generic PutSettingsDeviceDspStartupmute builder with application/json body
func NewPutSettingsDeviceDspStartupmuteRequest(server string, body PutSettingsDeviceDspStartupmuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDspStartupmuteRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDspStartupmuteRequestWithBody generates requests for PutSettingsDeviceDspStartupmute with any type of body
func NewPutSettingsDeviceDspStartupmuteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/startupmute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDspVolumeRequest generates requests for GetSettingsDeviceDspVolume
func NewGetSettingsDeviceDspVolumeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceDspVolumeRequest generates requests for OptionsSettingsDeviceDspVolume
func NewOptionsSettingsDeviceDspVolumeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDspVolumeRequest calls the generic PutSettingsDeviceDspVolume builder with application/json body
func NewPutSettingsDeviceDspVolumeRequest(server string, body PutSettingsDeviceDspVolumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDspVolumeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDspVolumeRequestWithBody generates requests for PutSettingsDeviceDspVolume with any type of body
func NewPutSettingsDeviceDspVolumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceDspVolumerampRequest generates requests for GetSettingsDeviceDspVolumeramp
func NewGetSettingsDeviceDspVolumerampRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volumeramp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceDspVolumerampRequest generates requests for OptionsSettingsDeviceDspVolumeramp
func NewOptionsSettingsDeviceDspVolumerampRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volumeramp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceDspVolumerampRequest calls the generic PutSettingsDeviceDspVolumeramp builder with application/json body
func NewPutSettingsDeviceDspVolumerampRequest(server string, body PutSettingsDeviceDspVolumerampJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceDspVolumerampRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceDspVolumerampRequestWithBody generates requests for PutSettingsDeviceDspVolumeramp with any type of body
func NewPutSettingsDeviceDspVolumerampRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/dsp/volumeramp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceFanRequest generates requests for GetSettingsDeviceFan
func NewGetSettingsDeviceFanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/fan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceFanRequest calls the generic PutSettingsDeviceFan builder with application/json body
func NewPutSettingsDeviceFanRequest(server string, body PutSettingsDeviceFanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceFanRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceFanRequestWithBody generates requests for PutSettingsDeviceFan with any type of body
func NewPutSettingsDeviceFanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/fan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingRequest generates requests for GetSettingsDeviceGrouping
func NewGetSettingsDeviceGroupingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingRequest calls the generic PutSettingsDeviceGrouping builder with application/json body
func NewPutSettingsDeviceGroupingRequest(server string, body PutSettingsDeviceGroupingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingRequestWithBody generates requests for PutSettingsDeviceGrouping with any type of body
func NewPutSettingsDeviceGroupingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsRequest generates requests for GetSettingsDeviceGroupingGroups
func NewGetSettingsDeviceGroupingGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceGroupingGroupsRequest generates requests for OptionsSettingsDeviceGroupingGroups
func NewOptionsSettingsDeviceGroupingGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsRequest calls the generic PutSettingsDeviceGroupingGroups builder with application/json body
func NewPutSettingsDeviceGroupingGroupsRequest(server string, body PutSettingsDeviceGroupingGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsRequestWithBody generates requests for PutSettingsDeviceGroupingGroups with any type of body
func NewPutSettingsDeviceGroupingGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdRequest generates requests for GetSettingsDeviceGroupingGroupsGroupId
func NewGetSettingsDeviceGroupingGroupsGroupIdRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdAssignRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdAssign
func NewGetSettingsDeviceGroupingGroupsGroupIdAssignRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/assign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceGroupingGroupsGroupIdAssignRequest generates requests for OptionsSettingsDeviceGroupingGroupsGroupIdAssign
func NewOptionsSettingsDeviceGroupingGroupsGroupIdAssignRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/assign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequest calls the generic PutSettingsDeviceGroupingGroupsGroupIdAssign builder with application/json body
func NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequest(server string, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequestWithBody generates requests for PutSettingsDeviceGroupingGroupsGroupIdAssign with any type of body
func NewPutSettingsDeviceGroupingGroupsGroupIdAssignRequestWithBody(server string, groupId GroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/assign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId
func NewGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdRequest(server string, groupId GroupId, assignId AssignId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assign_id", runtime.ParamLocationPath, assignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/assign/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdEnableRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdEnable
func NewGetSettingsDeviceGroupingGroupsGroupIdEnableRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequest calls the generic PutSettingsDeviceGroupingGroupsGroupIdEnable builder with application/json body
func NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequest(server string, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequestWithBody generates requests for PutSettingsDeviceGroupingGroupsGroupIdEnable with any type of body
func NewPutSettingsDeviceGroupingGroupsGroupIdEnableRequestWithBody(server string, groupId GroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdMuteRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdMute
func NewGetSettingsDeviceGroupingGroupsGroupIdMuteRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequest calls the generic PutSettingsDeviceGroupingGroupsGroupIdMute builder with application/json body
func NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequest(server string, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequestWithBody generates requests for PutSettingsDeviceGroupingGroupsGroupIdMute with any type of body
func NewPutSettingsDeviceGroupingGroupsGroupIdMuteRequestWithBody(server string, groupId GroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdNameRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdName
func NewGetSettingsDeviceGroupingGroupsGroupIdNameRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceGroupingGroupsGroupIdNameRequest generates requests for OptionsSettingsDeviceGroupingGroupsGroupIdName
func NewOptionsSettingsDeviceGroupingGroupsGroupIdNameRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsGroupIdNameRequest calls the generic PutSettingsDeviceGroupingGroupsGroupIdName builder with application/json body
func NewPutSettingsDeviceGroupingGroupsGroupIdNameRequest(server string, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsGroupIdNameRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsGroupIdNameRequestWithBody generates requests for PutSettingsDeviceGroupingGroupsGroupIdName with any type of body
func NewPutSettingsDeviceGroupingGroupsGroupIdNameRequestWithBody(server string, groupId GroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingGroupsGroupIdSoloRequest generates requests for GetSettingsDeviceGroupingGroupsGroupIdSolo
func NewGetSettingsDeviceGroupingGroupsGroupIdSoloRequest(server string, groupId GroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/solo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequest calls the generic PutSettingsDeviceGroupingGroupsGroupIdSolo builder with application/json body
func NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequest(server string, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequestWithBody generates requests for PutSettingsDeviceGroupingGroupsGroupIdSolo with any type of body
func NewPutSettingsDeviceGroupingGroupsGroupIdSoloRequestWithBody(server string, groupId GroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/groups/%s/solo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceGroupingSoloautoclearRequest generates requests for GetSettingsDeviceGroupingSoloautoclear
func NewGetSettingsDeviceGroupingSoloautoclearRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/soloautoclear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceGroupingSoloautoclearRequest calls the generic PutSettingsDeviceGroupingSoloautoclear builder with application/json body
func NewPutSettingsDeviceGroupingSoloautoclearRequest(server string, body PutSettingsDeviceGroupingSoloautoclearJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceGroupingSoloautoclearRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceGroupingSoloautoclearRequestWithBody generates requests for PutSettingsDeviceGroupingSoloautoclear with any type of body
func NewPutSettingsDeviceGroupingSoloautoclearRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/grouping/soloautoclear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceIdentifyRequest generates requests for GetSettingsDeviceIdentify
func NewGetSettingsDeviceIdentifyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/identify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceIdentifyRequest calls the generic PutSettingsDeviceIdentify builder with application/json body
func NewPutSettingsDeviceIdentifyRequest(server string, body PutSettingsDeviceIdentifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceIdentifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceIdentifyRequestWithBody generates requests for PutSettingsDeviceIdentify with any type of body
func NewPutSettingsDeviceIdentifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/identify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceLocationRequest generates requests for GetSettingsDeviceLocation
func NewGetSettingsDeviceLocationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/location")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceLocationRequest generates requests for OptionsSettingsDeviceLocation
func NewOptionsSettingsDeviceLocationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/location")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceLocationRequest calls the generic PutSettingsDeviceLocation builder with application/json body
func NewPutSettingsDeviceLocationRequest(server string, body PutSettingsDeviceLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceLocationRequestWithBody generates requests for PutSettingsDeviceLocation with any type of body
func NewPutSettingsDeviceLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/location")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceMainsvoltageRequest generates requests for GetSettingsDeviceMainsvoltage
func NewGetSettingsDeviceMainsvoltageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/mainsvoltage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceMainsvoltageRequest generates requests for OptionsSettingsDeviceMainsvoltage
func NewOptionsSettingsDeviceMainsvoltageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/mainsvoltage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceMainsvoltageRequest calls the generic PutSettingsDeviceMainsvoltage builder with application/json body
func NewPutSettingsDeviceMainsvoltageRequest(server string, body PutSettingsDeviceMainsvoltageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceMainsvoltageRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceMainsvoltageRequestWithBody generates requests for PutSettingsDeviceMainsvoltage with any type of body
func NewPutSettingsDeviceMainsvoltageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/mainsvoltage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceNameRequest generates requests for GetSettingsDeviceName
func NewGetSettingsDeviceNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceNameRequest generates requests for OptionsSettingsDeviceName
func NewOptionsSettingsDeviceNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceNameRequest calls the generic PutSettingsDeviceName builder with application/json body
func NewPutSettingsDeviceNameRequest(server string, body PutSettingsDeviceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceNameRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceNameRequestWithBody generates requests for PutSettingsDeviceName with any type of body
func NewPutSettingsDeviceNameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceNetworkRequest generates requests for GetSettingsDeviceNetwork
func NewGetSettingsDeviceNetworkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsDeviceNetworkRequest generates requests for OptionsSettingsDeviceNetwork
func NewOptionsSettingsDeviceNetworkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceNetworkRequest calls the generic PutSettingsDeviceNetwork builder with application/json body
func NewPutSettingsDeviceNetworkRequest(server string, body PutSettingsDeviceNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceNetworkRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceNetworkRequestWithBody generates requests for PutSettingsDeviceNetwork with any type of body
func NewPutSettingsDeviceNetworkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/network")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceRemotemuteRequest generates requests for GetSettingsDeviceRemotemute
func NewGetSettingsDeviceRemotemuteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/remotemute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceRemotemuteRequest calls the generic PutSettingsDeviceRemotemute builder with application/json body
func NewPutSettingsDeviceRemotemuteRequest(server string, body PutSettingsDeviceRemotemuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceRemotemuteRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceRemotemuteRequestWithBody generates requests for PutSettingsDeviceRemotemute with any type of body
func NewPutSettingsDeviceRemotemuteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/remotemute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceSyslogRequest generates requests for GetSettingsDeviceSyslog
func NewGetSettingsDeviceSyslogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/syslog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceSyslogRequest calls the generic PutSettingsDeviceSyslog builder with application/json body
func NewPutSettingsDeviceSyslogRequest(server string, body PutSettingsDeviceSyslogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceSyslogRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceSyslogRequestWithBody generates requests for PutSettingsDeviceSyslog with any type of body
func NewPutSettingsDeviceSyslogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/syslog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceTimeRequest generates requests for GetSettingsDeviceTime
func NewGetSettingsDeviceTimeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceTimeRequest calls the generic PutSettingsDeviceTime builder with application/json body
func NewPutSettingsDeviceTimeRequest(server string, body PutSettingsDeviceTimeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceTimeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceTimeRequestWithBody generates requests for PutSettingsDeviceTime with any type of body
func NewPutSettingsDeviceTimeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceTimeCurrentRequest generates requests for GetSettingsDeviceTimeCurrent
func NewGetSettingsDeviceTimeCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceTimeCurrentRequest calls the generic PutSettingsDeviceTimeCurrent builder with application/json body
func NewPutSettingsDeviceTimeCurrentRequest(server string, body PutSettingsDeviceTimeCurrentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceTimeCurrentRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceTimeCurrentRequestWithBody generates requests for PutSettingsDeviceTimeCurrent with any type of body
func NewPutSettingsDeviceTimeCurrentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsDeviceTimeTimezoneRequest generates requests for GetSettingsDeviceTimeTimezone
func NewGetSettingsDeviceTimeTimezoneRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsDeviceTimeTimezoneRequest calls the generic PutSettingsDeviceTimeTimezone builder with application/json body
func NewPutSettingsDeviceTimeTimezoneRequest(server string, body PutSettingsDeviceTimeTimezoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsDeviceTimeTimezoneRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsDeviceTimeTimezoneRequestWithBody generates requests for PutSettingsDeviceTimeTimezone with any type of body
func NewPutSettingsDeviceTimeTimezoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/device/time/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceRequest generates requests for GetSettingsInterface
func NewGetSettingsInterfaceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceRequest calls the generic PutSettingsInterface builder with application/json body
func NewPutSettingsInterfaceRequest(server string, body PutSettingsInterfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsInterfaceRequestWithBody generates requests for PutSettingsInterface with any type of body
func NewPutSettingsInterfaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesRequest generates requests for GetSettingsInterfaceInterfaces
func NewGetSettingsInterfaceInterfacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsInterfaceInterfacesRequest generates requests for OptionsSettingsInterfaceInterfaces
func NewOptionsSettingsInterfaceInterfacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesRequest calls the generic PutSettingsInterfaceInterfaces builder with application/json body
func NewPutSettingsInterfaceInterfacesRequest(server string, body PutSettingsInterfaceInterfacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesRequestWithBody generates requests for PutSettingsInterfaceInterfaces with any type of body
func NewPutSettingsInterfaceInterfacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdRequest generates requests for GetSettingsInterfaceInterfacesInterfaceId
func NewGetSettingsInterfaceInterfacesInterfaceIdRequest(server string, interfaceId InterfaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdRequest calls the generic PutSettingsInterfaceInterfacesInterfaceId builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdRequest(server string, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdRequestWithBody(server, interfaceId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceId with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdRequestWithBody(server string, interfaceId InterfaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdInputchannel
func NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelRequest(server string, interfaceId InterfaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdInputchannel builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequest(server string, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequestWithBody(server, interfaceId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdInputchannel with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelRequestWithBody(server string, interfaceId InterfaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId
func NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(server string, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequestWithBody(server, interfaceId, channelId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdRequestWithBody(server string, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName
func NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequest(server string, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequestWithBody(server, interfaceId, channelId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameRequestWithBody(server string, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch
func NewGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s/patch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequest(server string, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequestWithBody(server, interfaceId, channelId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchRequestWithBody(server string, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/inputchannel/%s/patch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdOutputchannel
func NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest(server string, interfaceId InterfaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdOutputchannel builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequest(server string, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequestWithBody(server, interfaceId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdOutputchannel with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelRequestWithBody(server string, interfaceId InterfaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId
func NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequest(server string, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequestWithBody(server, interfaceId, channelId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdRequestWithBody(server string, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest generates requests for GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch
func NewGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel/%s/patch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest generates requests for OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch
func NewOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel/%s/patch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest calls the generic PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch builder with application/json body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequest(server string, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequestWithBody(server, interfaceId, channelId, "application/json", bodyReader)
}

// NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequestWithBody generates requests for PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch with any type of body
func NewPutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchRequestWithBody(server string, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/interfaces/%s/outputchannel/%s/patch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceMadithroughRequest generates requests for GetSettingsInterfaceMadithrough
func NewGetSettingsInterfaceMadithroughRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/madithrough")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsInterfaceMadithroughRequest generates requests for OptionsSettingsInterfaceMadithrough
func NewOptionsSettingsInterfaceMadithroughRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/madithrough")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceMadithroughRequest calls the generic PutSettingsInterfaceMadithrough builder with application/json body
func NewPutSettingsInterfaceMadithroughRequest(server string, body PutSettingsInterfaceMadithroughJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceMadithroughRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsInterfaceMadithroughRequestWithBody generates requests for PutSettingsInterfaceMadithrough with any type of body
func NewPutSettingsInterfaceMadithroughRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/madithrough")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsInterfaceSyncRequest generates requests for GetSettingsInterfaceSync
func NewGetSettingsInterfaceSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSettingsInterfaceSyncRequest generates requests for OptionsSettingsInterfaceSync
func NewOptionsSettingsInterfaceSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsInterfaceSyncRequest calls the generic PutSettingsInterfaceSync builder with application/json body
func NewPutSettingsInterfaceSyncRequest(server string, body PutSettingsInterfaceSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsInterfaceSyncRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsInterfaceSyncRequestWithBody generates requests for PutSettingsInterfaceSync with any type of body
func NewPutSettingsInterfaceSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/interface/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSettingsSaveRequest generates requests for PutSettingsSave
func NewPutSettingsSaveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/save")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpeakerpresetRequest generates requests for GetSpeakerpreset
func NewGetSpeakerpresetRequest(server string, params *GetSpeakerpresetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speakerpreset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Speakername != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speakername", runtime.ParamLocationQuery, *params.Speakername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manufacturer != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "manufacturer", runtime.ParamLocationQuery, *params.Manufacturer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Password != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, params.ChannelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsSpeakerpresetRequest generates requests for OptionsSpeakerpreset
func NewOptionsSpeakerpresetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speakerpreset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSpeakerpresetRequest calls the generic PutSpeakerpreset builder with application/json body
func NewPutSpeakerpresetRequest(server string, params *PutSpeakerpresetParams, body PutSpeakerpresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSpeakerpresetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutSpeakerpresetRequestWithBody generates requests for PutSpeakerpreset with any type of body
func NewPutSpeakerpresetRequestWithBody(server string, params *PutSpeakerpresetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speakerpreset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GetMetaData != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "getMetaData", runtime.ParamLocationQuery, *params.GetMetaData); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChannelId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Password != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelRequest generates requests for GetStatusChannel
func NewGetStatusChannelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelRequest generates requests for OptionsStatusChannel
func NewOptionsStatusChannelRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdRequest generates requests for GetStatusChannelChannelId
func NewGetStatusChannelChannelIdRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdActiveRequest generates requests for GetStatusChannelChannelIdActive
func NewGetStatusChannelChannelIdActiveRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAmpRequest generates requests for GetStatusChannelChannelIdAmp
func NewGetStatusChannelChannelIdAmpRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/amp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdAmpRequest generates requests for OptionsStatusChannelChannelIdAmp
func NewOptionsStatusChannelChannelIdAmpRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/amp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerRequest generates requests for GetStatusChannelChannelIdAudioanalyzer
func NewGetStatusChannelChannelIdAudioanalyzerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerCurrentRequest generates requests for GetStatusChannelChannelIdAudioanalyzerCurrent
func NewGetStatusChannelChannelIdAudioanalyzerCurrentRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/current", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerCurrentRmsRequest generates requests for GetStatusChannelChannelIdAudioanalyzerCurrentRms
func NewGetStatusChannelChannelIdAudioanalyzerCurrentRmsRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/current/rms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest generates requests for GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum
func NewGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/current/spectrum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest generates requests for OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum
func NewOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/current/spectrum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerImpedanceRequest generates requests for GetStatusChannelChannelIdAudioanalyzerImpedance
func NewGetStatusChannelChannelIdAudioanalyzerImpedanceRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/impedance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceRequest generates requests for OptionsStatusChannelChannelIdAudioanalyzerImpedance
func NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/impedance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest generates requests for GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary
func NewGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/impedance_momentary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest generates requests for OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary
func NewOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/impedance_momentary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerVoltageRequest generates requests for GetStatusChannelChannelIdAudioanalyzerVoltage
func NewGetStatusChannelChannelIdAudioanalyzerVoltageRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/voltage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerVoltageRmsRequest generates requests for GetStatusChannelChannelIdAudioanalyzerVoltageRms
func NewGetStatusChannelChannelIdAudioanalyzerVoltageRmsRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/voltage/rms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest generates requests for GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum
func NewGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/voltage/spectrum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest generates requests for OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum
func NewOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/audioanalyzer/voltage/spectrum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdCurrentRequest generates requests for GetStatusChannelChannelIdCurrent
func NewGetStatusChannelChannelIdCurrentRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/current", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdCurrentRequest generates requests for OptionsStatusChannelChannelIdCurrent
func NewOptionsStatusChannelChannelIdCurrentRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/current", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdDspDelayRequest generates requests for GetStatusChannelChannelIdDspDelay
func NewGetStatusChannelChannelIdDspDelayRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/delay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdDspEqRequest generates requests for GetStatusChannelChannelIdDspEq
func NewGetStatusChannelChannelIdDspEqRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/eq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdDspLevelRequest generates requests for GetStatusChannelChannelIdDspLevel
func NewGetStatusChannelChannelIdDspLevelRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdDspLevelRequest generates requests for OptionsStatusChannelChannelIdDspLevel
func NewOptionsStatusChannelChannelIdDspLevelRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdDspReductionRequest generates requests for GetStatusChannelChannelIdDspReduction
func NewGetStatusChannelChannelIdDspReductionRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/reduction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdDspReductionRequest generates requests for OptionsStatusChannelChannelIdDspReduction
func NewOptionsStatusChannelChannelIdDspReductionRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/dsp/reduction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdErrorRequest generates requests for GetStatusChannelChannelIdError
func NewGetStatusChannelChannelIdErrorRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/error", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdPowerRequest generates requests for GetStatusChannelChannelIdPower
func NewGetStatusChannelChannelIdPowerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/power", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdPowerRequest generates requests for OptionsStatusChannelChannelIdPower
func NewOptionsStatusChannelChannelIdPowerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/power", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdSpeakerRequest generates requests for GetStatusChannelChannelIdSpeaker
func NewGetStatusChannelChannelIdSpeakerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/speaker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdSpeakerRequest generates requests for OptionsStatusChannelChannelIdSpeaker
func NewOptionsStatusChannelChannelIdSpeakerRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/speaker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusChannelChannelIdVoltageRequest generates requests for GetStatusChannelChannelIdVoltage
func NewGetStatusChannelChannelIdVoltageRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/voltage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusChannelChannelIdVoltageRequest generates requests for OptionsStatusChannelChannelIdVoltage
func NewOptionsStatusChannelChannelIdVoltageRequest(server string, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/channel/%s/voltage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceRequest generates requests for GetStatusDevice
func NewGetStatusDeviceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceDanteRequest generates requests for GetStatusDeviceDante
func NewGetStatusDeviceDanteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/dante")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceErrorRequest generates requests for GetStatusDeviceError
func NewGetStatusDeviceErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceFanRequest generates requests for GetStatusDeviceFan
func NewGetStatusDeviceFanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/fan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusDeviceFanRequest generates requests for OptionsStatusDeviceFan
func NewOptionsStatusDeviceFanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/fan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceFpgaRequest generates requests for GetStatusDeviceFpga
func NewGetStatusDeviceFpgaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/fpga")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDevicePsuRequest generates requests for GetStatusDevicePsu
func NewGetStatusDevicePsuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/psu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusDevicePsuRequest generates requests for OptionsStatusDevicePsu
func NewOptionsStatusDevicePsuRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/psu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusDeviceRemotemuteRequest generates requests for GetStatusDeviceRemotemute
func NewGetStatusDeviceRemotemuteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/device/remotemute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceRequest generates requests for GetStatusInterface
func NewGetStatusInterfaceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceInterfacesRequest generates requests for GetStatusInterfaceInterfaces
func NewGetStatusInterfaceInterfacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/interfaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsStatusInterfaceInterfacesRequest generates requests for OptionsStatusInterfaceInterfaces
func NewOptionsStatusInterfaceInterfacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/interfaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceInterfacesInterfaceIdRequest generates requests for GetStatusInterfaceInterfacesInterfaceId
func NewGetStatusInterfaceInterfacesInterfaceIdRequest(server string, interfaceId InterfaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/interfaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceInterfacesInterfaceIdInputchannelRequest generates requests for GetStatusInterfaceInterfacesInterfaceIdInputchannel
func NewGetStatusInterfaceInterfacesInterfaceIdInputchannelRequest(server string, interfaceId InterfaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/interfaces/%s/inputchannel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest generates requests for GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId
func NewGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdRequest(server string, interfaceId InterfaceId, channelId ChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interface_id", runtime.ParamLocationPath, interfaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel_id", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/interfaces/%s/inputchannel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusInterfaceInternalRequest generates requests for GetStatusInterfaceInternal
func NewGetStatusInterfaceInternalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/interface/internal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusSaveRequest generates requests for GetStatusSave
func NewGetStatusSaveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/save")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteStatusSyslogRequest generates requests for DeleteStatusSyslog
func NewDeleteStatusSyslogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/syslog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusSyslogRequest generates requests for GetStatusSyslog
func NewGetStatusSyslogRequest(server string, params *GetStatusSyslogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/syslog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Lines != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusSystemRequest generates requests for GetStatusSystem
func NewGetStatusSystemRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetInfoDevice request
	GetInfoDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoDeviceResponse, error)

	// PutPresetRecallPresetName request
	PutPresetRecallPresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*PutPresetRecallPresetNameResponse, error)

	// OptionsPresetStorage request
	OptionsPresetStorageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsPresetStorageResponse, error)

	// DeletePresetStoragePresetName request
	DeletePresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*DeletePresetStoragePresetNameResponse, error)

	// GetPresetStoragePresetName request
	GetPresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*GetPresetStoragePresetNameResponse, error)

	// PutPresetStoragePresetName request with any body
	PutPresetStoragePresetNameWithBodyWithResponse(ctx context.Context, presetName PresetName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPresetStoragePresetNameResponse, error)

	PutPresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, body PutPresetStoragePresetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPresetStoragePresetNameResponse, error)

	// GetSettings request
	GetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsResponse, error)

	// PutSettings request
	PutSettingsWithResponse(ctx context.Context, params *PutSettingsParams, reqEditors ...RequestEditorFn) (*PutSettingsResponse, error)

	// GetSettingsChannel request
	GetSettingsChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsChannelResponse, error)

	// OptionsSettingsChannel request
	OptionsSettingsChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelResponse, error)

	// PutSettingsChannel request with any body
	PutSettingsChannelWithBodyWithResponse(ctx context.Context, params *PutSettingsChannelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelResponse, error)

	PutSettingsChannelWithResponse(ctx context.Context, params *PutSettingsChannelParams, body PutSettingsChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelResponse, error)

	// GetSettingsChannelChannelId request
	GetSettingsChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdResponse, error)

	// PutSettingsChannelChannelId request with any body
	PutSettingsChannelChannelIdWithBodyWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdResponse, error)

	PutSettingsChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, body PutSettingsChannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdResponse, error)

	// GetSettingsChannelChannelIdAmpenable request
	GetSettingsChannelChannelIdAmpenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAmpenableResponse, error)

	// PutSettingsChannelChannelIdAmpenable request with any body
	PutSettingsChannelChannelIdAmpenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAmpenableResponse, error)

	PutSettingsChannelChannelIdAmpenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAmpenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAmpenableResponse, error)

	// GetSettingsChannelChannelIdAudioanalyzer request
	GetSettingsChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerResponse, error)

	// PutSettingsChannelChannelIdAudioanalyzer request with any body
	PutSettingsChannelChannelIdAudioanalyzerWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerResponse, error)

	PutSettingsChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerResponse, error)

	// GetSettingsChannelChannelIdAudioanalyzerEnable request
	GetSettingsChannelChannelIdAudioanalyzerEnableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerEnableResponse, error)

	// PutSettingsChannelChannelIdAudioanalyzerEnable request with any body
	PutSettingsChannelChannelIdAudioanalyzerEnableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerEnableResponse, error)

	PutSettingsChannelChannelIdAudioanalyzerEnableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerEnableResponse, error)

	// GetSettingsChannelChannelIdAudioanalyzerReference request
	GetSettingsChannelChannelIdAudioanalyzerReferenceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferenceResponse, error)

	// PutSettingsChannelChannelIdAudioanalyzerReference request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferenceWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceResponse, error)

	PutSettingsChannelChannelIdAudioanalyzerReferenceWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceResponse, error)

	// GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance request
	GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error)

	// OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance request
	OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error)

	// PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error)

	PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error)

	// GetSettingsChannelChannelIdAudioanalyzerReferencePhase request
	GetSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error)

	// OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase request
	OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error)

	// PutSettingsChannelChannelIdAudioanalyzerReferencePhase request with any body
	PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error)

	PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error)

	// GetSettingsChannelChannelIdBridgeenable request
	GetSettingsChannelChannelIdBridgeenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdBridgeenableResponse, error)

	// PutSettingsChannelChannelIdBridgeenable request with any body
	PutSettingsChannelChannelIdBridgeenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdBridgeenableResponse, error)

	PutSettingsChannelChannelIdBridgeenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdBridgeenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdBridgeenableResponse, error)

	// GetSettingsChannelChannelIdDsp request
	GetSettingsChannelChannelIdDspWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspResponse, error)

	// GetSettingsChannelChannelIdDspCurrentlimiter request
	GetSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspCurrentlimiterResponse, error)

	// OptionsSettingsChannelChannelIdDspCurrentlimiter request
	OptionsSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspCurrentlimiterResponse, error)

	// PutSettingsChannelChannelIdDspCurrentlimiter request with any body
	PutSettingsChannelChannelIdDspCurrentlimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspCurrentlimiterResponse, error)

	PutSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspCurrentlimiterResponse, error)

	// GetSettingsChannelChannelIdDspDelay request
	GetSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspDelayResponse, error)

	// OptionsSettingsChannelChannelIdDspDelay request
	OptionsSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspDelayResponse, error)

	// PutSettingsChannelChannelIdDspDelay request with any body
	PutSettingsChannelChannelIdDspDelayWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspDelayResponse, error)

	PutSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspDelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspDelayResponse, error)

	// GetSettingsChannelChannelIdDspEq request
	GetSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqResponse, error)

	// OptionsSettingsChannelChannelIdDspEq request
	OptionsSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspEqResponse, error)

	// PostSettingsChannelChannelIdDspEq request with any body
	PostSettingsChannelChannelIdDspEqWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSettingsChannelChannelIdDspEqResponse, error)

	PostSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, body PostSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSettingsChannelChannelIdDspEqResponse, error)

	// PutSettingsChannelChannelIdDspEq request with any body
	PutSettingsChannelChannelIdDspEqWithBodyWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqResponse, error)

	PutSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, body PutSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqResponse, error)

	// DeleteSettingsChannelChannelIdDspEqEqId request
	DeleteSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*DeleteSettingsChannelChannelIdDspEqEqIdResponse, error)

	// GetSettingsChannelChannelIdDspEqEqId request
	GetSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqEqIdResponse, error)

	// PutSettingsChannelChannelIdDspEqEqId request with any body
	PutSettingsChannelChannelIdDspEqEqIdWithBodyWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqEqIdResponse, error)

	PutSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, body PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqEqIdResponse, error)

	// GetSettingsChannelChannelIdDspEqenable request
	GetSettingsChannelChannelIdDspEqenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqenableResponse, error)

	// PutSettingsChannelChannelIdDspEqenable request with any body
	PutSettingsChannelChannelIdDspEqenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqenableResponse, error)

	PutSettingsChannelChannelIdDspEqenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspEqenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqenableResponse, error)

	// GetSettingsChannelChannelIdDspFir request
	GetSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspFirResponse, error)

	// OptionsSettingsChannelChannelIdDspFir request
	OptionsSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspFirResponse, error)

	// PutSettingsChannelChannelIdDspFir request with any body
	PutSettingsChannelChannelIdDspFirWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspFirResponse, error)

	PutSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspFirJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspFirResponse, error)

	// GetSettingsChannelChannelIdDspGroupmute request
	GetSettingsChannelChannelIdDspGroupmuteWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspGroupmuteResponse, error)

	// GetSettingsChannelChannelIdDspMute request
	GetSettingsChannelChannelIdDspMuteWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspMuteResponse, error)

	// PutSettingsChannelChannelIdDspMute request with any body
	PutSettingsChannelChannelIdDspMuteWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspMuteResponse, error)

	PutSettingsChannelChannelIdDspMuteWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspMuteResponse, error)

	// GetSettingsChannelChannelIdDspPatch request
	GetSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPatchResponse, error)

	// OptionsSettingsChannelChannelIdDspPatch request
	OptionsSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspPatchResponse, error)

	// PutSettingsChannelChannelIdDspPatch request with any body
	PutSettingsChannelChannelIdDspPatchWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPatchResponse, error)

	PutSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPatchResponse, error)

	// GetSettingsChannelChannelIdDspPatchPatchId request
	GetSettingsChannelChannelIdDspPatchPatchIdWithResponse(ctx context.Context, channelId ChannelId, patchId PatchId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPatchPatchIdResponse, error)

	// GetSettingsChannelChannelIdDspPhase request
	GetSettingsChannelChannelIdDspPhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPhaseResponse, error)

	// PutSettingsChannelChannelIdDspPhase request with any body
	PutSettingsChannelChannelIdDspPhaseWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPhaseResponse, error)

	PutSettingsChannelChannelIdDspPhaseWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPhaseResponse, error)

	// GetSettingsChannelChannelIdDspPowerlimiter request
	GetSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPowerlimiterResponse, error)

	// OptionsSettingsChannelChannelIdDspPowerlimiter request
	OptionsSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspPowerlimiterResponse, error)

	// PutSettingsChannelChannelIdDspPowerlimiter request with any body
	PutSettingsChannelChannelIdDspPowerlimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPowerlimiterResponse, error)

	PutSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPowerlimiterResponse, error)

	// GetSettingsChannelChannelIdDspVoltagelimiter request
	GetSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVoltagelimiterResponse, error)

	// OptionsSettingsChannelChannelIdDspVoltagelimiter request
	OptionsSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspVoltagelimiterResponse, error)

	// PutSettingsChannelChannelIdDspVoltagelimiter request with any body
	PutSettingsChannelChannelIdDspVoltagelimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVoltagelimiterResponse, error)

	PutSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVoltagelimiterResponse, error)

	// GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId request
	GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdWithResponse(ctx context.Context, channelId ChannelId, voltagelimiterId VoltagelimiterId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse, error)

	// GetSettingsChannelChannelIdDspVolume request
	GetSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVolumeResponse, error)

	// OptionsSettingsChannelChannelIdDspVolume request
	OptionsSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspVolumeResponse, error)

	// PutSettingsChannelChannelIdDspVolume request with any body
	PutSettingsChannelChannelIdDspVolumeWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVolumeResponse, error)

	PutSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVolumeResponse, error)

	// GetSettingsChannelChannelIdName request
	GetSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdNameResponse, error)

	// OptionsSettingsChannelChannelIdName request
	OptionsSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdNameResponse, error)

	// PutSettingsChannelChannelIdName request with any body
	PutSettingsChannelChannelIdNameWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdNameResponse, error)

	PutSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdNameResponse, error)

	// GetSettingsChannelChannelIdSpeaker request
	GetSettingsChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerResponse, error)

	// PutSettingsChannelChannelIdSpeaker request with any body
	PutSettingsChannelChannelIdSpeakerWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerResponse, error)

	PutSettingsChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerResponse, error)

	// GetSettingsChannelChannelIdSpeakerDetection request
	GetSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerDetectionResponse, error)

	// OptionsSettingsChannelChannelIdSpeakerDetection request
	OptionsSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdSpeakerDetectionResponse, error)

	// PutSettingsChannelChannelIdSpeakerDetection request with any body
	PutSettingsChannelChannelIdSpeakerDetectionWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerDetectionResponse, error)

	PutSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerDetectionResponse, error)

	// DeleteSettingsChannelChannelIdSpeakerPreset request
	DeleteSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*DeleteSettingsChannelChannelIdSpeakerPresetResponse, error)

	// GetSettingsChannelChannelIdSpeakerPreset request
	GetSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerPresetResponse, error)

	// PutSettingsChannelChannelIdSpeakerPreset request with any body
	PutSettingsChannelChannelIdSpeakerPresetWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerPresetResponse, error)

	PutSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerPresetResponse, error)

	// GetSettingsDevice request
	GetSettingsDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceResponse, error)

	// PutSettingsDevice request with any body
	PutSettingsDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceResponse, error)

	PutSettingsDeviceWithResponse(ctx context.Context, body PutSettingsDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceResponse, error)

	// GetSettingsDeviceDante request
	GetSettingsDeviceDanteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteResponse, error)

	// GetSettingsDeviceDanteIdentity request
	GetSettingsDeviceDanteIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteIdentityResponse, error)

	// PutSettingsDeviceDanteIdentity request with any body
	PutSettingsDeviceDanteIdentityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteIdentityResponse, error)

	PutSettingsDeviceDanteIdentityWithResponse(ctx context.Context, body PutSettingsDeviceDanteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteIdentityResponse, error)

	// GetSettingsDeviceDanteNetwork request
	GetSettingsDeviceDanteNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteNetworkResponse, error)

	// OptionsSettingsDeviceDanteNetwork request
	OptionsSettingsDeviceDanteNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDanteNetworkResponse, error)

	// PutSettingsDeviceDanteNetwork request with any body
	PutSettingsDeviceDanteNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteNetworkResponse, error)

	PutSettingsDeviceDanteNetworkWithResponse(ctx context.Context, body PutSettingsDeviceDanteNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteNetworkResponse, error)

	// GetSettingsDeviceDsp request
	GetSettingsDeviceDspWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspResponse, error)

	// PutSettingsDeviceDsp request with any body
	PutSettingsDeviceDspWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspResponse, error)

	PutSettingsDeviceDspWithResponse(ctx context.Context, body PutSettingsDeviceDspJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspResponse, error)

	// GetSettingsDeviceDspMute request
	GetSettingsDeviceDspMuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspMuteResponse, error)

	// PutSettingsDeviceDspMute request with any body
	PutSettingsDeviceDspMuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspMuteResponse, error)

	PutSettingsDeviceDspMuteWithResponse(ctx context.Context, body PutSettingsDeviceDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspMuteResponse, error)

	// GetSettingsDeviceDspStartupmute request
	GetSettingsDeviceDspStartupmuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspStartupmuteResponse, error)

	// PutSettingsDeviceDspStartupmute request with any body
	PutSettingsDeviceDspStartupmuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspStartupmuteResponse, error)

	PutSettingsDeviceDspStartupmuteWithResponse(ctx context.Context, body PutSettingsDeviceDspStartupmuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspStartupmuteResponse, error)

	// GetSettingsDeviceDspVolume request
	GetSettingsDeviceDspVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspVolumeResponse, error)

	// OptionsSettingsDeviceDspVolume request
	OptionsSettingsDeviceDspVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDspVolumeResponse, error)

	// PutSettingsDeviceDspVolume request with any body
	PutSettingsDeviceDspVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumeResponse, error)

	PutSettingsDeviceDspVolumeWithResponse(ctx context.Context, body PutSettingsDeviceDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumeResponse, error)

	// GetSettingsDeviceDspVolumeramp request
	GetSettingsDeviceDspVolumerampWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspVolumerampResponse, error)

	// OptionsSettingsDeviceDspVolumeramp request
	OptionsSettingsDeviceDspVolumerampWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDspVolumerampResponse, error)

	// PutSettingsDeviceDspVolumeramp request with any body
	PutSettingsDeviceDspVolumerampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumerampResponse, error)

	PutSettingsDeviceDspVolumerampWithResponse(ctx context.Context, body PutSettingsDeviceDspVolumerampJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumerampResponse, error)

	// GetSettingsDeviceFan request
	GetSettingsDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceFanResponse, error)

	// PutSettingsDeviceFan request with any body
	PutSettingsDeviceFanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceFanResponse, error)

	PutSettingsDeviceFanWithResponse(ctx context.Context, body PutSettingsDeviceFanJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceFanResponse, error)

	// GetSettingsDeviceGrouping request
	GetSettingsDeviceGroupingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingResponse, error)

	// PutSettingsDeviceGrouping request with any body
	PutSettingsDeviceGroupingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingResponse, error)

	PutSettingsDeviceGroupingWithResponse(ctx context.Context, body PutSettingsDeviceGroupingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingResponse, error)

	// GetSettingsDeviceGroupingGroups request
	GetSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsResponse, error)

	// OptionsSettingsDeviceGroupingGroups request
	OptionsSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsResponse, error)

	// PutSettingsDeviceGroupingGroups request with any body
	PutSettingsDeviceGroupingGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsResponse, error)

	PutSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, body PutSettingsDeviceGroupingGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupId request
	GetSettingsDeviceGroupingGroupsGroupIdWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdAssign request
	GetSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdAssignResponse, error)

	// OptionsSettingsDeviceGroupingGroupsGroupIdAssign request
	OptionsSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse, error)

	// PutSettingsDeviceGroupingGroupsGroupIdAssign request with any body
	PutSettingsDeviceGroupingGroupsGroupIdAssignWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdAssignResponse, error)

	PutSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdAssignResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId request
	GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdWithResponse(ctx context.Context, groupId GroupId, assignId AssignId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdEnable request
	GetSettingsDeviceGroupingGroupsGroupIdEnableWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdEnableResponse, error)

	// PutSettingsDeviceGroupingGroupsGroupIdEnable request with any body
	PutSettingsDeviceGroupingGroupsGroupIdEnableWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdEnableResponse, error)

	PutSettingsDeviceGroupingGroupsGroupIdEnableWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdEnableResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdMute request
	GetSettingsDeviceGroupingGroupsGroupIdMuteWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdMuteResponse, error)

	// PutSettingsDeviceGroupingGroupsGroupIdMute request with any body
	PutSettingsDeviceGroupingGroupsGroupIdMuteWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdMuteResponse, error)

	PutSettingsDeviceGroupingGroupsGroupIdMuteWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdMuteResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdName request
	GetSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdNameResponse, error)

	// OptionsSettingsDeviceGroupingGroupsGroupIdName request
	OptionsSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse, error)

	// PutSettingsDeviceGroupingGroupsGroupIdName request with any body
	PutSettingsDeviceGroupingGroupsGroupIdNameWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdNameResponse, error)

	PutSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdNameResponse, error)

	// GetSettingsDeviceGroupingGroupsGroupIdSolo request
	GetSettingsDeviceGroupingGroupsGroupIdSoloWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdSoloResponse, error)

	// PutSettingsDeviceGroupingGroupsGroupIdSolo request with any body
	PutSettingsDeviceGroupingGroupsGroupIdSoloWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdSoloResponse, error)

	PutSettingsDeviceGroupingGroupsGroupIdSoloWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdSoloResponse, error)

	// GetSettingsDeviceGroupingSoloautoclear request
	GetSettingsDeviceGroupingSoloautoclearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingSoloautoclearResponse, error)

	// PutSettingsDeviceGroupingSoloautoclear request with any body
	PutSettingsDeviceGroupingSoloautoclearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingSoloautoclearResponse, error)

	PutSettingsDeviceGroupingSoloautoclearWithResponse(ctx context.Context, body PutSettingsDeviceGroupingSoloautoclearJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingSoloautoclearResponse, error)

	// GetSettingsDeviceIdentify request
	GetSettingsDeviceIdentifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceIdentifyResponse, error)

	// PutSettingsDeviceIdentify request with any body
	PutSettingsDeviceIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceIdentifyResponse, error)

	PutSettingsDeviceIdentifyWithResponse(ctx context.Context, body PutSettingsDeviceIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceIdentifyResponse, error)

	// GetSettingsDeviceLocation request
	GetSettingsDeviceLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceLocationResponse, error)

	// OptionsSettingsDeviceLocation request
	OptionsSettingsDeviceLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceLocationResponse, error)

	// PutSettingsDeviceLocation request with any body
	PutSettingsDeviceLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceLocationResponse, error)

	PutSettingsDeviceLocationWithResponse(ctx context.Context, body PutSettingsDeviceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceLocationResponse, error)

	// GetSettingsDeviceMainsvoltage request
	GetSettingsDeviceMainsvoltageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceMainsvoltageResponse, error)

	// OptionsSettingsDeviceMainsvoltage request
	OptionsSettingsDeviceMainsvoltageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceMainsvoltageResponse, error)

	// PutSettingsDeviceMainsvoltage request with any body
	PutSettingsDeviceMainsvoltageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceMainsvoltageResponse, error)

	PutSettingsDeviceMainsvoltageWithResponse(ctx context.Context, body PutSettingsDeviceMainsvoltageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceMainsvoltageResponse, error)

	// GetSettingsDeviceName request
	GetSettingsDeviceNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceNameResponse, error)

	// OptionsSettingsDeviceName request
	OptionsSettingsDeviceNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceNameResponse, error)

	// PutSettingsDeviceName request with any body
	PutSettingsDeviceNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNameResponse, error)

	PutSettingsDeviceNameWithResponse(ctx context.Context, body PutSettingsDeviceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNameResponse, error)

	// GetSettingsDeviceNetwork request
	GetSettingsDeviceNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceNetworkResponse, error)

	// OptionsSettingsDeviceNetwork request
	OptionsSettingsDeviceNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceNetworkResponse, error)

	// PutSettingsDeviceNetwork request with any body
	PutSettingsDeviceNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNetworkResponse, error)

	PutSettingsDeviceNetworkWithResponse(ctx context.Context, body PutSettingsDeviceNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNetworkResponse, error)

	// GetSettingsDeviceRemotemute request
	GetSettingsDeviceRemotemuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceRemotemuteResponse, error)

	// PutSettingsDeviceRemotemute request with any body
	PutSettingsDeviceRemotemuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceRemotemuteResponse, error)

	PutSettingsDeviceRemotemuteWithResponse(ctx context.Context, body PutSettingsDeviceRemotemuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceRemotemuteResponse, error)

	// GetSettingsDeviceSyslog request
	GetSettingsDeviceSyslogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceSyslogResponse, error)

	// PutSettingsDeviceSyslog request with any body
	PutSettingsDeviceSyslogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceSyslogResponse, error)

	PutSettingsDeviceSyslogWithResponse(ctx context.Context, body PutSettingsDeviceSyslogJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceSyslogResponse, error)

	// GetSettingsDeviceTime request
	GetSettingsDeviceTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeResponse, error)

	// PutSettingsDeviceTime request with any body
	PutSettingsDeviceTimeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeResponse, error)

	PutSettingsDeviceTimeWithResponse(ctx context.Context, body PutSettingsDeviceTimeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeResponse, error)

	// GetSettingsDeviceTimeCurrent request
	GetSettingsDeviceTimeCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeCurrentResponse, error)

	// PutSettingsDeviceTimeCurrent request with any body
	PutSettingsDeviceTimeCurrentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeCurrentResponse, error)

	PutSettingsDeviceTimeCurrentWithResponse(ctx context.Context, body PutSettingsDeviceTimeCurrentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeCurrentResponse, error)

	// GetSettingsDeviceTimeTimezone request
	GetSettingsDeviceTimeTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeTimezoneResponse, error)

	// PutSettingsDeviceTimeTimezone request with any body
	PutSettingsDeviceTimeTimezoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeTimezoneResponse, error)

	PutSettingsDeviceTimeTimezoneWithResponse(ctx context.Context, body PutSettingsDeviceTimeTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeTimezoneResponse, error)

	// GetSettingsInterface request
	GetSettingsInterfaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceResponse, error)

	// PutSettingsInterface request with any body
	PutSettingsInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceResponse, error)

	PutSettingsInterfaceWithResponse(ctx context.Context, body PutSettingsInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceResponse, error)

	// GetSettingsInterfaceInterfaces request
	GetSettingsInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesResponse, error)

	// OptionsSettingsInterfaceInterfaces request
	OptionsSettingsInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceInterfacesResponse, error)

	// PutSettingsInterfaceInterfaces request with any body
	PutSettingsInterfaceInterfacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesResponse, error)

	PutSettingsInterfaceInterfacesWithResponse(ctx context.Context, body PutSettingsInterfaceInterfacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceId request
	GetSettingsInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannel request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannel request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch request
	GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch request with any body
	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannel request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannel request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error)

	// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request
	GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error)

	// OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request
	OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error)

	// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch request with any body
	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error)

	PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error)

	// GetSettingsInterfaceMadithrough request
	GetSettingsInterfaceMadithroughWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceMadithroughResponse, error)

	// OptionsSettingsInterfaceMadithrough request
	OptionsSettingsInterfaceMadithroughWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceMadithroughResponse, error)

	// PutSettingsInterfaceMadithrough request with any body
	PutSettingsInterfaceMadithroughWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceMadithroughResponse, error)

	PutSettingsInterfaceMadithroughWithResponse(ctx context.Context, body PutSettingsInterfaceMadithroughJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceMadithroughResponse, error)

	// GetSettingsInterfaceSync request
	GetSettingsInterfaceSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceSyncResponse, error)

	// OptionsSettingsInterfaceSync request
	OptionsSettingsInterfaceSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceSyncResponse, error)

	// PutSettingsInterfaceSync request with any body
	PutSettingsInterfaceSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceSyncResponse, error)

	PutSettingsInterfaceSyncWithResponse(ctx context.Context, body PutSettingsInterfaceSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceSyncResponse, error)

	// PutSettingsSave request
	PutSettingsSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutSettingsSaveResponse, error)

	// GetSpeakerpreset request
	GetSpeakerpresetWithResponse(ctx context.Context, params *GetSpeakerpresetParams, reqEditors ...RequestEditorFn) (*GetSpeakerpresetResponse, error)

	// OptionsSpeakerpreset request
	OptionsSpeakerpresetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSpeakerpresetResponse, error)

	// PutSpeakerpreset request with any body
	PutSpeakerpresetWithBodyWithResponse(ctx context.Context, params *PutSpeakerpresetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSpeakerpresetResponse, error)

	PutSpeakerpresetWithResponse(ctx context.Context, params *PutSpeakerpresetParams, body PutSpeakerpresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSpeakerpresetResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetStatusChannel request
	GetStatusChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusChannelResponse, error)

	// OptionsStatusChannel request
	OptionsStatusChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusChannelResponse, error)

	// GetStatusChannelChannelId request
	GetStatusChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdResponse, error)

	// GetStatusChannelChannelIdActive request
	GetStatusChannelChannelIdActiveWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdActiveResponse, error)

	// GetStatusChannelChannelIdAmp request
	GetStatusChannelChannelIdAmpWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAmpResponse, error)

	// OptionsStatusChannelChannelIdAmp request
	OptionsStatusChannelChannelIdAmpWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAmpResponse, error)

	// GetStatusChannelChannelIdAudioanalyzer request
	GetStatusChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrent request
	GetStatusChannelChannelIdAudioanalyzerCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrentRms request
	GetStatusChannelChannelIdAudioanalyzerCurrentRmsWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum request
	GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error)

	// OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum request
	OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerImpedance request
	GetStatusChannelChannelIdAudioanalyzerImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerImpedanceResponse, error)

	// OptionsStatusChannelChannelIdAudioanalyzerImpedance request
	OptionsStatusChannelChannelIdAudioanalyzerImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary request
	GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error)

	// OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary request
	OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltage request
	GetStatusChannelChannelIdAudioanalyzerVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltageRms request
	GetStatusChannelChannelIdAudioanalyzerVoltageRmsWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse, error)

	// GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum request
	GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error)

	// OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum request
	OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error)

	// GetStatusChannelChannelIdCurrent request
	GetStatusChannelChannelIdCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdCurrentResponse, error)

	// OptionsStatusChannelChannelIdCurrent request
	OptionsStatusChannelChannelIdCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdCurrentResponse, error)

	// GetStatusChannelChannelIdDspDelay request
	GetStatusChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspDelayResponse, error)

	// GetStatusChannelChannelIdDspEq request
	GetStatusChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspEqResponse, error)

	// GetStatusChannelChannelIdDspLevel request
	GetStatusChannelChannelIdDspLevelWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspLevelResponse, error)

	// OptionsStatusChannelChannelIdDspLevel request
	OptionsStatusChannelChannelIdDspLevelWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdDspLevelResponse, error)

	// GetStatusChannelChannelIdDspReduction request
	GetStatusChannelChannelIdDspReductionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspReductionResponse, error)

	// OptionsStatusChannelChannelIdDspReduction request
	OptionsStatusChannelChannelIdDspReductionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdDspReductionResponse, error)

	// GetStatusChannelChannelIdError request
	GetStatusChannelChannelIdErrorWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdErrorResponse, error)

	// GetStatusChannelChannelIdPower request
	GetStatusChannelChannelIdPowerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdPowerResponse, error)

	// OptionsStatusChannelChannelIdPower request
	OptionsStatusChannelChannelIdPowerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdPowerResponse, error)

	// GetStatusChannelChannelIdSpeaker request
	GetStatusChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdSpeakerResponse, error)

	// OptionsStatusChannelChannelIdSpeaker request
	OptionsStatusChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdSpeakerResponse, error)

	// GetStatusChannelChannelIdVoltage request
	GetStatusChannelChannelIdVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdVoltageResponse, error)

	// OptionsStatusChannelChannelIdVoltage request
	OptionsStatusChannelChannelIdVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdVoltageResponse, error)

	// GetStatusDevice request
	GetStatusDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceResponse, error)

	// GetStatusDeviceDante request
	GetStatusDeviceDanteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceDanteResponse, error)

	// GetStatusDeviceError request
	GetStatusDeviceErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceErrorResponse, error)

	// GetStatusDeviceFan request
	GetStatusDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceFanResponse, error)

	// OptionsStatusDeviceFan request
	OptionsStatusDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusDeviceFanResponse, error)

	// GetStatusDeviceFpga request
	GetStatusDeviceFpgaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceFpgaResponse, error)

	// GetStatusDevicePsu request
	GetStatusDevicePsuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDevicePsuResponse, error)

	// OptionsStatusDevicePsu request
	OptionsStatusDevicePsuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusDevicePsuResponse, error)

	// GetStatusDeviceRemotemute request
	GetStatusDeviceRemotemuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceRemotemuteResponse, error)

	// GetStatusInterface request
	GetStatusInterfaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceResponse, error)

	// GetStatusInterfaceInterfaces request
	GetStatusInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesResponse, error)

	// OptionsStatusInterfaceInterfaces request
	OptionsStatusInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusInterfaceInterfacesResponse, error)

	// GetStatusInterfaceInterfacesInterfaceId request
	GetStatusInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdResponse, error)

	// GetStatusInterfaceInterfacesInterfaceIdInputchannel request
	GetStatusInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse, error)

	// GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId request
	GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error)

	// GetStatusInterfaceInternal request
	GetStatusInterfaceInternalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInternalResponse, error)

	// GetStatusSave request
	GetStatusSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusSaveResponse, error)

	// DeleteStatusSyslog request
	DeleteStatusSyslogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteStatusSyslogResponse, error)

	// GetStatusSyslog request
	GetStatusSyslogWithResponse(ctx context.Context, params *GetStatusSyslogParams, reqEditors ...RequestEditorFn) (*GetStatusSyslogResponse, error)

	// GetStatusSystem request
	GetStatusSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusSystemResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetInfoDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceInfos
}

// Status returns HTTPResponse.Status
func (r GetInfoDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfoDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPresetRecallPresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *string `json:"success,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r PutPresetRecallPresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPresetRecallPresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsPresetStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PresetStorageOption
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsPresetStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsPresetStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePresetStoragePresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *string `json:"success,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeletePresetStoragePresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePresetStoragePresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPresetStoragePresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetPresetStoragePresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresetStoragePresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPresetStoragePresetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *string `json:"success,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r PutPresetStoragePresetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPresetStoragePresetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
}

// Status returns HTTPResponse.Status
func (r GetSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannels
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// format [MIN, MAX, STEP, UNIT]
		ChannelId *[]interface{} `json:"channel_id,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAmpenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAmpenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAmpenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAmpenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAmpenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAmpenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAudioanalyzerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannelAudioAnalyzer
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAudioanalyzerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAudioanalyzerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAudioanalyzerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAudioanalyzerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAudioanalyzerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAudioanalyzerEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAudioanalyzerEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAudioanalyzerEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAudioanalyzerEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAudioanalyzerEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAudioanalyzerEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAudioanalyzerReferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannelAudioAnalyzerReference
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAudioanalyzerReferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAudioanalyzerReferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAudioanalyzerReferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAudioanalyzerReferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAudioanalyzerReferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdBridgeenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdBridgeenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdBridgeenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdBridgeenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdBridgeenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdBridgeenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannelDsp
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspCurrentlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsCurrentlimiter
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspCurrentlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspCurrentlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspCurrentlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsCurrentlimiterOption
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspCurrentlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspCurrentlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspCurrentlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspCurrentlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspCurrentlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspDelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDelay
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspDelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspDelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspDelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDelayOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspDelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspDelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspDelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspDelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspDelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspEqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsEQs
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspEqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspEqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspEqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsEQOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspEqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspEqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSettingsChannelChannelIdDspEqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsEQ
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostSettingsChannelChannelIdDspEqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsChannelChannelIdDspEqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspEqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspEqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspEqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSettingsChannelChannelIdDspEqEqIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSettingsChannelChannelIdDspEqEqIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingsChannelChannelIdDspEqEqIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspEqEqIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsEQ
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspEqEqIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspEqEqIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspEqEqIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspEqEqIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspEqEqIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspEqenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspEqenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspEqenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspEqenableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspEqenableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspEqenableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspFirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsFIR
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspFirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspFirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspFirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsFIROptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspFirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspFirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspFirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspFirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspFirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspGroupmuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspGroupmuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspGroupmuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsPatches
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsPatchOption
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspPatchPatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsPatch
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspPatchPatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspPatchPatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspPhaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspPhaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspPhaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspPhaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspPhaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspPhaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspPowerlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsPowerlimiter
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspPowerlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspPowerlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspPowerlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsPowerlimiterOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspPowerlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspPowerlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspPowerlimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspPowerlimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspPowerlimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspVoltagelimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsVoltagelimiters
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspVoltagelimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspVoltagelimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspVoltagelimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsVoltagelimiterOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspVoltagelimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspVoltagelimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspVoltagelimiterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspVoltagelimiterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspVoltagelimiterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsVoltagelimiter
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Volume
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Length *int `json:"length,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdSpeakerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsSpeaker
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdSpeakerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdSpeakerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdSpeakerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdSpeakerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdSpeakerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdSpeakerDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsSpeakerDetection
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdSpeakerDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdSpeakerDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsChannelChannelIdSpeakerDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsSpeakerDetectionOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsChannelChannelIdSpeakerDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsChannelChannelIdSpeakerDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdSpeakerDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdSpeakerDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdSpeakerDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSettingsChannelChannelIdSpeakerPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSettingsChannelChannelIdSpeakerPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingsChannelChannelIdSpeakerPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsChannelChannelIdSpeakerPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsSpeakerPreset
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsChannelChannelIdSpeakerPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsChannelChannelIdSpeakerPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsChannelChannelIdSpeakerPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsChannelChannelIdSpeakerPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsChannelChannelIdSpeakerPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDevice
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDanteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDeviceDante
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDanteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDanteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDanteIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDanteIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDanteIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDanteIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDanteIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDanteIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDanteNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDeviceDanteNetwork
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDanteNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDanteNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceDanteNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDeviceDanteNetworkOption
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceDanteNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceDanteNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDanteNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDanteNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDanteNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDspResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsDeviceDsp
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDspResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDspResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDspResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDspResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDspResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDspMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDspMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDspMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDspMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDspMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDspMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDspStartupmuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDspStartupmuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDspStartupmuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDspStartupmuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDspStartupmuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDspStartupmuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Volume
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDspVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDspVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDspVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceDspVolumerampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsVolumeramp
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceDspVolumerampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceDspVolumerampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceDspVolumerampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// format [MIN, MAX, STEP, UNIT]
		Time *[]interface{} `json:"time,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceDspVolumerampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceDspVolumerampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceDspVolumerampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceDspVolumerampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceDspVolumerampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceFanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsFan
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceFanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceFanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceFanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceFanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceFanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsGrouping
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsGroups
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceGroupingGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// format [MIN, MAX, STEP, UNIT]
		ChannelId *[]interface{} `json:"channel_id,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceGroupingGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceGroupingGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsChannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsAssigns
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// format [MIN, MAX, STEP, UNIT]
		ChannelId *[]interface{} `json:"channel_id,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsGroupIdAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsGroupIdAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsGroupIdAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsAssign
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsGroupIdEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsGroupIdEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsGroupIdEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsGroupIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsGroupIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsGroupIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Length *int `json:"length,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsGroupIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsGroupIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsGroupIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingGroupsGroupIdSoloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingGroupsGroupIdSoloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingGroupsGroupIdSoloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingGroupsGroupIdSoloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingGroupsGroupIdSoloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingGroupsGroupIdSoloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceGroupingSoloautoclearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceGroupingSoloautoclearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceGroupingSoloautoclearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceGroupingSoloautoclearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceGroupingSoloautoclearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceGroupingSoloautoclearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceIdentifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceIdentifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceIdentifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceIdentifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceIdentifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceIdentifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Length *int `json:"length,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceMainsvoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integer
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceMainsvoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceMainsvoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceMainsvoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegerOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceMainsvoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceMainsvoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceMainsvoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceMainsvoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceMainsvoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Length *int `json:"length,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsNetwork
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsDeviceNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsNetworkOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsDeviceNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsDeviceNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceRemotemuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsRemotemute
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceRemotemuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceRemotemuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceRemotemuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceRemotemuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceRemotemuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceSyslogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsSyslog
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceSyslogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceSyslogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceSyslogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceSyslogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceSyslogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsTime
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceTimeCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsTimeCurrent
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceTimeCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceTimeCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceTimeCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceTimeCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceTimeCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsDeviceTimeTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsTimezone
}

// Status returns HTTPResponse.Status
func (r GetSettingsDeviceTimeTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDeviceTimeTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsDeviceTimeTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsDeviceTimeTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDeviceTimeTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterface
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaces
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsInterfaceInterfacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfacesOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsInterfaceInterfacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsInterfaceInterfacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfig
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigInputChannels
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigInputChannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *String
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigInputChannelPatch
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigOutputChannels
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigOutputChannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigOutputChannelPatch
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsInterfaceConfigOutputChannelPatch
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceMadithroughResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsMadithrough
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceMadithroughResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceMadithroughResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsInterfaceMadithroughResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsMadithroughOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsInterfaceMadithroughResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsInterfaceMadithroughResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceMadithroughResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceMadithroughResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceMadithroughResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsInterfaceSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsAudioSyncGet
}

// Status returns HTTPResponse.Status
func (r GetSettingsInterfaceSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsInterfaceSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSettingsInterfaceSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsAudioSyncOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSettingsInterfaceSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSettingsInterfaceSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsInterfaceSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsInterfaceSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsInterfaceSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsSaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *string `json:"success,omitempty"`
	}
	JSON400 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r PutSettingsSaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsSaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpeakerpresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeakerpresetValue
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSpeakerpresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpeakerpresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsSpeakerpresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeakerpresetOptions
}

// Status returns HTTPResponse.Status
func (r OptionsSpeakerpresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsSpeakerpresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSpeakerpresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PutSpeakerpresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSpeakerpresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChannels
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// format [MIN, MAX, STEP, UNIT]
		ChannelId *[]interface{} `json:"channel_id,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Boolean
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAmp
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdAmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAmpOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdAmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdAmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioanalyzer
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioAnalyzerValue
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioAnalyzerValueRMS
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerImpedanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioanalyzerImpedance
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerImpedanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerImpedanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioanalyzerImpedance
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerVoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioAnalyzerValue
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerVoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerVoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusAudioAnalyzerValueRMS
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayFloat
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevelOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdDspDelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusDelay
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdDspDelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdDspDelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdDspEqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Load *float32 `json:"load,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdDspEqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdDspEqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdDspLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusLevel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdDspLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdDspLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdDspLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusLevelOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdDspLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdDspLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdDspReductionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusReduction
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdDspReductionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdDspReductionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdDspReductionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusReductionOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdDspReductionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdDspReductionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusError
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdPowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdPowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdPowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdPowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevelOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdPowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdPowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdSpeakerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusSpeaker
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdSpeakerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdSpeakerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdSpeakerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusSpeakerOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdSpeakerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdSpeakerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChannelChannelIdVoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusChannelChannelIdVoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChannelChannelIdVoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusChannelChannelIdVoltageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusCurrentPowerVoltageLevelOptions
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OptionsStatusChannelChannelIdVoltageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusChannelChannelIdVoltageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusDevice
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceDanteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// broolyn init status
		Init *bool `json:"init,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceDanteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceDanteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusError
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceFanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusFan
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceFanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceFanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusDeviceFanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusFanOptions
}

// Status returns HTTPResponse.Status
func (r OptionsStatusDeviceFanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusDeviceFanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceFpgaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusFPGA
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceFpgaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceFpgaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDevicePsuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPSU
}

// Status returns HTTPResponse.Status
func (r GetStatusDevicePsuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDevicePsuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusDevicePsuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPSUOptions
}

// Status returns HTTPResponse.Status
func (r OptionsStatusDevicePsuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusDevicePsuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusDeviceRemotemuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusRemotemute
}

// Status returns HTTPResponse.Status
func (r GetStatusDeviceRemotemuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusDeviceRemotemuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterface
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceInterfacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInterfaces
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceInterfacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceInterfacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsStatusInterfaceInterfacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInterfacesOptions
}

// Status returns HTTPResponse.Status
func (r OptionsStatusInterfaceInterfacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsStatusInterfaceInterfacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceInterfacesInterfaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInterface
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceInterfacesInterfaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceInterfacesInterfaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInterfaceIntputchannels
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInterfaceIntputchannel
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusInterfaceInternalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusInterfaceInternal
}

// Status returns HTTPResponse.Status
func (r GetStatusInterfaceInternalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusInterfaceInternalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusSaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusSave
}

// Status returns HTTPResponse.Status
func (r GetStatusSaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusSaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusSyslogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success *string `json:"success,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteStatusSyslogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusSyslogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusSyslogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusSyslog
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetStatusSyslogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusSyslogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Ready *bool `json:"ready,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStatusSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Version *string `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetInfoDeviceWithResponse request returning *GetInfoDeviceResponse
func (c *ClientWithResponses) GetInfoDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInfoDeviceResponse, error) {
	rsp, err := c.GetInfoDevice(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfoDeviceResponse(rsp)
}

// PutPresetRecallPresetNameWithResponse request returning *PutPresetRecallPresetNameResponse
func (c *ClientWithResponses) PutPresetRecallPresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*PutPresetRecallPresetNameResponse, error) {
	rsp, err := c.PutPresetRecallPresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetRecallPresetNameResponse(rsp)
}

// OptionsPresetStorageWithResponse request returning *OptionsPresetStorageResponse
func (c *ClientWithResponses) OptionsPresetStorageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsPresetStorageResponse, error) {
	rsp, err := c.OptionsPresetStorage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsPresetStorageResponse(rsp)
}

// DeletePresetStoragePresetNameWithResponse request returning *DeletePresetStoragePresetNameResponse
func (c *ClientWithResponses) DeletePresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*DeletePresetStoragePresetNameResponse, error) {
	rsp, err := c.DeletePresetStoragePresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePresetStoragePresetNameResponse(rsp)
}

// GetPresetStoragePresetNameWithResponse request returning *GetPresetStoragePresetNameResponse
func (c *ClientWithResponses) GetPresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, reqEditors ...RequestEditorFn) (*GetPresetStoragePresetNameResponse, error) {
	rsp, err := c.GetPresetStoragePresetName(ctx, presetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresetStoragePresetNameResponse(rsp)
}

// PutPresetStoragePresetNameWithBodyWithResponse request with arbitrary body returning *PutPresetStoragePresetNameResponse
func (c *ClientWithResponses) PutPresetStoragePresetNameWithBodyWithResponse(ctx context.Context, presetName PresetName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPresetStoragePresetNameResponse, error) {
	rsp, err := c.PutPresetStoragePresetNameWithBody(ctx, presetName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetStoragePresetNameResponse(rsp)
}

func (c *ClientWithResponses) PutPresetStoragePresetNameWithResponse(ctx context.Context, presetName PresetName, body PutPresetStoragePresetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPresetStoragePresetNameResponse, error) {
	rsp, err := c.PutPresetStoragePresetName(ctx, presetName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPresetStoragePresetNameResponse(rsp)
}

// GetSettingsWithResponse request returning *GetSettingsResponse
func (c *ClientWithResponses) GetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsResponse, error) {
	rsp, err := c.GetSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsResponse(rsp)
}

// PutSettingsWithResponse request returning *PutSettingsResponse
func (c *ClientWithResponses) PutSettingsWithResponse(ctx context.Context, params *PutSettingsParams, reqEditors ...RequestEditorFn) (*PutSettingsResponse, error) {
	rsp, err := c.PutSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsResponse(rsp)
}

// GetSettingsChannelWithResponse request returning *GetSettingsChannelResponse
func (c *ClientWithResponses) GetSettingsChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsChannelResponse, error) {
	rsp, err := c.GetSettingsChannel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelResponse(rsp)
}

// OptionsSettingsChannelWithResponse request returning *OptionsSettingsChannelResponse
func (c *ClientWithResponses) OptionsSettingsChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelResponse, error) {
	rsp, err := c.OptionsSettingsChannel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelResponse(rsp)
}

// PutSettingsChannelWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelResponse
func (c *ClientWithResponses) PutSettingsChannelWithBodyWithResponse(ctx context.Context, params *PutSettingsChannelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelResponse, error) {
	rsp, err := c.PutSettingsChannelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelWithResponse(ctx context.Context, params *PutSettingsChannelParams, body PutSettingsChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelResponse, error) {
	rsp, err := c.PutSettingsChannel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelResponse(rsp)
}

// GetSettingsChannelChannelIdWithResponse request returning *GetSettingsChannelChannelIdResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdResponse, error) {
	rsp, err := c.GetSettingsChannelChannelId(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdResponse(rsp)
}

// PutSettingsChannelChannelIdWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdWithBodyWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdWithBody(ctx, channelId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdParams, body PutSettingsChannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsChannelChannelId(ctx, channelId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdResponse(rsp)
}

// GetSettingsChannelChannelIdAmpenableWithResponse request returning *GetSettingsChannelChannelIdAmpenableResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAmpenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAmpenableResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAmpenable(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAmpenableResponse(rsp)
}

// PutSettingsChannelChannelIdAmpenableWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAmpenableResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAmpenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAmpenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAmpenableWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAmpenableResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAmpenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAmpenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAmpenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAmpenable(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAmpenableResponse(rsp)
}

// GetSettingsChannelChannelIdAudioanalyzerWithResponse request returning *GetSettingsChannelChannelIdAudioanalyzerResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAudioanalyzer(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAudioanalyzerResponse(rsp)
}

// PutSettingsChannelChannelIdAudioanalyzerWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAudioanalyzerResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzer(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerResponse(rsp)
}

// GetSettingsChannelChannelIdAudioanalyzerEnableWithResponse request returning *GetSettingsChannelChannelIdAudioanalyzerEnableResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAudioanalyzerEnableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerEnableResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAudioanalyzerEnable(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAudioanalyzerEnableResponse(rsp)
}

// PutSettingsChannelChannelIdAudioanalyzerEnableWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAudioanalyzerEnableResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerEnableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerEnableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerEnableWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerEnableResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerEnableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerEnableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerEnable(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerEnableResponse(rsp)
}

// GetSettingsChannelChannelIdAudioanalyzerReferenceWithResponse request returning *GetSettingsChannelChannelIdAudioanalyzerReferenceResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAudioanalyzerReferenceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferenceResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAudioanalyzerReference(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAudioanalyzerReferenceResponse(rsp)
}

// PutSettingsChannelChannelIdAudioanalyzerReferenceWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAudioanalyzerReferenceResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferenceWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReferenceWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferenceResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferenceWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReference(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferenceResponse(rsp)
}

// GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse request returning *GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp)
}

// OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse request returning *OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp)
}

// PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReferenceImpedance(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp)
}

// GetSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse request returning *GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp)
}

// OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse request returning *OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp)
}

// PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdAudioanalyzerReferencePhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdAudioanalyzerReferencePhase(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp)
}

// GetSettingsChannelChannelIdBridgeenableWithResponse request returning *GetSettingsChannelChannelIdBridgeenableResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdBridgeenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdBridgeenableResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdBridgeenable(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdBridgeenableResponse(rsp)
}

// PutSettingsChannelChannelIdBridgeenableWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdBridgeenableResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdBridgeenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdBridgeenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdBridgeenableWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdBridgeenableResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdBridgeenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdBridgeenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdBridgeenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdBridgeenable(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdBridgeenableResponse(rsp)
}

// GetSettingsChannelChannelIdDspWithResponse request returning *GetSettingsChannelChannelIdDspResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDsp(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspResponse(rsp)
}

// GetSettingsChannelChannelIdDspCurrentlimiterWithResponse request returning *GetSettingsChannelChannelIdDspCurrentlimiterResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspCurrentlimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspCurrentlimiterResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspCurrentlimiterWithResponse request returning *OptionsSettingsChannelChannelIdDspCurrentlimiterResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspCurrentlimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspCurrentlimiterResponse(rsp)
}

// PutSettingsChannelChannelIdDspCurrentlimiterWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspCurrentlimiterResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspCurrentlimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspCurrentlimiterWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspCurrentlimiterResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspCurrentlimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspCurrentlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspCurrentlimiter(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspCurrentlimiterResponse(rsp)
}

// GetSettingsChannelChannelIdDspDelayWithResponse request returning *GetSettingsChannelChannelIdDspDelayResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspDelayResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspDelay(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspDelayResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspDelayWithResponse request returning *OptionsSettingsChannelChannelIdDspDelayResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspDelayResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspDelay(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspDelayResponse(rsp)
}

// PutSettingsChannelChannelIdDspDelayWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspDelayResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspDelayWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspDelayResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspDelayWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspDelayResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspDelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspDelayResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspDelay(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspDelayResponse(rsp)
}

// GetSettingsChannelChannelIdDspEqWithResponse request returning *GetSettingsChannelChannelIdDspEqResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspEq(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspEqResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspEqWithResponse request returning *OptionsSettingsChannelChannelIdDspEqResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspEq(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspEqResponse(rsp)
}

// PostSettingsChannelChannelIdDspEqWithBodyWithResponse request with arbitrary body returning *PostSettingsChannelChannelIdDspEqResponse
func (c *ClientWithResponses) PostSettingsChannelChannelIdDspEqWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.PostSettingsChannelChannelIdDspEqWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSettingsChannelChannelIdDspEqResponse(rsp)
}

func (c *ClientWithResponses) PostSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, body PostSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.PostSettingsChannelChannelIdDspEq(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSettingsChannelChannelIdDspEqResponse(rsp)
}

// PutSettingsChannelChannelIdDspEqWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspEqResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqWithBodyWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEqWithBody(ctx, channelId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, params *PutSettingsChannelChannelIdDspEqParams, body PutSettingsChannelChannelIdDspEqJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEq(ctx, channelId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqResponse(rsp)
}

// DeleteSettingsChannelChannelIdDspEqEqIdWithResponse request returning *DeleteSettingsChannelChannelIdDspEqEqIdResponse
func (c *ClientWithResponses) DeleteSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*DeleteSettingsChannelChannelIdDspEqEqIdResponse, error) {
	rsp, err := c.DeleteSettingsChannelChannelIdDspEqEqId(ctx, channelId, eqId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSettingsChannelChannelIdDspEqEqIdResponse(rsp)
}

// GetSettingsChannelChannelIdDspEqEqIdWithResponse request returning *GetSettingsChannelChannelIdDspEqEqIdResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqEqIdResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspEqEqId(ctx, channelId, eqId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspEqEqIdResponse(rsp)
}

// PutSettingsChannelChannelIdDspEqEqIdWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspEqEqIdResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqEqIdWithBodyWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqEqIdResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEqEqIdWithBody(ctx, channelId, eqId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqEqIdResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqEqIdWithResponse(ctx context.Context, channelId ChannelId, eqId EqId, body PutSettingsChannelChannelIdDspEqEqIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqEqIdResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEqEqId(ctx, channelId, eqId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqEqIdResponse(rsp)
}

// GetSettingsChannelChannelIdDspEqenableWithResponse request returning *GetSettingsChannelChannelIdDspEqenableResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspEqenableWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspEqenableResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspEqenable(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspEqenableResponse(rsp)
}

// PutSettingsChannelChannelIdDspEqenableWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspEqenableResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqenableWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEqenableWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqenableResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspEqenableWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspEqenableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspEqenableResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspEqenable(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspEqenableResponse(rsp)
}

// GetSettingsChannelChannelIdDspFirWithResponse request returning *GetSettingsChannelChannelIdDspFirResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspFirResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspFir(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspFirResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspFirWithResponse request returning *OptionsSettingsChannelChannelIdDspFirResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspFirResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspFir(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspFirResponse(rsp)
}

// PutSettingsChannelChannelIdDspFirWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspFirResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspFirWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspFirResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspFirWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspFirResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspFirWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspFirJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspFirResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspFir(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspFirResponse(rsp)
}

// GetSettingsChannelChannelIdDspGroupmuteWithResponse request returning *GetSettingsChannelChannelIdDspGroupmuteResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspGroupmuteWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspGroupmuteResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspGroupmute(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspGroupmuteResponse(rsp)
}

// GetSettingsChannelChannelIdDspMuteWithResponse request returning *GetSettingsChannelChannelIdDspMuteResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspMuteWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspMuteResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspMute(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspMuteResponse(rsp)
}

// PutSettingsChannelChannelIdDspMuteWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspMuteResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspMuteWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspMuteResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspMuteWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspMuteResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspMuteWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspMuteResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspMute(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspMuteResponse(rsp)
}

// GetSettingsChannelChannelIdDspPatchWithResponse request returning *GetSettingsChannelChannelIdDspPatchResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPatchResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspPatch(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspPatchResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspPatchWithResponse request returning *OptionsSettingsChannelChannelIdDspPatchResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspPatchResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspPatch(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspPatchResponse(rsp)
}

// PutSettingsChannelChannelIdDspPatchWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspPatchResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPatchWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPatchResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPatchWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPatchResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPatchWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPatchResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPatch(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPatchResponse(rsp)
}

// GetSettingsChannelChannelIdDspPatchPatchIdWithResponse request returning *GetSettingsChannelChannelIdDspPatchPatchIdResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspPatchPatchIdWithResponse(ctx context.Context, channelId ChannelId, patchId PatchId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPatchPatchIdResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspPatchPatchId(ctx, channelId, patchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspPatchPatchIdResponse(rsp)
}

// GetSettingsChannelChannelIdDspPhaseWithResponse request returning *GetSettingsChannelChannelIdDspPhaseResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspPhaseWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPhaseResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspPhase(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspPhaseResponse(rsp)
}

// PutSettingsChannelChannelIdDspPhaseWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspPhaseResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPhaseWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPhaseResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPhaseWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPhaseResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPhaseWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPhaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPhaseResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPhase(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPhaseResponse(rsp)
}

// GetSettingsChannelChannelIdDspPowerlimiterWithResponse request returning *GetSettingsChannelChannelIdDspPowerlimiterResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspPowerlimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspPowerlimiterResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspPowerlimiterWithResponse request returning *OptionsSettingsChannelChannelIdDspPowerlimiterResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspPowerlimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspPowerlimiterResponse(rsp)
}

// PutSettingsChannelChannelIdDspPowerlimiterWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspPowerlimiterResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPowerlimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPowerlimiterWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPowerlimiterResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspPowerlimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspPowerlimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspPowerlimiter(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspPowerlimiterResponse(rsp)
}

// GetSettingsChannelChannelIdDspVoltagelimiterWithResponse request returning *GetSettingsChannelChannelIdDspVoltagelimiterResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspVoltagelimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspVoltagelimiterResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspVoltagelimiterWithResponse request returning *OptionsSettingsChannelChannelIdDspVoltagelimiterResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspVoltagelimiter(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspVoltagelimiterResponse(rsp)
}

// PutSettingsChannelChannelIdDspVoltagelimiterWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspVoltagelimiterResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspVoltagelimiterWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspVoltagelimiterWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspVoltagelimiterResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspVoltagelimiterWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVoltagelimiterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspVoltagelimiter(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspVoltagelimiterResponse(rsp)
}

// GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdWithResponse request returning *GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdWithResponse(ctx context.Context, channelId ChannelId, voltagelimiterId VoltagelimiterId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterId(ctx, channelId, voltagelimiterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse(rsp)
}

// GetSettingsChannelChannelIdDspVolumeWithResponse request returning *GetSettingsChannelChannelIdDspVolumeResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdDspVolumeResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdDspVolume(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdDspVolumeResponse(rsp)
}

// OptionsSettingsChannelChannelIdDspVolumeWithResponse request returning *OptionsSettingsChannelChannelIdDspVolumeResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdDspVolumeResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdDspVolume(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdDspVolumeResponse(rsp)
}

// PutSettingsChannelChannelIdDspVolumeWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdDspVolumeResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdDspVolumeWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVolumeResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspVolumeWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspVolumeResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdDspVolumeWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdDspVolumeResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdDspVolume(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdDspVolumeResponse(rsp)
}

// GetSettingsChannelChannelIdNameWithResponse request returning *GetSettingsChannelChannelIdNameResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdNameResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdName(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdNameResponse(rsp)
}

// OptionsSettingsChannelChannelIdNameWithResponse request returning *OptionsSettingsChannelChannelIdNameResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdNameResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdName(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdNameResponse(rsp)
}

// PutSettingsChannelChannelIdNameWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdNameResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdNameWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdNameResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdNameWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdNameResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdNameWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdNameResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdName(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdNameResponse(rsp)
}

// GetSettingsChannelChannelIdSpeakerWithResponse request returning *GetSettingsChannelChannelIdSpeakerResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdSpeaker(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdSpeakerResponse(rsp)
}

// PutSettingsChannelChannelIdSpeakerWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdSpeakerResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeakerWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeaker(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerResponse(rsp)
}

// GetSettingsChannelChannelIdSpeakerDetectionWithResponse request returning *GetSettingsChannelChannelIdSpeakerDetectionResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdSpeakerDetection(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdSpeakerDetectionResponse(rsp)
}

// OptionsSettingsChannelChannelIdSpeakerDetectionWithResponse request returning *OptionsSettingsChannelChannelIdSpeakerDetectionResponse
func (c *ClientWithResponses) OptionsSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	rsp, err := c.OptionsSettingsChannelChannelIdSpeakerDetection(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsChannelChannelIdSpeakerDetectionResponse(rsp)
}

// PutSettingsChannelChannelIdSpeakerDetectionWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdSpeakerDetectionResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerDetectionWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeakerDetectionWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerDetectionResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerDetectionWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeakerDetection(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerDetectionResponse(rsp)
}

// DeleteSettingsChannelChannelIdSpeakerPresetWithResponse request returning *DeleteSettingsChannelChannelIdSpeakerPresetResponse
func (c *ClientWithResponses) DeleteSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*DeleteSettingsChannelChannelIdSpeakerPresetResponse, error) {
	rsp, err := c.DeleteSettingsChannelChannelIdSpeakerPreset(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSettingsChannelChannelIdSpeakerPresetResponse(rsp)
}

// GetSettingsChannelChannelIdSpeakerPresetWithResponse request returning *GetSettingsChannelChannelIdSpeakerPresetResponse
func (c *ClientWithResponses) GetSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsChannelChannelIdSpeakerPresetResponse, error) {
	rsp, err := c.GetSettingsChannelChannelIdSpeakerPreset(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsChannelChannelIdSpeakerPresetResponse(rsp)
}

// PutSettingsChannelChannelIdSpeakerPresetWithBodyWithResponse request with arbitrary body returning *PutSettingsChannelChannelIdSpeakerPresetResponse
func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerPresetWithBodyWithResponse(ctx context.Context, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerPresetResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeakerPresetWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerPresetResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsChannelChannelIdSpeakerPresetWithResponse(ctx context.Context, channelId ChannelId, body PutSettingsChannelChannelIdSpeakerPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsChannelChannelIdSpeakerPresetResponse, error) {
	rsp, err := c.PutSettingsChannelChannelIdSpeakerPreset(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsChannelChannelIdSpeakerPresetResponse(rsp)
}

// GetSettingsDeviceWithResponse request returning *GetSettingsDeviceResponse
func (c *ClientWithResponses) GetSettingsDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceResponse, error) {
	rsp, err := c.GetSettingsDevice(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceResponse(rsp)
}

// PutSettingsDeviceWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceResponse
func (c *ClientWithResponses) PutSettingsDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceResponse, error) {
	rsp, err := c.PutSettingsDeviceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceWithResponse(ctx context.Context, body PutSettingsDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceResponse, error) {
	rsp, err := c.PutSettingsDevice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceResponse(rsp)
}

// GetSettingsDeviceDanteWithResponse request returning *GetSettingsDeviceDanteResponse
func (c *ClientWithResponses) GetSettingsDeviceDanteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteResponse, error) {
	rsp, err := c.GetSettingsDeviceDante(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDanteResponse(rsp)
}

// GetSettingsDeviceDanteIdentityWithResponse request returning *GetSettingsDeviceDanteIdentityResponse
func (c *ClientWithResponses) GetSettingsDeviceDanteIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteIdentityResponse, error) {
	rsp, err := c.GetSettingsDeviceDanteIdentity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDanteIdentityResponse(rsp)
}

// PutSettingsDeviceDanteIdentityWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDanteIdentityResponse
func (c *ClientWithResponses) PutSettingsDeviceDanteIdentityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteIdentityResponse, error) {
	rsp, err := c.PutSettingsDeviceDanteIdentityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDanteIdentityResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDanteIdentityWithResponse(ctx context.Context, body PutSettingsDeviceDanteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteIdentityResponse, error) {
	rsp, err := c.PutSettingsDeviceDanteIdentity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDanteIdentityResponse(rsp)
}

// GetSettingsDeviceDanteNetworkWithResponse request returning *GetSettingsDeviceDanteNetworkResponse
func (c *ClientWithResponses) GetSettingsDeviceDanteNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDanteNetworkResponse, error) {
	rsp, err := c.GetSettingsDeviceDanteNetwork(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDanteNetworkResponse(rsp)
}

// OptionsSettingsDeviceDanteNetworkWithResponse request returning *OptionsSettingsDeviceDanteNetworkResponse
func (c *ClientWithResponses) OptionsSettingsDeviceDanteNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDanteNetworkResponse, error) {
	rsp, err := c.OptionsSettingsDeviceDanteNetwork(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceDanteNetworkResponse(rsp)
}

// PutSettingsDeviceDanteNetworkWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDanteNetworkResponse
func (c *ClientWithResponses) PutSettingsDeviceDanteNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteNetworkResponse, error) {
	rsp, err := c.PutSettingsDeviceDanteNetworkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDanteNetworkResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDanteNetworkWithResponse(ctx context.Context, body PutSettingsDeviceDanteNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDanteNetworkResponse, error) {
	rsp, err := c.PutSettingsDeviceDanteNetwork(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDanteNetworkResponse(rsp)
}

// GetSettingsDeviceDspWithResponse request returning *GetSettingsDeviceDspResponse
func (c *ClientWithResponses) GetSettingsDeviceDspWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspResponse, error) {
	rsp, err := c.GetSettingsDeviceDsp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDspResponse(rsp)
}

// PutSettingsDeviceDspWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDspResponse
func (c *ClientWithResponses) PutSettingsDeviceDspWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspResponse, error) {
	rsp, err := c.PutSettingsDeviceDspWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDspWithResponse(ctx context.Context, body PutSettingsDeviceDspJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspResponse, error) {
	rsp, err := c.PutSettingsDeviceDsp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspResponse(rsp)
}

// GetSettingsDeviceDspMuteWithResponse request returning *GetSettingsDeviceDspMuteResponse
func (c *ClientWithResponses) GetSettingsDeviceDspMuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspMuteResponse, error) {
	rsp, err := c.GetSettingsDeviceDspMute(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDspMuteResponse(rsp)
}

// PutSettingsDeviceDspMuteWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDspMuteResponse
func (c *ClientWithResponses) PutSettingsDeviceDspMuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspMuteResponse, error) {
	rsp, err := c.PutSettingsDeviceDspMuteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspMuteResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDspMuteWithResponse(ctx context.Context, body PutSettingsDeviceDspMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspMuteResponse, error) {
	rsp, err := c.PutSettingsDeviceDspMute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspMuteResponse(rsp)
}

// GetSettingsDeviceDspStartupmuteWithResponse request returning *GetSettingsDeviceDspStartupmuteResponse
func (c *ClientWithResponses) GetSettingsDeviceDspStartupmuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspStartupmuteResponse, error) {
	rsp, err := c.GetSettingsDeviceDspStartupmute(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDspStartupmuteResponse(rsp)
}

// PutSettingsDeviceDspStartupmuteWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDspStartupmuteResponse
func (c *ClientWithResponses) PutSettingsDeviceDspStartupmuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspStartupmuteResponse, error) {
	rsp, err := c.PutSettingsDeviceDspStartupmuteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspStartupmuteResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDspStartupmuteWithResponse(ctx context.Context, body PutSettingsDeviceDspStartupmuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspStartupmuteResponse, error) {
	rsp, err := c.PutSettingsDeviceDspStartupmute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspStartupmuteResponse(rsp)
}

// GetSettingsDeviceDspVolumeWithResponse request returning *GetSettingsDeviceDspVolumeResponse
func (c *ClientWithResponses) GetSettingsDeviceDspVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspVolumeResponse, error) {
	rsp, err := c.GetSettingsDeviceDspVolume(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDspVolumeResponse(rsp)
}

// OptionsSettingsDeviceDspVolumeWithResponse request returning *OptionsSettingsDeviceDspVolumeResponse
func (c *ClientWithResponses) OptionsSettingsDeviceDspVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDspVolumeResponse, error) {
	rsp, err := c.OptionsSettingsDeviceDspVolume(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceDspVolumeResponse(rsp)
}

// PutSettingsDeviceDspVolumeWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDspVolumeResponse
func (c *ClientWithResponses) PutSettingsDeviceDspVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumeResponse, error) {
	rsp, err := c.PutSettingsDeviceDspVolumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspVolumeResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDspVolumeWithResponse(ctx context.Context, body PutSettingsDeviceDspVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumeResponse, error) {
	rsp, err := c.PutSettingsDeviceDspVolume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspVolumeResponse(rsp)
}

// GetSettingsDeviceDspVolumerampWithResponse request returning *GetSettingsDeviceDspVolumerampResponse
func (c *ClientWithResponses) GetSettingsDeviceDspVolumerampWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceDspVolumerampResponse, error) {
	rsp, err := c.GetSettingsDeviceDspVolumeramp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceDspVolumerampResponse(rsp)
}

// OptionsSettingsDeviceDspVolumerampWithResponse request returning *OptionsSettingsDeviceDspVolumerampResponse
func (c *ClientWithResponses) OptionsSettingsDeviceDspVolumerampWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceDspVolumerampResponse, error) {
	rsp, err := c.OptionsSettingsDeviceDspVolumeramp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceDspVolumerampResponse(rsp)
}

// PutSettingsDeviceDspVolumerampWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceDspVolumerampResponse
func (c *ClientWithResponses) PutSettingsDeviceDspVolumerampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumerampResponse, error) {
	rsp, err := c.PutSettingsDeviceDspVolumerampWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspVolumerampResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceDspVolumerampWithResponse(ctx context.Context, body PutSettingsDeviceDspVolumerampJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceDspVolumerampResponse, error) {
	rsp, err := c.PutSettingsDeviceDspVolumeramp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceDspVolumerampResponse(rsp)
}

// GetSettingsDeviceFanWithResponse request returning *GetSettingsDeviceFanResponse
func (c *ClientWithResponses) GetSettingsDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceFanResponse, error) {
	rsp, err := c.GetSettingsDeviceFan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceFanResponse(rsp)
}

// PutSettingsDeviceFanWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceFanResponse
func (c *ClientWithResponses) PutSettingsDeviceFanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceFanResponse, error) {
	rsp, err := c.PutSettingsDeviceFanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceFanResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceFanWithResponse(ctx context.Context, body PutSettingsDeviceFanJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceFanResponse, error) {
	rsp, err := c.PutSettingsDeviceFan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceFanResponse(rsp)
}

// GetSettingsDeviceGroupingWithResponse request returning *GetSettingsDeviceGroupingResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingResponse, error) {
	rsp, err := c.GetSettingsDeviceGrouping(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingResponse(rsp)
}

// PutSettingsDeviceGroupingWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingWithResponse(ctx context.Context, body PutSettingsDeviceGroupingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingResponse, error) {
	rsp, err := c.PutSettingsDeviceGrouping(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsWithResponse request returning *GetSettingsDeviceGroupingGroupsResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsResponse(rsp)
}

// OptionsSettingsDeviceGroupingGroupsWithResponse request returning *OptionsSettingsDeviceGroupingGroupsResponse
func (c *ClientWithResponses) OptionsSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsResponse, error) {
	rsp, err := c.OptionsSettingsDeviceGroupingGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceGroupingGroupsResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsWithResponse(ctx context.Context, body PutSettingsDeviceGroupingGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdAssignWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdAssignResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdAssign(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp)
}

// OptionsSettingsDeviceGroupingGroupsGroupIdAssignWithResponse request returning *OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse
func (c *ClientWithResponses) OptionsSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	rsp, err := c.OptionsSettingsDeviceGroupingGroupsGroupIdAssign(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsGroupIdAssignWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsGroupIdAssignResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdAssignWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdAssignWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdAssignWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdAssign(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdWithResponse(ctx context.Context, groupId GroupId, assignId AssignId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdAssignAssignId(ctx, groupId, assignId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdEnableWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdEnableResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdEnableWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdEnableResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdEnable(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdEnableResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsGroupIdEnableWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsGroupIdEnableResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdEnableWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdEnableResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdEnableWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdEnableResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdEnableWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdEnableResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdEnable(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdEnableResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdMuteWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdMuteResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdMuteWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdMuteResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdMute(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdMuteResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsGroupIdMuteWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsGroupIdMuteResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdMuteWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdMuteResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdMuteWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdMuteResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdMuteWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdMuteResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdMute(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdMuteResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdNameWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdNameResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdName(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp)
}

// OptionsSettingsDeviceGroupingGroupsGroupIdNameWithResponse request returning *OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse
func (c *ClientWithResponses) OptionsSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	rsp, err := c.OptionsSettingsDeviceGroupingGroupsGroupIdName(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsGroupIdNameWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsGroupIdNameResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdNameWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdNameWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdNameWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdName(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp)
}

// GetSettingsDeviceGroupingGroupsGroupIdSoloWithResponse request returning *GetSettingsDeviceGroupingGroupsGroupIdSoloResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingGroupsGroupIdSoloWithResponse(ctx context.Context, groupId GroupId, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingGroupsGroupIdSoloResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingGroupsGroupIdSolo(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingGroupsGroupIdSoloResponse(rsp)
}

// PutSettingsDeviceGroupingGroupsGroupIdSoloWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingGroupsGroupIdSoloResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdSoloWithBodyWithResponse(ctx context.Context, groupId GroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdSoloResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdSoloWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdSoloResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingGroupsGroupIdSoloWithResponse(ctx context.Context, groupId GroupId, body PutSettingsDeviceGroupingGroupsGroupIdSoloJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingGroupsGroupIdSoloResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingGroupsGroupIdSolo(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingGroupsGroupIdSoloResponse(rsp)
}

// GetSettingsDeviceGroupingSoloautoclearWithResponse request returning *GetSettingsDeviceGroupingSoloautoclearResponse
func (c *ClientWithResponses) GetSettingsDeviceGroupingSoloautoclearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceGroupingSoloautoclearResponse, error) {
	rsp, err := c.GetSettingsDeviceGroupingSoloautoclear(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceGroupingSoloautoclearResponse(rsp)
}

// PutSettingsDeviceGroupingSoloautoclearWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceGroupingSoloautoclearResponse
func (c *ClientWithResponses) PutSettingsDeviceGroupingSoloautoclearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingSoloautoclearResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingSoloautoclearWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingSoloautoclearResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceGroupingSoloautoclearWithResponse(ctx context.Context, body PutSettingsDeviceGroupingSoloautoclearJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceGroupingSoloautoclearResponse, error) {
	rsp, err := c.PutSettingsDeviceGroupingSoloautoclear(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceGroupingSoloautoclearResponse(rsp)
}

// GetSettingsDeviceIdentifyWithResponse request returning *GetSettingsDeviceIdentifyResponse
func (c *ClientWithResponses) GetSettingsDeviceIdentifyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceIdentifyResponse, error) {
	rsp, err := c.GetSettingsDeviceIdentify(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceIdentifyResponse(rsp)
}

// PutSettingsDeviceIdentifyWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceIdentifyResponse
func (c *ClientWithResponses) PutSettingsDeviceIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceIdentifyResponse, error) {
	rsp, err := c.PutSettingsDeviceIdentifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceIdentifyResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceIdentifyWithResponse(ctx context.Context, body PutSettingsDeviceIdentifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceIdentifyResponse, error) {
	rsp, err := c.PutSettingsDeviceIdentify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceIdentifyResponse(rsp)
}

// GetSettingsDeviceLocationWithResponse request returning *GetSettingsDeviceLocationResponse
func (c *ClientWithResponses) GetSettingsDeviceLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceLocationResponse, error) {
	rsp, err := c.GetSettingsDeviceLocation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceLocationResponse(rsp)
}

// OptionsSettingsDeviceLocationWithResponse request returning *OptionsSettingsDeviceLocationResponse
func (c *ClientWithResponses) OptionsSettingsDeviceLocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceLocationResponse, error) {
	rsp, err := c.OptionsSettingsDeviceLocation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceLocationResponse(rsp)
}

// PutSettingsDeviceLocationWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceLocationResponse
func (c *ClientWithResponses) PutSettingsDeviceLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceLocationResponse, error) {
	rsp, err := c.PutSettingsDeviceLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceLocationResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceLocationWithResponse(ctx context.Context, body PutSettingsDeviceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceLocationResponse, error) {
	rsp, err := c.PutSettingsDeviceLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceLocationResponse(rsp)
}

// GetSettingsDeviceMainsvoltageWithResponse request returning *GetSettingsDeviceMainsvoltageResponse
func (c *ClientWithResponses) GetSettingsDeviceMainsvoltageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceMainsvoltageResponse, error) {
	rsp, err := c.GetSettingsDeviceMainsvoltage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceMainsvoltageResponse(rsp)
}

// OptionsSettingsDeviceMainsvoltageWithResponse request returning *OptionsSettingsDeviceMainsvoltageResponse
func (c *ClientWithResponses) OptionsSettingsDeviceMainsvoltageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceMainsvoltageResponse, error) {
	rsp, err := c.OptionsSettingsDeviceMainsvoltage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceMainsvoltageResponse(rsp)
}

// PutSettingsDeviceMainsvoltageWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceMainsvoltageResponse
func (c *ClientWithResponses) PutSettingsDeviceMainsvoltageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceMainsvoltageResponse, error) {
	rsp, err := c.PutSettingsDeviceMainsvoltageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceMainsvoltageResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceMainsvoltageWithResponse(ctx context.Context, body PutSettingsDeviceMainsvoltageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceMainsvoltageResponse, error) {
	rsp, err := c.PutSettingsDeviceMainsvoltage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceMainsvoltageResponse(rsp)
}

// GetSettingsDeviceNameWithResponse request returning *GetSettingsDeviceNameResponse
func (c *ClientWithResponses) GetSettingsDeviceNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceNameResponse, error) {
	rsp, err := c.GetSettingsDeviceName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceNameResponse(rsp)
}

// OptionsSettingsDeviceNameWithResponse request returning *OptionsSettingsDeviceNameResponse
func (c *ClientWithResponses) OptionsSettingsDeviceNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceNameResponse, error) {
	rsp, err := c.OptionsSettingsDeviceName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceNameResponse(rsp)
}

// PutSettingsDeviceNameWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceNameResponse
func (c *ClientWithResponses) PutSettingsDeviceNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNameResponse, error) {
	rsp, err := c.PutSettingsDeviceNameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceNameResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceNameWithResponse(ctx context.Context, body PutSettingsDeviceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNameResponse, error) {
	rsp, err := c.PutSettingsDeviceName(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceNameResponse(rsp)
}

// GetSettingsDeviceNetworkWithResponse request returning *GetSettingsDeviceNetworkResponse
func (c *ClientWithResponses) GetSettingsDeviceNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceNetworkResponse, error) {
	rsp, err := c.GetSettingsDeviceNetwork(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceNetworkResponse(rsp)
}

// OptionsSettingsDeviceNetworkWithResponse request returning *OptionsSettingsDeviceNetworkResponse
func (c *ClientWithResponses) OptionsSettingsDeviceNetworkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsDeviceNetworkResponse, error) {
	rsp, err := c.OptionsSettingsDeviceNetwork(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsDeviceNetworkResponse(rsp)
}

// PutSettingsDeviceNetworkWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceNetworkResponse
func (c *ClientWithResponses) PutSettingsDeviceNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNetworkResponse, error) {
	rsp, err := c.PutSettingsDeviceNetworkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceNetworkResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceNetworkWithResponse(ctx context.Context, body PutSettingsDeviceNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceNetworkResponse, error) {
	rsp, err := c.PutSettingsDeviceNetwork(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceNetworkResponse(rsp)
}

// GetSettingsDeviceRemotemuteWithResponse request returning *GetSettingsDeviceRemotemuteResponse
func (c *ClientWithResponses) GetSettingsDeviceRemotemuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceRemotemuteResponse, error) {
	rsp, err := c.GetSettingsDeviceRemotemute(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceRemotemuteResponse(rsp)
}

// PutSettingsDeviceRemotemuteWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceRemotemuteResponse
func (c *ClientWithResponses) PutSettingsDeviceRemotemuteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceRemotemuteResponse, error) {
	rsp, err := c.PutSettingsDeviceRemotemuteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceRemotemuteResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceRemotemuteWithResponse(ctx context.Context, body PutSettingsDeviceRemotemuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceRemotemuteResponse, error) {
	rsp, err := c.PutSettingsDeviceRemotemute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceRemotemuteResponse(rsp)
}

// GetSettingsDeviceSyslogWithResponse request returning *GetSettingsDeviceSyslogResponse
func (c *ClientWithResponses) GetSettingsDeviceSyslogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceSyslogResponse, error) {
	rsp, err := c.GetSettingsDeviceSyslog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceSyslogResponse(rsp)
}

// PutSettingsDeviceSyslogWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceSyslogResponse
func (c *ClientWithResponses) PutSettingsDeviceSyslogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceSyslogResponse, error) {
	rsp, err := c.PutSettingsDeviceSyslogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceSyslogResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceSyslogWithResponse(ctx context.Context, body PutSettingsDeviceSyslogJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceSyslogResponse, error) {
	rsp, err := c.PutSettingsDeviceSyslog(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceSyslogResponse(rsp)
}

// GetSettingsDeviceTimeWithResponse request returning *GetSettingsDeviceTimeResponse
func (c *ClientWithResponses) GetSettingsDeviceTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeResponse, error) {
	rsp, err := c.GetSettingsDeviceTime(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceTimeResponse(rsp)
}

// PutSettingsDeviceTimeWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceTimeResponse
func (c *ClientWithResponses) PutSettingsDeviceTimeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeResponse, error) {
	rsp, err := c.PutSettingsDeviceTimeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceTimeWithResponse(ctx context.Context, body PutSettingsDeviceTimeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeResponse, error) {
	rsp, err := c.PutSettingsDeviceTime(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeResponse(rsp)
}

// GetSettingsDeviceTimeCurrentWithResponse request returning *GetSettingsDeviceTimeCurrentResponse
func (c *ClientWithResponses) GetSettingsDeviceTimeCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeCurrentResponse, error) {
	rsp, err := c.GetSettingsDeviceTimeCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceTimeCurrentResponse(rsp)
}

// PutSettingsDeviceTimeCurrentWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceTimeCurrentResponse
func (c *ClientWithResponses) PutSettingsDeviceTimeCurrentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeCurrentResponse, error) {
	rsp, err := c.PutSettingsDeviceTimeCurrentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeCurrentResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceTimeCurrentWithResponse(ctx context.Context, body PutSettingsDeviceTimeCurrentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeCurrentResponse, error) {
	rsp, err := c.PutSettingsDeviceTimeCurrent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeCurrentResponse(rsp)
}

// GetSettingsDeviceTimeTimezoneWithResponse request returning *GetSettingsDeviceTimeTimezoneResponse
func (c *ClientWithResponses) GetSettingsDeviceTimeTimezoneWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsDeviceTimeTimezoneResponse, error) {
	rsp, err := c.GetSettingsDeviceTimeTimezone(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsDeviceTimeTimezoneResponse(rsp)
}

// PutSettingsDeviceTimeTimezoneWithBodyWithResponse request with arbitrary body returning *PutSettingsDeviceTimeTimezoneResponse
func (c *ClientWithResponses) PutSettingsDeviceTimeTimezoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeTimezoneResponse, error) {
	rsp, err := c.PutSettingsDeviceTimeTimezoneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeTimezoneResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsDeviceTimeTimezoneWithResponse(ctx context.Context, body PutSettingsDeviceTimeTimezoneJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsDeviceTimeTimezoneResponse, error) {
	rsp, err := c.PutSettingsDeviceTimeTimezone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsDeviceTimeTimezoneResponse(rsp)
}

// GetSettingsInterfaceWithResponse request returning *GetSettingsInterfaceResponse
func (c *ClientWithResponses) GetSettingsInterfaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceResponse, error) {
	rsp, err := c.GetSettingsInterface(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceResponse(rsp)
}

// PutSettingsInterfaceWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceResponse
func (c *ClientWithResponses) PutSettingsInterfaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceResponse, error) {
	rsp, err := c.PutSettingsInterfaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceWithResponse(ctx context.Context, body PutSettingsInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceResponse, error) {
	rsp, err := c.PutSettingsInterface(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceResponse(rsp)
}

// GetSettingsInterfaceInterfacesWithResponse request returning *GetSettingsInterfaceInterfacesResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesResponse(rsp)
}

// OptionsSettingsInterfaceInterfacesWithResponse request returning *OptionsSettingsInterfaceInterfacesResponse
func (c *ClientWithResponses) OptionsSettingsInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceInterfacesResponse, error) {
	rsp, err := c.OptionsSettingsInterfaceInterfaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsInterfaceInterfacesResponse(rsp)
}

// PutSettingsInterfaceInterfacesWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesWithResponse(ctx context.Context, body PutSettingsInterfaceInterfacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceId(ctx, interfaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdWithBody(ctx, interfaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceId(ctx, interfaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx, interfaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithBody(ctx, interfaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannel(ctx, interfaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithBody(ctx, interfaceId, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx, interfaceId, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithBody(ctx, interfaceId, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdName(ctx, interfaceId, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithBody(ctx, interfaceId, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatch(ctx, interfaceId, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx, interfaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithBody(ctx, interfaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannel(ctx, interfaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithBody(ctx, interfaceId, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelId(ctx, interfaceId, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse(rsp)
}

// GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse request returning *GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse
func (c *ClientWithResponses) GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	rsp, err := c.GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp)
}

// OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse request returning *OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse
func (c *ClientWithResponses) OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	rsp, err := c.OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp)
}

// PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse
func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBodyWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithBody(ctx, interfaceId, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, body PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	rsp, err := c.PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatch(ctx, interfaceId, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp)
}

// GetSettingsInterfaceMadithroughWithResponse request returning *GetSettingsInterfaceMadithroughResponse
func (c *ClientWithResponses) GetSettingsInterfaceMadithroughWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceMadithroughResponse, error) {
	rsp, err := c.GetSettingsInterfaceMadithrough(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceMadithroughResponse(rsp)
}

// OptionsSettingsInterfaceMadithroughWithResponse request returning *OptionsSettingsInterfaceMadithroughResponse
func (c *ClientWithResponses) OptionsSettingsInterfaceMadithroughWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceMadithroughResponse, error) {
	rsp, err := c.OptionsSettingsInterfaceMadithrough(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsInterfaceMadithroughResponse(rsp)
}

// PutSettingsInterfaceMadithroughWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceMadithroughResponse
func (c *ClientWithResponses) PutSettingsInterfaceMadithroughWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceMadithroughResponse, error) {
	rsp, err := c.PutSettingsInterfaceMadithroughWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceMadithroughResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceMadithroughWithResponse(ctx context.Context, body PutSettingsInterfaceMadithroughJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceMadithroughResponse, error) {
	rsp, err := c.PutSettingsInterfaceMadithrough(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceMadithroughResponse(rsp)
}

// GetSettingsInterfaceSyncWithResponse request returning *GetSettingsInterfaceSyncResponse
func (c *ClientWithResponses) GetSettingsInterfaceSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsInterfaceSyncResponse, error) {
	rsp, err := c.GetSettingsInterfaceSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsInterfaceSyncResponse(rsp)
}

// OptionsSettingsInterfaceSyncWithResponse request returning *OptionsSettingsInterfaceSyncResponse
func (c *ClientWithResponses) OptionsSettingsInterfaceSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSettingsInterfaceSyncResponse, error) {
	rsp, err := c.OptionsSettingsInterfaceSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSettingsInterfaceSyncResponse(rsp)
}

// PutSettingsInterfaceSyncWithBodyWithResponse request with arbitrary body returning *PutSettingsInterfaceSyncResponse
func (c *ClientWithResponses) PutSettingsInterfaceSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceSyncResponse, error) {
	rsp, err := c.PutSettingsInterfaceSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceSyncResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsInterfaceSyncWithResponse(ctx context.Context, body PutSettingsInterfaceSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsInterfaceSyncResponse, error) {
	rsp, err := c.PutSettingsInterfaceSync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsInterfaceSyncResponse(rsp)
}

// PutSettingsSaveWithResponse request returning *PutSettingsSaveResponse
func (c *ClientWithResponses) PutSettingsSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutSettingsSaveResponse, error) {
	rsp, err := c.PutSettingsSave(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsSaveResponse(rsp)
}

// GetSpeakerpresetWithResponse request returning *GetSpeakerpresetResponse
func (c *ClientWithResponses) GetSpeakerpresetWithResponse(ctx context.Context, params *GetSpeakerpresetParams, reqEditors ...RequestEditorFn) (*GetSpeakerpresetResponse, error) {
	rsp, err := c.GetSpeakerpreset(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpeakerpresetResponse(rsp)
}

// OptionsSpeakerpresetWithResponse request returning *OptionsSpeakerpresetResponse
func (c *ClientWithResponses) OptionsSpeakerpresetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsSpeakerpresetResponse, error) {
	rsp, err := c.OptionsSpeakerpreset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsSpeakerpresetResponse(rsp)
}

// PutSpeakerpresetWithBodyWithResponse request with arbitrary body returning *PutSpeakerpresetResponse
func (c *ClientWithResponses) PutSpeakerpresetWithBodyWithResponse(ctx context.Context, params *PutSpeakerpresetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSpeakerpresetResponse, error) {
	rsp, err := c.PutSpeakerpresetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSpeakerpresetResponse(rsp)
}

func (c *ClientWithResponses) PutSpeakerpresetWithResponse(ctx context.Context, params *PutSpeakerpresetParams, body PutSpeakerpresetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSpeakerpresetResponse, error) {
	rsp, err := c.PutSpeakerpreset(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSpeakerpresetResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetStatusChannelWithResponse request returning *GetStatusChannelResponse
func (c *ClientWithResponses) GetStatusChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusChannelResponse, error) {
	rsp, err := c.GetStatusChannel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelResponse(rsp)
}

// OptionsStatusChannelWithResponse request returning *OptionsStatusChannelResponse
func (c *ClientWithResponses) OptionsStatusChannelWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusChannelResponse, error) {
	rsp, err := c.OptionsStatusChannel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelResponse(rsp)
}

// GetStatusChannelChannelIdWithResponse request returning *GetStatusChannelChannelIdResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdResponse, error) {
	rsp, err := c.GetStatusChannelChannelId(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdResponse(rsp)
}

// GetStatusChannelChannelIdActiveWithResponse request returning *GetStatusChannelChannelIdActiveResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdActiveWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdActiveResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdActive(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdActiveResponse(rsp)
}

// GetStatusChannelChannelIdAmpWithResponse request returning *GetStatusChannelChannelIdAmpResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAmpWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAmpResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAmp(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAmpResponse(rsp)
}

// OptionsStatusChannelChannelIdAmpWithResponse request returning *OptionsStatusChannelChannelIdAmpResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdAmpWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAmpResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdAmp(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdAmpResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzer(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerCurrentWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerCurrentResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerCurrent(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerCurrentResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerCurrentRmsWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerCurrentRmsWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerCurrentRms(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse(rsp)
}

// OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse request returning *OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrum(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerImpedanceWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerImpedanceResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerImpedanceResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerImpedance(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerImpedanceResponse(rsp)
}

// OptionsStatusChannelChannelIdAudioanalyzerImpedanceWithResponse request returning *OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdAudioanalyzerImpedanceWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdAudioanalyzerImpedance(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse(rsp)
}

// OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse request returning *OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentary(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerVoltageWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerVoltageResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerVoltage(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerVoltageResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerVoltageRmsWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerVoltageRmsWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerVoltageRms(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse(rsp)
}

// GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse request returning *GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse(rsp)
}

// OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse request returning *OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrum(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse(rsp)
}

// GetStatusChannelChannelIdCurrentWithResponse request returning *GetStatusChannelChannelIdCurrentResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdCurrentResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdCurrent(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdCurrentResponse(rsp)
}

// OptionsStatusChannelChannelIdCurrentWithResponse request returning *OptionsStatusChannelChannelIdCurrentResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdCurrentWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdCurrentResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdCurrent(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdCurrentResponse(rsp)
}

// GetStatusChannelChannelIdDspDelayWithResponse request returning *GetStatusChannelChannelIdDspDelayResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdDspDelayWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspDelayResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdDspDelay(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdDspDelayResponse(rsp)
}

// GetStatusChannelChannelIdDspEqWithResponse request returning *GetStatusChannelChannelIdDspEqResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdDspEqWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspEqResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdDspEq(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdDspEqResponse(rsp)
}

// GetStatusChannelChannelIdDspLevelWithResponse request returning *GetStatusChannelChannelIdDspLevelResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdDspLevelWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspLevelResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdDspLevel(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdDspLevelResponse(rsp)
}

// OptionsStatusChannelChannelIdDspLevelWithResponse request returning *OptionsStatusChannelChannelIdDspLevelResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdDspLevelWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdDspLevelResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdDspLevel(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdDspLevelResponse(rsp)
}

// GetStatusChannelChannelIdDspReductionWithResponse request returning *GetStatusChannelChannelIdDspReductionResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdDspReductionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdDspReductionResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdDspReduction(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdDspReductionResponse(rsp)
}

// OptionsStatusChannelChannelIdDspReductionWithResponse request returning *OptionsStatusChannelChannelIdDspReductionResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdDspReductionWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdDspReductionResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdDspReduction(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdDspReductionResponse(rsp)
}

// GetStatusChannelChannelIdErrorWithResponse request returning *GetStatusChannelChannelIdErrorResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdErrorWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdErrorResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdError(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdErrorResponse(rsp)
}

// GetStatusChannelChannelIdPowerWithResponse request returning *GetStatusChannelChannelIdPowerResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdPowerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdPowerResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdPower(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdPowerResponse(rsp)
}

// OptionsStatusChannelChannelIdPowerWithResponse request returning *OptionsStatusChannelChannelIdPowerResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdPowerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdPowerResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdPower(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdPowerResponse(rsp)
}

// GetStatusChannelChannelIdSpeakerWithResponse request returning *GetStatusChannelChannelIdSpeakerResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdSpeakerResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdSpeaker(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdSpeakerResponse(rsp)
}

// OptionsStatusChannelChannelIdSpeakerWithResponse request returning *OptionsStatusChannelChannelIdSpeakerResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdSpeakerWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdSpeakerResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdSpeaker(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdSpeakerResponse(rsp)
}

// GetStatusChannelChannelIdVoltageWithResponse request returning *GetStatusChannelChannelIdVoltageResponse
func (c *ClientWithResponses) GetStatusChannelChannelIdVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusChannelChannelIdVoltageResponse, error) {
	rsp, err := c.GetStatusChannelChannelIdVoltage(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChannelChannelIdVoltageResponse(rsp)
}

// OptionsStatusChannelChannelIdVoltageWithResponse request returning *OptionsStatusChannelChannelIdVoltageResponse
func (c *ClientWithResponses) OptionsStatusChannelChannelIdVoltageWithResponse(ctx context.Context, channelId ChannelId, reqEditors ...RequestEditorFn) (*OptionsStatusChannelChannelIdVoltageResponse, error) {
	rsp, err := c.OptionsStatusChannelChannelIdVoltage(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusChannelChannelIdVoltageResponse(rsp)
}

// GetStatusDeviceWithResponse request returning *GetStatusDeviceResponse
func (c *ClientWithResponses) GetStatusDeviceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceResponse, error) {
	rsp, err := c.GetStatusDevice(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceResponse(rsp)
}

// GetStatusDeviceDanteWithResponse request returning *GetStatusDeviceDanteResponse
func (c *ClientWithResponses) GetStatusDeviceDanteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceDanteResponse, error) {
	rsp, err := c.GetStatusDeviceDante(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceDanteResponse(rsp)
}

// GetStatusDeviceErrorWithResponse request returning *GetStatusDeviceErrorResponse
func (c *ClientWithResponses) GetStatusDeviceErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceErrorResponse, error) {
	rsp, err := c.GetStatusDeviceError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceErrorResponse(rsp)
}

// GetStatusDeviceFanWithResponse request returning *GetStatusDeviceFanResponse
func (c *ClientWithResponses) GetStatusDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceFanResponse, error) {
	rsp, err := c.GetStatusDeviceFan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceFanResponse(rsp)
}

// OptionsStatusDeviceFanWithResponse request returning *OptionsStatusDeviceFanResponse
func (c *ClientWithResponses) OptionsStatusDeviceFanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusDeviceFanResponse, error) {
	rsp, err := c.OptionsStatusDeviceFan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusDeviceFanResponse(rsp)
}

// GetStatusDeviceFpgaWithResponse request returning *GetStatusDeviceFpgaResponse
func (c *ClientWithResponses) GetStatusDeviceFpgaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceFpgaResponse, error) {
	rsp, err := c.GetStatusDeviceFpga(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceFpgaResponse(rsp)
}

// GetStatusDevicePsuWithResponse request returning *GetStatusDevicePsuResponse
func (c *ClientWithResponses) GetStatusDevicePsuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDevicePsuResponse, error) {
	rsp, err := c.GetStatusDevicePsu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDevicePsuResponse(rsp)
}

// OptionsStatusDevicePsuWithResponse request returning *OptionsStatusDevicePsuResponse
func (c *ClientWithResponses) OptionsStatusDevicePsuWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusDevicePsuResponse, error) {
	rsp, err := c.OptionsStatusDevicePsu(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusDevicePsuResponse(rsp)
}

// GetStatusDeviceRemotemuteWithResponse request returning *GetStatusDeviceRemotemuteResponse
func (c *ClientWithResponses) GetStatusDeviceRemotemuteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusDeviceRemotemuteResponse, error) {
	rsp, err := c.GetStatusDeviceRemotemute(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusDeviceRemotemuteResponse(rsp)
}

// GetStatusInterfaceWithResponse request returning *GetStatusInterfaceResponse
func (c *ClientWithResponses) GetStatusInterfaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceResponse, error) {
	rsp, err := c.GetStatusInterface(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceResponse(rsp)
}

// GetStatusInterfaceInterfacesWithResponse request returning *GetStatusInterfaceInterfacesResponse
func (c *ClientWithResponses) GetStatusInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesResponse, error) {
	rsp, err := c.GetStatusInterfaceInterfaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceInterfacesResponse(rsp)
}

// OptionsStatusInterfaceInterfacesWithResponse request returning *OptionsStatusInterfaceInterfacesResponse
func (c *ClientWithResponses) OptionsStatusInterfaceInterfacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OptionsStatusInterfaceInterfacesResponse, error) {
	rsp, err := c.OptionsStatusInterfaceInterfaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsStatusInterfaceInterfacesResponse(rsp)
}

// GetStatusInterfaceInterfacesInterfaceIdWithResponse request returning *GetStatusInterfaceInterfacesInterfaceIdResponse
func (c *ClientWithResponses) GetStatusInterfaceInterfacesInterfaceIdWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdResponse, error) {
	rsp, err := c.GetStatusInterfaceInterfacesInterfaceId(ctx, interfaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceInterfacesInterfaceIdResponse(rsp)
}

// GetStatusInterfaceInterfacesInterfaceIdInputchannelWithResponse request returning *GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse
func (c *ClientWithResponses) GetStatusInterfaceInterfacesInterfaceIdInputchannelWithResponse(ctx context.Context, interfaceId InterfaceId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	rsp, err := c.GetStatusInterfaceInterfacesInterfaceIdInputchannel(ctx, interfaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelResponse(rsp)
}

// GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse request returning *GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse
func (c *ClientWithResponses) GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse(ctx context.Context, interfaceId InterfaceId, channelId ChannelId, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	rsp, err := c.GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelId(ctx, interfaceId, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp)
}

// GetStatusInterfaceInternalWithResponse request returning *GetStatusInterfaceInternalResponse
func (c *ClientWithResponses) GetStatusInterfaceInternalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusInterfaceInternalResponse, error) {
	rsp, err := c.GetStatusInterfaceInternal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusInterfaceInternalResponse(rsp)
}

// GetStatusSaveWithResponse request returning *GetStatusSaveResponse
func (c *ClientWithResponses) GetStatusSaveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusSaveResponse, error) {
	rsp, err := c.GetStatusSave(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusSaveResponse(rsp)
}

// DeleteStatusSyslogWithResponse request returning *DeleteStatusSyslogResponse
func (c *ClientWithResponses) DeleteStatusSyslogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteStatusSyslogResponse, error) {
	rsp, err := c.DeleteStatusSyslog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusSyslogResponse(rsp)
}

// GetStatusSyslogWithResponse request returning *GetStatusSyslogResponse
func (c *ClientWithResponses) GetStatusSyslogWithResponse(ctx context.Context, params *GetStatusSyslogParams, reqEditors ...RequestEditorFn) (*GetStatusSyslogResponse, error) {
	rsp, err := c.GetStatusSyslog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusSyslogResponse(rsp)
}

// GetStatusSystemWithResponse request returning *GetStatusSystemResponse
func (c *ClientWithResponses) GetStatusSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusSystemResponse, error) {
	rsp, err := c.GetStatusSystem(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusSystemResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetInfoDeviceResponse parses an HTTP response from a GetInfoDeviceWithResponse call
func ParseGetInfoDeviceResponse(rsp *http.Response) (*GetInfoDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfoDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceInfos
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPresetRecallPresetNameResponse parses an HTTP response from a PutPresetRecallPresetNameWithResponse call
func ParsePutPresetRecallPresetNameResponse(rsp *http.Response) (*PutPresetRecallPresetNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPresetRecallPresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *string `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsPresetStorageResponse parses an HTTP response from a OptionsPresetStorageWithResponse call
func ParseOptionsPresetStorageResponse(rsp *http.Response) (*OptionsPresetStorageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsPresetStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PresetStorageOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseDeletePresetStoragePresetNameResponse parses an HTTP response from a DeletePresetStoragePresetNameWithResponse call
func ParseDeletePresetStoragePresetNameResponse(rsp *http.Response) (*DeletePresetStoragePresetNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePresetStoragePresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *string `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetPresetStoragePresetNameResponse parses an HTTP response from a GetPresetStoragePresetNameWithResponse call
func ParseGetPresetStoragePresetNameResponse(rsp *http.Response) (*GetPresetStoragePresetNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresetStoragePresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutPresetStoragePresetNameResponse parses an HTTP response from a PutPresetStoragePresetNameWithResponse call
func ParsePutPresetStoragePresetNameResponse(rsp *http.Response) (*PutPresetStoragePresetNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPresetStoragePresetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *string `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsResponse parses an HTTP response from a GetSettingsWithResponse call
func ParseGetSettingsResponse(rsp *http.Response) (*GetSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsResponse parses an HTTP response from a PutSettingsWithResponse call
func ParsePutSettingsResponse(rsp *http.Response) (*PutSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelResponse parses an HTTP response from a GetSettingsChannelWithResponse call
func ParseGetSettingsChannelResponse(rsp *http.Response) (*GetSettingsChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsChannelResponse parses an HTTP response from a OptionsSettingsChannelWithResponse call
func ParseOptionsSettingsChannelResponse(rsp *http.Response) (*OptionsSettingsChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// format [MIN, MAX, STEP, UNIT]
			ChannelId *[]interface{} `json:"channel_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelResponse parses an HTTP response from a PutSettingsChannelWithResponse call
func ParsePutSettingsChannelResponse(rsp *http.Response) (*PutSettingsChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdResponse parses an HTTP response from a GetSettingsChannelChannelIdWithResponse call
func ParseGetSettingsChannelChannelIdResponse(rsp *http.Response) (*GetSettingsChannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdResponse parses an HTTP response from a PutSettingsChannelChannelIdWithResponse call
func ParsePutSettingsChannelChannelIdResponse(rsp *http.Response) (*PutSettingsChannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAmpenableResponse parses an HTTP response from a GetSettingsChannelChannelIdAmpenableWithResponse call
func ParseGetSettingsChannelChannelIdAmpenableResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAmpenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAmpenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAmpenableResponse parses an HTTP response from a PutSettingsChannelChannelIdAmpenableWithResponse call
func ParsePutSettingsChannelChannelIdAmpenableResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAmpenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAmpenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAudioanalyzerResponse parses an HTTP response from a GetSettingsChannelChannelIdAudioanalyzerWithResponse call
func ParseGetSettingsChannelChannelIdAudioanalyzerResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAudioanalyzerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAudioanalyzerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannelAudioAnalyzer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAudioanalyzerResponse parses an HTTP response from a PutSettingsChannelChannelIdAudioanalyzerWithResponse call
func ParsePutSettingsChannelChannelIdAudioanalyzerResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAudioanalyzerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAudioanalyzerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAudioanalyzerEnableResponse parses an HTTP response from a GetSettingsChannelChannelIdAudioanalyzerEnableWithResponse call
func ParseGetSettingsChannelChannelIdAudioanalyzerEnableResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAudioanalyzerEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAudioanalyzerEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAudioanalyzerEnableResponse parses an HTTP response from a PutSettingsChannelChannelIdAudioanalyzerEnableWithResponse call
func ParsePutSettingsChannelChannelIdAudioanalyzerEnableResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAudioanalyzerEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAudioanalyzerEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAudioanalyzerReferenceResponse parses an HTTP response from a GetSettingsChannelChannelIdAudioanalyzerReferenceWithResponse call
func ParseGetSettingsChannelChannelIdAudioanalyzerReferenceResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAudioanalyzerReferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAudioanalyzerReferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannelAudioAnalyzerReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAudioanalyzerReferenceResponse parses an HTTP response from a PutSettingsChannelChannelIdAudioanalyzerReferenceWithResponse call
func ParsePutSettingsChannelChannelIdAudioanalyzerReferenceResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAudioanalyzerReferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAudioanalyzerReferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse parses an HTTP response from a GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse call
func ParseGetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse parses an HTTP response from a OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse call
func ParseOptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse parses an HTTP response from a PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceWithResponse call
func ParsePutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAudioanalyzerReferenceImpedanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse parses an HTTP response from a GetSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse call
func ParseGetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp *http.Response) (*GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse parses an HTTP response from a OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse call
func ParseOptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse parses an HTTP response from a PutSettingsChannelChannelIdAudioanalyzerReferencePhaseWithResponse call
func ParsePutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse(rsp *http.Response) (*PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdAudioanalyzerReferencePhaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdBridgeenableResponse parses an HTTP response from a GetSettingsChannelChannelIdBridgeenableWithResponse call
func ParseGetSettingsChannelChannelIdBridgeenableResponse(rsp *http.Response) (*GetSettingsChannelChannelIdBridgeenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdBridgeenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdBridgeenableResponse parses an HTTP response from a PutSettingsChannelChannelIdBridgeenableWithResponse call
func ParsePutSettingsChannelChannelIdBridgeenableResponse(rsp *http.Response) (*PutSettingsChannelChannelIdBridgeenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdBridgeenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspResponse parses an HTTP response from a GetSettingsChannelChannelIdDspWithResponse call
func ParseGetSettingsChannelChannelIdDspResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannelDsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspCurrentlimiterResponse parses an HTTP response from a GetSettingsChannelChannelIdDspCurrentlimiterWithResponse call
func ParseGetSettingsChannelChannelIdDspCurrentlimiterResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspCurrentlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsCurrentlimiter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspCurrentlimiterResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspCurrentlimiterWithResponse call
func ParseOptionsSettingsChannelChannelIdDspCurrentlimiterResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspCurrentlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsCurrentlimiterOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspCurrentlimiterResponse parses an HTTP response from a PutSettingsChannelChannelIdDspCurrentlimiterWithResponse call
func ParsePutSettingsChannelChannelIdDspCurrentlimiterResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspCurrentlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspCurrentlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspDelayResponse parses an HTTP response from a GetSettingsChannelChannelIdDspDelayWithResponse call
func ParseGetSettingsChannelChannelIdDspDelayResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspDelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspDelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDelay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspDelayResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspDelayWithResponse call
func ParseOptionsSettingsChannelChannelIdDspDelayResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspDelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspDelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDelayOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspDelayResponse parses an HTTP response from a PutSettingsChannelChannelIdDspDelayWithResponse call
func ParsePutSettingsChannelChannelIdDspDelayResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspDelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspDelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspEqResponse parses an HTTP response from a GetSettingsChannelChannelIdDspEqWithResponse call
func ParseGetSettingsChannelChannelIdDspEqResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspEqResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspEqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsEQs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspEqResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspEqWithResponse call
func ParseOptionsSettingsChannelChannelIdDspEqResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspEqResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspEqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsEQOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePostSettingsChannelChannelIdDspEqResponse parses an HTTP response from a PostSettingsChannelChannelIdDspEqWithResponse call
func ParsePostSettingsChannelChannelIdDspEqResponse(rsp *http.Response) (*PostSettingsChannelChannelIdDspEqResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSettingsChannelChannelIdDspEqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsEQ
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspEqResponse parses an HTTP response from a PutSettingsChannelChannelIdDspEqWithResponse call
func ParsePutSettingsChannelChannelIdDspEqResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspEqResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspEqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseDeleteSettingsChannelChannelIdDspEqEqIdResponse parses an HTTP response from a DeleteSettingsChannelChannelIdDspEqEqIdWithResponse call
func ParseDeleteSettingsChannelChannelIdDspEqEqIdResponse(rsp *http.Response) (*DeleteSettingsChannelChannelIdDspEqEqIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSettingsChannelChannelIdDspEqEqIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspEqEqIdResponse parses an HTTP response from a GetSettingsChannelChannelIdDspEqEqIdWithResponse call
func ParseGetSettingsChannelChannelIdDspEqEqIdResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspEqEqIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspEqEqIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsEQ
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspEqEqIdResponse parses an HTTP response from a PutSettingsChannelChannelIdDspEqEqIdWithResponse call
func ParsePutSettingsChannelChannelIdDspEqEqIdResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspEqEqIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspEqEqIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspEqenableResponse parses an HTTP response from a GetSettingsChannelChannelIdDspEqenableWithResponse call
func ParseGetSettingsChannelChannelIdDspEqenableResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspEqenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspEqenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspEqenableResponse parses an HTTP response from a PutSettingsChannelChannelIdDspEqenableWithResponse call
func ParsePutSettingsChannelChannelIdDspEqenableResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspEqenableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspEqenableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspFirResponse parses an HTTP response from a GetSettingsChannelChannelIdDspFirWithResponse call
func ParseGetSettingsChannelChannelIdDspFirResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspFirResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspFirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsFIR
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspFirResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspFirWithResponse call
func ParseOptionsSettingsChannelChannelIdDspFirResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspFirResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspFirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsFIROptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspFirResponse parses an HTTP response from a PutSettingsChannelChannelIdDspFirWithResponse call
func ParsePutSettingsChannelChannelIdDspFirResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspFirResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspFirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspGroupmuteResponse parses an HTTP response from a GetSettingsChannelChannelIdDspGroupmuteWithResponse call
func ParseGetSettingsChannelChannelIdDspGroupmuteResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspGroupmuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspGroupmuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspMuteResponse parses an HTTP response from a GetSettingsChannelChannelIdDspMuteWithResponse call
func ParseGetSettingsChannelChannelIdDspMuteResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspMuteResponse parses an HTTP response from a PutSettingsChannelChannelIdDspMuteWithResponse call
func ParsePutSettingsChannelChannelIdDspMuteResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspPatchResponse parses an HTTP response from a GetSettingsChannelChannelIdDspPatchWithResponse call
func ParseGetSettingsChannelChannelIdDspPatchResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsPatches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspPatchResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspPatchWithResponse call
func ParseOptionsSettingsChannelChannelIdDspPatchResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsPatchOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspPatchResponse parses an HTTP response from a PutSettingsChannelChannelIdDspPatchWithResponse call
func ParsePutSettingsChannelChannelIdDspPatchResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspPatchPatchIdResponse parses an HTTP response from a GetSettingsChannelChannelIdDspPatchPatchIdWithResponse call
func ParseGetSettingsChannelChannelIdDspPatchPatchIdResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspPatchPatchIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspPatchPatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsPatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspPhaseResponse parses an HTTP response from a GetSettingsChannelChannelIdDspPhaseWithResponse call
func ParseGetSettingsChannelChannelIdDspPhaseResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspPhaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspPhaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspPhaseResponse parses an HTTP response from a PutSettingsChannelChannelIdDspPhaseWithResponse call
func ParsePutSettingsChannelChannelIdDspPhaseResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspPhaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspPhaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspPowerlimiterResponse parses an HTTP response from a GetSettingsChannelChannelIdDspPowerlimiterWithResponse call
func ParseGetSettingsChannelChannelIdDspPowerlimiterResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspPowerlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsPowerlimiter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspPowerlimiterResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspPowerlimiterWithResponse call
func ParseOptionsSettingsChannelChannelIdDspPowerlimiterResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspPowerlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsPowerlimiterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspPowerlimiterResponse parses an HTTP response from a PutSettingsChannelChannelIdDspPowerlimiterWithResponse call
func ParsePutSettingsChannelChannelIdDspPowerlimiterResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspPowerlimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspPowerlimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspVoltagelimiterResponse parses an HTTP response from a GetSettingsChannelChannelIdDspVoltagelimiterWithResponse call
func ParseGetSettingsChannelChannelIdDspVoltagelimiterResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspVoltagelimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsVoltagelimiters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspVoltagelimiterResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspVoltagelimiterWithResponse call
func ParseOptionsSettingsChannelChannelIdDspVoltagelimiterResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspVoltagelimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsVoltagelimiterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspVoltagelimiterResponse parses an HTTP response from a PutSettingsChannelChannelIdDspVoltagelimiterWithResponse call
func ParsePutSettingsChannelChannelIdDspVoltagelimiterResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspVoltagelimiterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspVoltagelimiterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse parses an HTTP response from a GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdWithResponse call
func ParseGetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspVoltagelimiterVoltagelimiterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsVoltagelimiter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdDspVolumeResponse parses an HTTP response from a GetSettingsChannelChannelIdDspVolumeWithResponse call
func ParseGetSettingsChannelChannelIdDspVolumeResponse(rsp *http.Response) (*GetSettingsChannelChannelIdDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdDspVolumeResponse parses an HTTP response from a OptionsSettingsChannelChannelIdDspVolumeWithResponse call
func ParseOptionsSettingsChannelChannelIdDspVolumeResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdDspVolumeResponse parses an HTTP response from a PutSettingsChannelChannelIdDspVolumeWithResponse call
func ParsePutSettingsChannelChannelIdDspVolumeResponse(rsp *http.Response) (*PutSettingsChannelChannelIdDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdNameResponse parses an HTTP response from a GetSettingsChannelChannelIdNameWithResponse call
func ParseGetSettingsChannelChannelIdNameResponse(rsp *http.Response) (*GetSettingsChannelChannelIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdNameResponse parses an HTTP response from a OptionsSettingsChannelChannelIdNameWithResponse call
func ParseOptionsSettingsChannelChannelIdNameResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Length *int `json:"length,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdNameResponse parses an HTTP response from a PutSettingsChannelChannelIdNameWithResponse call
func ParsePutSettingsChannelChannelIdNameResponse(rsp *http.Response) (*PutSettingsChannelChannelIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdSpeakerResponse parses an HTTP response from a GetSettingsChannelChannelIdSpeakerWithResponse call
func ParseGetSettingsChannelChannelIdSpeakerResponse(rsp *http.Response) (*GetSettingsChannelChannelIdSpeakerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdSpeakerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsSpeaker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdSpeakerResponse parses an HTTP response from a PutSettingsChannelChannelIdSpeakerWithResponse call
func ParsePutSettingsChannelChannelIdSpeakerResponse(rsp *http.Response) (*PutSettingsChannelChannelIdSpeakerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdSpeakerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdSpeakerDetectionResponse parses an HTTP response from a GetSettingsChannelChannelIdSpeakerDetectionWithResponse call
func ParseGetSettingsChannelChannelIdSpeakerDetectionResponse(rsp *http.Response) (*GetSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdSpeakerDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsSpeakerDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsChannelChannelIdSpeakerDetectionResponse parses an HTTP response from a OptionsSettingsChannelChannelIdSpeakerDetectionWithResponse call
func ParseOptionsSettingsChannelChannelIdSpeakerDetectionResponse(rsp *http.Response) (*OptionsSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsChannelChannelIdSpeakerDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsSpeakerDetectionOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdSpeakerDetectionResponse parses an HTTP response from a PutSettingsChannelChannelIdSpeakerDetectionWithResponse call
func ParsePutSettingsChannelChannelIdSpeakerDetectionResponse(rsp *http.Response) (*PutSettingsChannelChannelIdSpeakerDetectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdSpeakerDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseDeleteSettingsChannelChannelIdSpeakerPresetResponse parses an HTTP response from a DeleteSettingsChannelChannelIdSpeakerPresetWithResponse call
func ParseDeleteSettingsChannelChannelIdSpeakerPresetResponse(rsp *http.Response) (*DeleteSettingsChannelChannelIdSpeakerPresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSettingsChannelChannelIdSpeakerPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsChannelChannelIdSpeakerPresetResponse parses an HTTP response from a GetSettingsChannelChannelIdSpeakerPresetWithResponse call
func ParseGetSettingsChannelChannelIdSpeakerPresetResponse(rsp *http.Response) (*GetSettingsChannelChannelIdSpeakerPresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsChannelChannelIdSpeakerPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsSpeakerPreset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsChannelChannelIdSpeakerPresetResponse parses an HTTP response from a PutSettingsChannelChannelIdSpeakerPresetWithResponse call
func ParsePutSettingsChannelChannelIdSpeakerPresetResponse(rsp *http.Response) (*PutSettingsChannelChannelIdSpeakerPresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsChannelChannelIdSpeakerPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceResponse parses an HTTP response from a GetSettingsDeviceWithResponse call
func ParseGetSettingsDeviceResponse(rsp *http.Response) (*GetSettingsDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceResponse parses an HTTP response from a PutSettingsDeviceWithResponse call
func ParsePutSettingsDeviceResponse(rsp *http.Response) (*PutSettingsDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDanteResponse parses an HTTP response from a GetSettingsDeviceDanteWithResponse call
func ParseGetSettingsDeviceDanteResponse(rsp *http.Response) (*GetSettingsDeviceDanteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDanteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDeviceDante
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDanteIdentityResponse parses an HTTP response from a GetSettingsDeviceDanteIdentityWithResponse call
func ParseGetSettingsDeviceDanteIdentityResponse(rsp *http.Response) (*GetSettingsDeviceDanteIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDanteIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDanteIdentityResponse parses an HTTP response from a PutSettingsDeviceDanteIdentityWithResponse call
func ParsePutSettingsDeviceDanteIdentityResponse(rsp *http.Response) (*PutSettingsDeviceDanteIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDanteIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDanteNetworkResponse parses an HTTP response from a GetSettingsDeviceDanteNetworkWithResponse call
func ParseGetSettingsDeviceDanteNetworkResponse(rsp *http.Response) (*GetSettingsDeviceDanteNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDanteNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDeviceDanteNetwork
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsDeviceDanteNetworkResponse parses an HTTP response from a OptionsSettingsDeviceDanteNetworkWithResponse call
func ParseOptionsSettingsDeviceDanteNetworkResponse(rsp *http.Response) (*OptionsSettingsDeviceDanteNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceDanteNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDeviceDanteNetworkOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDanteNetworkResponse parses an HTTP response from a PutSettingsDeviceDanteNetworkWithResponse call
func ParsePutSettingsDeviceDanteNetworkResponse(rsp *http.Response) (*PutSettingsDeviceDanteNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDanteNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDspResponse parses an HTTP response from a GetSettingsDeviceDspWithResponse call
func ParseGetSettingsDeviceDspResponse(rsp *http.Response) (*GetSettingsDeviceDspResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDspResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsDeviceDsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDspResponse parses an HTTP response from a PutSettingsDeviceDspWithResponse call
func ParsePutSettingsDeviceDspResponse(rsp *http.Response) (*PutSettingsDeviceDspResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDspResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDspMuteResponse parses an HTTP response from a GetSettingsDeviceDspMuteWithResponse call
func ParseGetSettingsDeviceDspMuteResponse(rsp *http.Response) (*GetSettingsDeviceDspMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDspMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDspMuteResponse parses an HTTP response from a PutSettingsDeviceDspMuteWithResponse call
func ParsePutSettingsDeviceDspMuteResponse(rsp *http.Response) (*PutSettingsDeviceDspMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDspMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDspStartupmuteResponse parses an HTTP response from a GetSettingsDeviceDspStartupmuteWithResponse call
func ParseGetSettingsDeviceDspStartupmuteResponse(rsp *http.Response) (*GetSettingsDeviceDspStartupmuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDspStartupmuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDspStartupmuteResponse parses an HTTP response from a PutSettingsDeviceDspStartupmuteWithResponse call
func ParsePutSettingsDeviceDspStartupmuteResponse(rsp *http.Response) (*PutSettingsDeviceDspStartupmuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDspStartupmuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDspVolumeResponse parses an HTTP response from a GetSettingsDeviceDspVolumeWithResponse call
func ParseGetSettingsDeviceDspVolumeResponse(rsp *http.Response) (*GetSettingsDeviceDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Volume
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsDeviceDspVolumeResponse parses an HTTP response from a OptionsSettingsDeviceDspVolumeWithResponse call
func ParseOptionsSettingsDeviceDspVolumeResponse(rsp *http.Response) (*OptionsSettingsDeviceDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDspVolumeResponse parses an HTTP response from a PutSettingsDeviceDspVolumeWithResponse call
func ParsePutSettingsDeviceDspVolumeResponse(rsp *http.Response) (*PutSettingsDeviceDspVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDspVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceDspVolumerampResponse parses an HTTP response from a GetSettingsDeviceDspVolumerampWithResponse call
func ParseGetSettingsDeviceDspVolumerampResponse(rsp *http.Response) (*GetSettingsDeviceDspVolumerampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceDspVolumerampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsVolumeramp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsDeviceDspVolumerampResponse parses an HTTP response from a OptionsSettingsDeviceDspVolumerampWithResponse call
func ParseOptionsSettingsDeviceDspVolumerampResponse(rsp *http.Response) (*OptionsSettingsDeviceDspVolumerampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceDspVolumerampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// format [MIN, MAX, STEP, UNIT]
			Time *[]interface{} `json:"time,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceDspVolumerampResponse parses an HTTP response from a PutSettingsDeviceDspVolumerampWithResponse call
func ParsePutSettingsDeviceDspVolumerampResponse(rsp *http.Response) (*PutSettingsDeviceDspVolumerampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceDspVolumerampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceFanResponse parses an HTTP response from a GetSettingsDeviceFanWithResponse call
func ParseGetSettingsDeviceFanResponse(rsp *http.Response) (*GetSettingsDeviceFanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceFanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsFan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceFanResponse parses an HTTP response from a PutSettingsDeviceFanWithResponse call
func ParsePutSettingsDeviceFanResponse(rsp *http.Response) (*PutSettingsDeviceFanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceFanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingResponse parses an HTTP response from a GetSettingsDeviceGroupingWithResponse call
func ParseGetSettingsDeviceGroupingResponse(rsp *http.Response) (*GetSettingsDeviceGroupingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsGrouping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingResponse parses an HTTP response from a PutSettingsDeviceGroupingWithResponse call
func ParsePutSettingsDeviceGroupingResponse(rsp *http.Response) (*PutSettingsDeviceGroupingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsWithResponse call
func ParseGetSettingsDeviceGroupingGroupsResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsDeviceGroupingGroupsResponse parses an HTTP response from a OptionsSettingsDeviceGroupingGroupsWithResponse call
func ParseOptionsSettingsDeviceGroupingGroupsResponse(rsp *http.Response) (*OptionsSettingsDeviceGroupingGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceGroupingGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// format [MIN, MAX, STEP, UNIT]
			ChannelId *[]interface{} `json:"channel_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsWithResponse call
func ParsePutSettingsDeviceGroupingGroupsResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdAssignResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdAssignWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsAssigns
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse parses an HTTP response from a OptionsSettingsDeviceGroupingGroupsGroupIdAssignWithResponse call
func ParseOptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp *http.Response) (*OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceGroupingGroupsGroupIdAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// format [MIN, MAX, STEP, UNIT]
			ChannelId *[]interface{} `json:"channel_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsGroupIdAssignResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsGroupIdAssignWithResponse call
func ParsePutSettingsDeviceGroupingGroupsGroupIdAssignResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsGroupIdAssignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsGroupIdAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdAssignAssignIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsAssign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdEnableResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdEnableWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdEnableResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsGroupIdEnableResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsGroupIdEnableWithResponse call
func ParsePutSettingsDeviceGroupingGroupsGroupIdEnableResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsGroupIdEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsGroupIdEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdMuteResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdMuteWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdMuteResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsGroupIdMuteResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsGroupIdMuteWithResponse call
func ParsePutSettingsDeviceGroupingGroupsGroupIdMuteResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsGroupIdMuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsGroupIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdNameResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdNameWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsDeviceGroupingGroupsGroupIdNameResponse parses an HTTP response from a OptionsSettingsDeviceGroupingGroupsGroupIdNameWithResponse call
func ParseOptionsSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp *http.Response) (*OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceGroupingGroupsGroupIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Length *int `json:"length,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsGroupIdNameResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsGroupIdNameWithResponse call
func ParsePutSettingsDeviceGroupingGroupsGroupIdNameResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsGroupIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsGroupIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingGroupsGroupIdSoloResponse parses an HTTP response from a GetSettingsDeviceGroupingGroupsGroupIdSoloWithResponse call
func ParseGetSettingsDeviceGroupingGroupsGroupIdSoloResponse(rsp *http.Response) (*GetSettingsDeviceGroupingGroupsGroupIdSoloResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingGroupsGroupIdSoloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingGroupsGroupIdSoloResponse parses an HTTP response from a PutSettingsDeviceGroupingGroupsGroupIdSoloWithResponse call
func ParsePutSettingsDeviceGroupingGroupsGroupIdSoloResponse(rsp *http.Response) (*PutSettingsDeviceGroupingGroupsGroupIdSoloResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingGroupsGroupIdSoloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceGroupingSoloautoclearResponse parses an HTTP response from a GetSettingsDeviceGroupingSoloautoclearWithResponse call
func ParseGetSettingsDeviceGroupingSoloautoclearResponse(rsp *http.Response) (*GetSettingsDeviceGroupingSoloautoclearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceGroupingSoloautoclearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceGroupingSoloautoclearResponse parses an HTTP response from a PutSettingsDeviceGroupingSoloautoclearWithResponse call
func ParsePutSettingsDeviceGroupingSoloautoclearResponse(rsp *http.Response) (*PutSettingsDeviceGroupingSoloautoclearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceGroupingSoloautoclearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceIdentifyResponse parses an HTTP response from a GetSettingsDeviceIdentifyWithResponse call
func ParseGetSettingsDeviceIdentifyResponse(rsp *http.Response) (*GetSettingsDeviceIdentifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceIdentifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceIdentifyResponse parses an HTTP response from a PutSettingsDeviceIdentifyWithResponse call
func ParsePutSettingsDeviceIdentifyResponse(rsp *http.Response) (*PutSettingsDeviceIdentifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceIdentifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceLocationResponse parses an HTTP response from a GetSettingsDeviceLocationWithResponse call
func ParseGetSettingsDeviceLocationResponse(rsp *http.Response) (*GetSettingsDeviceLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsDeviceLocationResponse parses an HTTP response from a OptionsSettingsDeviceLocationWithResponse call
func ParseOptionsSettingsDeviceLocationResponse(rsp *http.Response) (*OptionsSettingsDeviceLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Length *int `json:"length,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceLocationResponse parses an HTTP response from a PutSettingsDeviceLocationWithResponse call
func ParsePutSettingsDeviceLocationResponse(rsp *http.Response) (*PutSettingsDeviceLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceMainsvoltageResponse parses an HTTP response from a GetSettingsDeviceMainsvoltageWithResponse call
func ParseGetSettingsDeviceMainsvoltageResponse(rsp *http.Response) (*GetSettingsDeviceMainsvoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceMainsvoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsDeviceMainsvoltageResponse parses an HTTP response from a OptionsSettingsDeviceMainsvoltageWithResponse call
func ParseOptionsSettingsDeviceMainsvoltageResponse(rsp *http.Response) (*OptionsSettingsDeviceMainsvoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceMainsvoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegerOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceMainsvoltageResponse parses an HTTP response from a PutSettingsDeviceMainsvoltageWithResponse call
func ParsePutSettingsDeviceMainsvoltageResponse(rsp *http.Response) (*PutSettingsDeviceMainsvoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceMainsvoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceNameResponse parses an HTTP response from a GetSettingsDeviceNameWithResponse call
func ParseGetSettingsDeviceNameResponse(rsp *http.Response) (*GetSettingsDeviceNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsDeviceNameResponse parses an HTTP response from a OptionsSettingsDeviceNameWithResponse call
func ParseOptionsSettingsDeviceNameResponse(rsp *http.Response) (*OptionsSettingsDeviceNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Length *int `json:"length,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceNameResponse parses an HTTP response from a PutSettingsDeviceNameWithResponse call
func ParsePutSettingsDeviceNameResponse(rsp *http.Response) (*PutSettingsDeviceNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceNetworkResponse parses an HTTP response from a GetSettingsDeviceNetworkWithResponse call
func ParseGetSettingsDeviceNetworkResponse(rsp *http.Response) (*GetSettingsDeviceNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsNetwork
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsDeviceNetworkResponse parses an HTTP response from a OptionsSettingsDeviceNetworkWithResponse call
func ParseOptionsSettingsDeviceNetworkResponse(rsp *http.Response) (*OptionsSettingsDeviceNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsDeviceNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsNetworkOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceNetworkResponse parses an HTTP response from a PutSettingsDeviceNetworkWithResponse call
func ParsePutSettingsDeviceNetworkResponse(rsp *http.Response) (*PutSettingsDeviceNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceRemotemuteResponse parses an HTTP response from a GetSettingsDeviceRemotemuteWithResponse call
func ParseGetSettingsDeviceRemotemuteResponse(rsp *http.Response) (*GetSettingsDeviceRemotemuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceRemotemuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsRemotemute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceRemotemuteResponse parses an HTTP response from a PutSettingsDeviceRemotemuteWithResponse call
func ParsePutSettingsDeviceRemotemuteResponse(rsp *http.Response) (*PutSettingsDeviceRemotemuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceRemotemuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceSyslogResponse parses an HTTP response from a GetSettingsDeviceSyslogWithResponse call
func ParseGetSettingsDeviceSyslogResponse(rsp *http.Response) (*GetSettingsDeviceSyslogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceSyslogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsSyslog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceSyslogResponse parses an HTTP response from a PutSettingsDeviceSyslogWithResponse call
func ParsePutSettingsDeviceSyslogResponse(rsp *http.Response) (*PutSettingsDeviceSyslogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceSyslogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceTimeResponse parses an HTTP response from a GetSettingsDeviceTimeWithResponse call
func ParseGetSettingsDeviceTimeResponse(rsp *http.Response) (*GetSettingsDeviceTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceTimeResponse parses an HTTP response from a PutSettingsDeviceTimeWithResponse call
func ParsePutSettingsDeviceTimeResponse(rsp *http.Response) (*PutSettingsDeviceTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceTimeCurrentResponse parses an HTTP response from a GetSettingsDeviceTimeCurrentWithResponse call
func ParseGetSettingsDeviceTimeCurrentResponse(rsp *http.Response) (*GetSettingsDeviceTimeCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceTimeCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsTimeCurrent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceTimeCurrentResponse parses an HTTP response from a PutSettingsDeviceTimeCurrentWithResponse call
func ParsePutSettingsDeviceTimeCurrentResponse(rsp *http.Response) (*PutSettingsDeviceTimeCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceTimeCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsDeviceTimeTimezoneResponse parses an HTTP response from a GetSettingsDeviceTimeTimezoneWithResponse call
func ParseGetSettingsDeviceTimeTimezoneResponse(rsp *http.Response) (*GetSettingsDeviceTimeTimezoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsDeviceTimeTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsTimezone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsDeviceTimeTimezoneResponse parses an HTTP response from a PutSettingsDeviceTimeTimezoneWithResponse call
func ParsePutSettingsDeviceTimeTimezoneResponse(rsp *http.Response) (*PutSettingsDeviceTimeTimezoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsDeviceTimeTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceResponse parses an HTTP response from a GetSettingsInterfaceWithResponse call
func ParseGetSettingsInterfaceResponse(rsp *http.Response) (*GetSettingsInterfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsInterfaceResponse parses an HTTP response from a PutSettingsInterfaceWithResponse call
func ParsePutSettingsInterfaceResponse(rsp *http.Response) (*PutSettingsInterfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesResponse parses an HTTP response from a GetSettingsInterfaceInterfacesWithResponse call
func ParseGetSettingsInterfaceInterfacesResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsInterfaceInterfacesResponse parses an HTTP response from a OptionsSettingsInterfaceInterfacesWithResponse call
func ParseOptionsSettingsInterfaceInterfacesResponse(rsp *http.Response) (*OptionsSettingsInterfaceInterfacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsInterfaceInterfacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfacesOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesResponse parses an HTTP response from a PutSettingsInterfaceInterfacesWithResponse call
func ParsePutSettingsInterfaceInterfacesResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdInputchannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigInputChannels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdInputchannelWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdInputchannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigInputChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest String
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigInputChannelPatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdInputchannelChannelIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigOutputChannels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdOutputchannelWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdOutputchannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigOutputChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse parses an HTTP response from a GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse call
func ParseGetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp *http.Response) (*GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigOutputChannelPatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse parses an HTTP response from a OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse call
func ParseOptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp *http.Response) (*OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsInterfaceConfigOutputChannelPatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse parses an HTTP response from a PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchWithResponse call
func ParsePutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse(rsp *http.Response) (*PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceInterfacesInterfaceIdOutputchannelChannelIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceMadithroughResponse parses an HTTP response from a GetSettingsInterfaceMadithroughWithResponse call
func ParseGetSettingsInterfaceMadithroughResponse(rsp *http.Response) (*GetSettingsInterfaceMadithroughResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceMadithroughResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsMadithrough
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsInterfaceMadithroughResponse parses an HTTP response from a OptionsSettingsInterfaceMadithroughWithResponse call
func ParseOptionsSettingsInterfaceMadithroughResponse(rsp *http.Response) (*OptionsSettingsInterfaceMadithroughResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsInterfaceMadithroughResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsMadithroughOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsInterfaceMadithroughResponse parses an HTTP response from a PutSettingsInterfaceMadithroughWithResponse call
func ParsePutSettingsInterfaceMadithroughResponse(rsp *http.Response) (*PutSettingsInterfaceMadithroughResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceMadithroughResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSettingsInterfaceSyncResponse parses an HTTP response from a GetSettingsInterfaceSyncWithResponse call
func ParseGetSettingsInterfaceSyncResponse(rsp *http.Response) (*GetSettingsInterfaceSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsInterfaceSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsAudioSyncGet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsSettingsInterfaceSyncResponse parses an HTTP response from a OptionsSettingsInterfaceSyncWithResponse call
func ParseOptionsSettingsInterfaceSyncResponse(rsp *http.Response) (*OptionsSettingsInterfaceSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSettingsInterfaceSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsAudioSyncOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsInterfaceSyncResponse parses an HTTP response from a PutSettingsInterfaceSyncWithResponse call
func ParsePutSettingsInterfaceSyncResponse(rsp *http.Response) (*PutSettingsInterfaceSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsInterfaceSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParsePutSettingsSaveResponse parses an HTTP response from a PutSettingsSaveWithResponse call
func ParsePutSettingsSaveResponse(rsp *http.Response) (*PutSettingsSaveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsSaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *string `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/html) unsupported

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetSpeakerpresetResponse parses an HTTP response from a GetSpeakerpresetWithResponse call
func ParseGetSpeakerpresetResponse(rsp *http.Response) (*GetSpeakerpresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpeakerpresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeakerpresetValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsSpeakerpresetResponse parses an HTTP response from a OptionsSpeakerpresetWithResponse call
func ParseOptionsSpeakerpresetResponse(rsp *http.Response) (*OptionsSpeakerpresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsSpeakerpresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeakerpresetOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSpeakerpresetResponse parses an HTTP response from a PutSpeakerpresetWithResponse call
func ParsePutSpeakerpresetResponse(rsp *http.Response) (*PutSpeakerpresetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSpeakerpresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusChannelResponse parses an HTTP response from a GetStatusChannelWithResponse call
func ParseGetStatusChannelResponse(rsp *http.Response) (*GetStatusChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChannels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsStatusChannelResponse parses an HTTP response from a OptionsStatusChannelWithResponse call
func ParseOptionsStatusChannelResponse(rsp *http.Response) (*OptionsStatusChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// format [MIN, MAX, STEP, UNIT]
			ChannelId *[]interface{} `json:"channel_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdResponse parses an HTTP response from a GetStatusChannelChannelIdWithResponse call
func ParseGetStatusChannelChannelIdResponse(rsp *http.Response) (*GetStatusChannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdActiveResponse parses an HTTP response from a GetStatusChannelChannelIdActiveWithResponse call
func ParseGetStatusChannelChannelIdActiveResponse(rsp *http.Response) (*GetStatusChannelChannelIdActiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Boolean
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAmpResponse parses an HTTP response from a GetStatusChannelChannelIdAmpWithResponse call
func ParseGetStatusChannelChannelIdAmpResponse(rsp *http.Response) (*GetStatusChannelChannelIdAmpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAmp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdAmpResponse parses an HTTP response from a OptionsStatusChannelChannelIdAmpWithResponse call
func ParseOptionsStatusChannelChannelIdAmpResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdAmpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdAmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAmpOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioanalyzer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerCurrentResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerCurrentWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerCurrentResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioAnalyzerValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerCurrentRmsWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerCurrentRmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioAnalyzerValueRMS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse parses an HTTP response from a OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumWithResponse call
func ParseOptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdAudioanalyzerCurrentSpectrumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerImpedanceResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerImpedanceWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerImpedanceResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerImpedanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerImpedanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioanalyzerImpedance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse parses an HTTP response from a OptionsStatusChannelChannelIdAudioanalyzerImpedanceWithResponse call
func ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdAudioanalyzerImpedanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioanalyzerImpedance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse parses an HTTP response from a OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryWithResponse call
func ParseOptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdAudioanalyzerImpedanceMomentaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerVoltageResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerVoltageWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerVoltageResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerVoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerVoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioAnalyzerValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerVoltageRmsWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerVoltageRmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusAudioAnalyzerValueRMS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse parses an HTTP response from a GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse call
func ParseGetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse(rsp *http.Response) (*GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse parses an HTTP response from a OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumWithResponse call
func ParseOptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdAudioanalyzerVoltageSpectrumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdCurrentResponse parses an HTTP response from a GetStatusChannelChannelIdCurrentWithResponse call
func ParseGetStatusChannelChannelIdCurrentResponse(rsp *http.Response) (*GetStatusChannelChannelIdCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdCurrentResponse parses an HTTP response from a OptionsStatusChannelChannelIdCurrentWithResponse call
func ParseOptionsStatusChannelChannelIdCurrentResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevelOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdDspDelayResponse parses an HTTP response from a GetStatusChannelChannelIdDspDelayWithResponse call
func ParseGetStatusChannelChannelIdDspDelayResponse(rsp *http.Response) (*GetStatusChannelChannelIdDspDelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdDspDelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusDelay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdDspEqResponse parses an HTTP response from a GetStatusChannelChannelIdDspEqWithResponse call
func ParseGetStatusChannelChannelIdDspEqResponse(rsp *http.Response) (*GetStatusChannelChannelIdDspEqResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdDspEqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Load *float32 `json:"load,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdDspLevelResponse parses an HTTP response from a GetStatusChannelChannelIdDspLevelWithResponse call
func ParseGetStatusChannelChannelIdDspLevelResponse(rsp *http.Response) (*GetStatusChannelChannelIdDspLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdDspLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdDspLevelResponse parses an HTTP response from a OptionsStatusChannelChannelIdDspLevelWithResponse call
func ParseOptionsStatusChannelChannelIdDspLevelResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdDspLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdDspLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusLevelOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdDspReductionResponse parses an HTTP response from a GetStatusChannelChannelIdDspReductionWithResponse call
func ParseGetStatusChannelChannelIdDspReductionResponse(rsp *http.Response) (*GetStatusChannelChannelIdDspReductionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdDspReductionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusReduction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdDspReductionResponse parses an HTTP response from a OptionsStatusChannelChannelIdDspReductionWithResponse call
func ParseOptionsStatusChannelChannelIdDspReductionResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdDspReductionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdDspReductionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusReductionOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdErrorResponse parses an HTTP response from a GetStatusChannelChannelIdErrorWithResponse call
func ParseGetStatusChannelChannelIdErrorResponse(rsp *http.Response) (*GetStatusChannelChannelIdErrorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdPowerResponse parses an HTTP response from a GetStatusChannelChannelIdPowerWithResponse call
func ParseGetStatusChannelChannelIdPowerResponse(rsp *http.Response) (*GetStatusChannelChannelIdPowerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdPowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdPowerResponse parses an HTTP response from a OptionsStatusChannelChannelIdPowerWithResponse call
func ParseOptionsStatusChannelChannelIdPowerResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdPowerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdPowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevelOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdSpeakerResponse parses an HTTP response from a GetStatusChannelChannelIdSpeakerWithResponse call
func ParseGetStatusChannelChannelIdSpeakerResponse(rsp *http.Response) (*GetStatusChannelChannelIdSpeakerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdSpeakerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusSpeaker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdSpeakerResponse parses an HTTP response from a OptionsStatusChannelChannelIdSpeakerWithResponse call
func ParseOptionsStatusChannelChannelIdSpeakerResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdSpeakerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdSpeakerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusSpeakerOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusChannelChannelIdVoltageResponse parses an HTTP response from a GetStatusChannelChannelIdVoltageWithResponse call
func ParseGetStatusChannelChannelIdVoltageResponse(rsp *http.Response) (*GetStatusChannelChannelIdVoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChannelChannelIdVoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseOptionsStatusChannelChannelIdVoltageResponse parses an HTTP response from a OptionsStatusChannelChannelIdVoltageWithResponse call
func ParseOptionsStatusChannelChannelIdVoltageResponse(rsp *http.Response) (*OptionsStatusChannelChannelIdVoltageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusChannelChannelIdVoltageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusCurrentPowerVoltageLevelOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusDeviceResponse parses an HTTP response from a GetStatusDeviceWithResponse call
func ParseGetStatusDeviceResponse(rsp *http.Response) (*GetStatusDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDeviceDanteResponse parses an HTTP response from a GetStatusDeviceDanteWithResponse call
func ParseGetStatusDeviceDanteResponse(rsp *http.Response) (*GetStatusDeviceDanteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceDanteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// broolyn init status
			Init *bool `json:"init,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDeviceErrorResponse parses an HTTP response from a GetStatusDeviceErrorWithResponse call
func ParseGetStatusDeviceErrorResponse(rsp *http.Response) (*GetStatusDeviceErrorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDeviceFanResponse parses an HTTP response from a GetStatusDeviceFanWithResponse call
func ParseGetStatusDeviceFanResponse(rsp *http.Response) (*GetStatusDeviceFanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceFanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusFan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsStatusDeviceFanResponse parses an HTTP response from a OptionsStatusDeviceFanWithResponse call
func ParseOptionsStatusDeviceFanResponse(rsp *http.Response) (*OptionsStatusDeviceFanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusDeviceFanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusFanOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDeviceFpgaResponse parses an HTTP response from a GetStatusDeviceFpgaWithResponse call
func ParseGetStatusDeviceFpgaResponse(rsp *http.Response) (*GetStatusDeviceFpgaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceFpgaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusFPGA
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDevicePsuResponse parses an HTTP response from a GetStatusDevicePsuWithResponse call
func ParseGetStatusDevicePsuResponse(rsp *http.Response) (*GetStatusDevicePsuResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDevicePsuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPSU
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsStatusDevicePsuResponse parses an HTTP response from a OptionsStatusDevicePsuWithResponse call
func ParseOptionsStatusDevicePsuResponse(rsp *http.Response) (*OptionsStatusDevicePsuResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusDevicePsuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPSUOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusDeviceRemotemuteResponse parses an HTTP response from a GetStatusDeviceRemotemuteWithResponse call
func ParseGetStatusDeviceRemotemuteResponse(rsp *http.Response) (*GetStatusDeviceRemotemuteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusDeviceRemotemuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusRemotemute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusInterfaceResponse parses an HTTP response from a GetStatusInterfaceWithResponse call
func ParseGetStatusInterfaceResponse(rsp *http.Response) (*GetStatusInterfaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusInterfaceInterfacesResponse parses an HTTP response from a GetStatusInterfaceInterfacesWithResponse call
func ParseGetStatusInterfaceInterfacesResponse(rsp *http.Response) (*GetStatusInterfaceInterfacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceInterfacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInterfaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOptionsStatusInterfaceInterfacesResponse parses an HTTP response from a OptionsStatusInterfaceInterfacesWithResponse call
func ParseOptionsStatusInterfaceInterfacesResponse(rsp *http.Response) (*OptionsStatusInterfaceInterfacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsStatusInterfaceInterfacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInterfacesOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusInterfaceInterfacesInterfaceIdResponse parses an HTTP response from a GetStatusInterfaceInterfacesInterfaceIdWithResponse call
func ParseGetStatusInterfaceInterfacesInterfaceIdResponse(rsp *http.Response) (*GetStatusInterfaceInterfacesInterfaceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceInterfacesInterfaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelResponse parses an HTTP response from a GetStatusInterfaceInterfacesInterfaceIdInputchannelWithResponse call
func ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelResponse(rsp *http.Response) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceInterfacesInterfaceIdInputchannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInterfaceIntputchannels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse parses an HTTP response from a GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdWithResponse call
func ParseGetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse(rsp *http.Response) (*GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceInterfacesInterfaceIdInputchannelChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInterfaceIntputchannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusInterfaceInternalResponse parses an HTTP response from a GetStatusInterfaceInternalWithResponse call
func ParseGetStatusInterfaceInternalResponse(rsp *http.Response) (*GetStatusInterfaceInternalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusInterfaceInternalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusInterfaceInternal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusSaveResponse parses an HTTP response from a GetStatusSaveWithResponse call
func ParseGetStatusSaveResponse(rsp *http.Response) (*GetStatusSaveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusSaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusSave
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStatusSyslogResponse parses an HTTP response from a DeleteStatusSyslogWithResponse call
func ParseDeleteStatusSyslogResponse(rsp *http.Response) (*DeleteStatusSyslogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusSyslogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success *string `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusSyslogResponse parses an HTTP response from a GetStatusSyslogWithResponse call
func ParseGetStatusSyslogResponse(rsp *http.Response) (*GetStatusSyslogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusSyslogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusSyslog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 400:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseGetStatusSystemResponse parses an HTTP response from a GetStatusSystemWithResponse call
func ParseGetStatusSystemResponse(rsp *http.Response) (*GetStatusSystemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Ready *bool `json:"ready,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
